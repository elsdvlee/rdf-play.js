!function(t,e){for(var r in e)t[r]=e[r]}(this,function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=75)}([function(t,e,r){"use strict";var n="http://www.w3.org/1999/02/22-rdf-syntax-ns#",i="http://www.w3.org/2001/XMLSchema#",o="http://www.w3.org/2000/10/swap/";e.a={xsd:{decimal:i+"decimal",boolean:i+"boolean",double:i+"double",integer:i+"integer",string:i+"string"},rdf:{type:n+"type",nil:n+"nil",first:n+"first",rest:n+"rest",langString:n+"langString"},owl:{sameAs:"http://www.w3.org/2002/07/owl#sameAs"},r:{forSome:o+"reify#forSome",forAll:o+"reify#forAll"},log:{implies:o+"log#implies"}}},function(t,e,r){t.exports=i;var n=r(12).EventEmitter;function i(){n.call(this)}r(10)(i,n),i.Readable=r(23),i.Writable=r(95),i.Duplex=r(96),i.Transform=r(97),i.PassThrough=r(98),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",a),r.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(l(),0===n.listenerCount(this,"error"))throw t}function l(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",c),t.removeListener("error",c),r.removeListener("end",l),r.removeListener("close",l),t.removeListener("close",l)}return r.on("error",c),t.on("error",c),r.on("end",l),r.on("close",l),t.on("close",l),t.emit("pipe",r),t}},function(t,e,r){"use strict";(function(t){function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),t&&t.env.COMUNICA_DEBUG||(Error.stackTraceLimit=!1),n(r(35)),n(r(79)),n(r(80)),n(r(81)),n(r(36)),n(r(83))}).call(this,r(9))},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(66)),n(r(20)),n(r(67)),n(r(68)),n(r(33))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(86),i=r(87),o=r(37);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(u.isBuffer(e)){var r=0|d(e.length);return 0===(t=a(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=a(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|d(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return B(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(t).length;default:if(n)return B(t).length;e=(""+e).toLowerCase(),n=!0}}function _(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return O(this,e,r);case"utf8":case"utf-8":return I(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return C(this,e,r);case"base64":return T(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function g(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var l=-1;for(o=r;o<a;o++)if(c(t,o)===c(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var h=!0,f=0;f<u;f++)if(c(t,o+f)!==c(e,f)){h=!1;break}if(h)return o}return-1}function b(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function v(t,e,r,n){return V(B(e,t.length-r),t,r,n)}function w(t,e,r,n){return V(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function x(t,e,r,n){return w(t,e,r,n)}function E(t,e,r,n){return V(U(e),t,r,n)}function S(t,e,r,n){return V(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function T(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function I(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,c=t[i],l=null,h=c>239?4:c>223?3:c>191?2:1;if(i+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=h}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function(t,e,r,n){return l(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=u.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i),i+=s.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?I(this,0,t):_.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,r,n,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(n,i),l=t.slice(e,r),h=0;h<a;++h)if(c[h]!==l[h]){o=c[h],s=l[h];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},u.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},u.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},u.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":return w(this,t,e,r);case"latin1":case"binary":return x(this,t,e,r);case"base64":return E(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function C(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function O(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=q(t[o]);return i}function A(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function P(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function N(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function D(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function k(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function j(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,n,o){return o||j(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function M(t,e,r,n,o){return o||j(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+t]}return r},u.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},u.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},u.prototype.readUInt8=function(t,e){return e||P(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||P(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||P(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||P(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||P(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},u.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||P(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||P(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||P(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(t,e){e||P(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(t,e){return e||P(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||P(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||P(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||P(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||N(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},u.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||N(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},u.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):k(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):k(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);N(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);N(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},u.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):D(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):D(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):k(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):k(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},u.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},u.prototype.writeDoubleLE=function(t,e,r){return M(this,t,e,!0,r)},u.prototype.writeDoubleBE=function(t,e,r){return M(this,t,e,!1,r)},u.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},u.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var s=u.isBuffer(t)?t:B(new u(t,n).toString()),a=s.length;for(o=0;o<r-e;++o)this[o+e]=s[o%a]}return this};var F=/[^+\/0-9A-Za-z-_]/g;function q(t){return t<16?"0"+t.toString(16):t.toString(16)}function B(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(F,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(4))},function(t,e,r){"use strict";var n=r(18),i=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=h;var o=Object.create(r(13));o.inherits=r(10);var s=r(38),a=r(25);o.inherits(h,s);for(var u=i(a.prototype),c=0;c<u.length;c++){var l=u[c];h.prototype[l]||(h.prototype[l]=a.prototype[l])}function h(t){if(!(this instanceof h))return new h(t);s.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",f)}function f(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),n.nextTick(e,t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(70),o=r(69);class s{constructor(t){this.parsingContext=t.parsingContext,this.dataFactory=t.dataFactory||r(19),this.rdfFirst=this.dataFactory.namedNode(s.RDF+"first"),this.rdfRest=this.dataFactory.namedNode(s.RDF+"rest"),this.rdfNil=this.dataFactory.namedNode(s.RDF+"nil"),this.rdfType=this.dataFactory.namedNode(s.RDF+"type"),this.rdfJson=this.dataFactory.namedNode(s.RDF+"JSON")}static getContextValue(t,e,r,n){const i=t.getContextRaw()[r];if(!i)return n;const o=i[e];return void 0===o?n:o}static getContextValueContainer(t,e){return s.getContextValue(t,"@container",e,{"@set":!0})}static getContextValueType(t,e){const r=s.getContextValue(t,"@type",e,null);return"@none"===r?null:r}static getContextValueLanguage(t,e){return s.getContextValue(t,"@language",e,t.getContextRaw()["@language"]||null)}static getContextValueDirection(t,e){return s.getContextValue(t,"@direction",e,t.getContextRaw()["@direction"]||null)}static isContextValueReverse(t,e){return!!s.getContextValue(t,"@reverse",e,null)}static getContextValueIndex(t,e){return s.getContextValue(t,"@index",e,t.getContextRaw()["@index"]||null)}static isPropertyReverse(t,e,r){return"@reverse"===r!==s.isContextValueReverse(t,e)}static isValidIri(t){return null!==t&&n.Util.isValidIri(t)}static isPrefixArray(t,e){if(t.length>e.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}async validateValueIndexes(t){if(this.parsingContext.validateValueIndexes){const e={};for(const r of t)if(r&&"object"==typeof r){const t=r["@id"],i=r["@index"];if(t&&i){const r=e[t];if(r&&r!==i)throw new n.ErrorCoded(`Conflicting @index value for ${t}`,n.ERROR_CODES.CONFLICTING_INDEXES);e[t]=i}}}}async valueToTerm(t,e,r,i,o){if("@json"===s.getContextValueType(t,e))return[this.dataFactory.literal(this.valueToJsonString(r),this.rdfJson)];const a=typeof r;switch(a){case"object":if(null==r)return[];if(Array.isArray(r))return"@list"in s.getContextValueContainer(t,e)?0===r.length?[this.rdfNil]:this.parsingContext.idStack[i+1]||[]:(await this.validateValueIndexes(r),[]);if(t=await this.getContextSelfOrPropertyScoped(t,e),"@context"in r&&(t=await this.parsingContext.parseContext(r["@context"],(await this.parsingContext.getContext(o,0)).getContextRaw())),"@value"in(r=await this.unaliasKeywords(r,o,i,t))){let s,a,u,c,l;for(e in r){const t=r[e];switch(e){case"@value":s=t;break;case"@language":a=t;break;case"@direction":u=t;break;case"@type":c=t;break;case"@index":l=t;break;default:throw new n.ErrorCoded(`Unknown value entry '${e}' in @value: ${JSON.stringify(r)}`,n.ERROR_CODES.INVALID_VALUE_OBJECT)}}if("@json"===await this.unaliasKeyword(c,o,i,!0,t))return[this.dataFactory.literal(this.valueToJsonString(s),this.rdfJson)];if(null===s)return[];if("object"==typeof s)throw new n.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(s)}'`,n.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);if(this.parsingContext.validateValueIndexes&&l&&"string"!=typeof l)throw new n.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(l)}'`,n.ERROR_CODES.INVALID_INDEX_VALUE);if(a){if("string"!=typeof s)throw new n.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(s)}'`,n.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);if(!n.ContextParser.validateLanguage(a,this.parsingContext.strictValues,n.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING))return[];(this.parsingContext.normalizeLanguageTags||1===this.parsingContext.activeProcessingMode)&&(a=a.toLowerCase())}if(u){if("string"!=typeof s)throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(s)}'`);if(!n.ContextParser.validateDirection(u,this.parsingContext.strictValues))return[]}if(a&&u&&this.parsingContext.rdfDirection){if(c)throw new n.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON.stringify(r)}'`,n.ERROR_CODES.INVALID_VALUE_OBJECT);return this.nullableTermToArray(this.createLanguageDirectionLiteral(i,s,a,u))}if(a){if(c)throw new n.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(r)}'`,n.ERROR_CODES.INVALID_VALUE_OBJECT);return[this.dataFactory.literal(s,a)]}if(u&&this.parsingContext.rdfDirection){if(c)throw new n.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(r)}'`,n.ERROR_CODES.INVALID_VALUE_OBJECT);return this.nullableTermToArray(this.createLanguageDirectionLiteral(i,s,a,u))}if(c){if("string"!=typeof c)throw new n.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(c)}'`,n.ERROR_CODES.INVALID_TYPE_VALUE);const e=this.createVocabOrBaseTerm(t,c);if(!e)throw new n.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(c)}'`,n.ERROR_CODES.INVALID_TYPED_VALUE);if("NamedNode"!==e.termType)throw new n.ErrorCoded(`Illegal value type (${e.termType}): ${c}`,n.ERROR_CODES.INVALID_TYPED_VALUE);return[this.dataFactory.literal(s,e)]}return await this.valueToTerm(new n.JsonLdContextNormalized({}),e,s,i,o)}if("@set"in r){if(Object.keys(r).length>1)throw new n.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${e}'`,n.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);return[]}if("@list"in r){if(Object.keys(r).length>1)throw new n.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${e}'`,n.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);const t=r["@list"];return Array.isArray(t)?0===t.length?[this.rdfNil]:this.parsingContext.idStack[i+1]||[]:await this.valueToTerm(await this.parsingContext.getContext(o),e,t,i-1,o.slice(0,-1))}if("@reverse"in r)return[];if("@graph"in s.getContextValueContainer(await this.parsingContext.getContext(o),e)){const t=this.parsingContext.graphContainerTermStack[i+1];return t?Object.values(t):[this.dataFactory.blankNode()]}return"@id"in r?(Object.keys(r).length>1&&(t=await this.parsingContext.getContext(o,0)),"@context"in r&&(t=await this.parsingContext.parseContext(r["@context"],t.getContextRaw())),"@vocab"===r["@type"]?this.nullableTermToArray(this.createVocabOrBaseTerm(t,r["@id"])):this.nullableTermToArray(this.resourceToTerm(t,r["@id"]))):this.parsingContext.emittedStack[i+1]?this.parsingContext.idStack[i+1]||(this.parsingContext.idStack[i+1]=[this.dataFactory.blankNode()]):[];case"string":return this.nullableTermToArray(this.stringValueToTerm(i,await this.getContextSelfOrPropertyScoped(t,e),e,r,null));case"boolean":return this.nullableTermToArray(this.stringValueToTerm(i,await this.getContextSelfOrPropertyScoped(t,e),e,Boolean(r).toString(),this.dataFactory.namedNode(s.XSD_BOOLEAN)));case"number":return this.nullableTermToArray(this.stringValueToTerm(i,await this.getContextSelfOrPropertyScoped(t,e),e,r,this.dataFactory.namedNode(r%1==0&&r<1e21?s.XSD_INTEGER:s.XSD_DOUBLE)));default:return this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${a}`)),[]}}async getContextSelfOrPropertyScoped(t,e){const r=t.getContextRaw()[e];return r&&"object"==typeof r&&"@context"in r&&(t=await this.parsingContext.parseContext(r,t.getContextRaw(),!0)),t}nullableTermToArray(t){return t?[t]:[]}predicateToTerm(t,e){const r=t.expandTerm(e,!0,this.parsingContext.getExpandOptions());return r?"_"===r[0]&&":"===r[1]?this.parsingContext.produceGeneralizedRdf?this.dataFactory.blankNode(r.substr(2)):null:s.isValidIri(r)?this.dataFactory.namedNode(r):r&&this.parsingContext.strictValues?(this.parsingContext.emitError(new n.ErrorCoded(`Invalid predicate IRI: ${r}`,n.ERROR_CODES.INVALID_IRI_MAPPING)),null):null:null}resourceToTerm(t,e){if(e.startsWith("_:"))return this.dataFactory.blankNode(e.substr(2));const r=t.expandTerm(e,!1,this.parsingContext.getExpandOptions());if(!s.isValidIri(r)){if(!r||!this.parsingContext.strictValues)return null;this.parsingContext.emitError(new Error(`Invalid resource IRI: ${r}`))}return this.dataFactory.namedNode(r)}createVocabOrBaseTerm(t,e){if(e.startsWith("_:"))return this.dataFactory.blankNode(e.substr(2));const r=this.parsingContext.getExpandOptions();let n=t.expandTerm(e,!0,r);if(n===e&&(n=t.expandTerm(e,!1,r)),!s.isValidIri(n)){if(!n||!this.parsingContext.strictValues)return null;this.parsingContext.emitError(new Error(`Invalid term IRI: ${n}`))}return this.dataFactory.namedNode(n)}intToString(t,e){if("number"==typeof t){if(Number.isFinite(t)){return!(t%1==0)||e&&e.value===s.XSD_DOUBLE?t.toExponential(15).replace(/(\d)0*e\+?/,"$1E"):Number(t).toString()}return t>0?"INF":"-INF"}return t}stringValueToTerm(t,e,r,n,i){const o=s.getContextValueType(e,r);if(o)if("@id"===o){if(!i)return this.resourceToTerm(e,this.intToString(n,i))}else if("@vocab"===o){if(!i)return this.createVocabOrBaseTerm(e,this.intToString(n,i))}else i=this.dataFactory.namedNode(o);if(!i){const o=s.getContextValueLanguage(e,r),a=s.getContextValueDirection(e,r);return a&&this.parsingContext.rdfDirection?this.createLanguageDirectionLiteral(t,this.intToString(n,i),o,a):this.dataFactory.literal(this.intToString(n,i),o)}return this.dataFactory.literal(this.intToString(n,i),i)}createLanguageDirectionLiteral(t,e,r,n){if("i18n-datatype"===this.parsingContext.rdfDirection)return r||(r=""),this.dataFactory.literal(e,this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${r}_${n}`));{const i=this.dataFactory.blankNode(),o=this.getDefaultGraph();return this.parsingContext.emitQuad(t,this.dataFactory.quad(i,this.dataFactory.namedNode(s.RDF+"value"),this.dataFactory.literal(e),o)),r&&this.parsingContext.emitQuad(t,this.dataFactory.quad(i,this.dataFactory.namedNode(s.RDF+"language"),this.dataFactory.literal(r),o)),this.parsingContext.emitQuad(t,this.dataFactory.quad(i,this.dataFactory.namedNode(s.RDF+"direction"),this.dataFactory.literal(n),o)),i}}valueToJsonString(t){return o(t)}async unaliasKeyword(t,e,r,i,o){if(Number.isInteger(t))return t;if(!i){const t=this.parsingContext.unaliasedKeywordCacheStack[r];if(t)return t}if(!n.Util.isPotentialKeyword(t)){let r=(o=o||await this.parsingContext.getContext(e)).getContextRaw()[t];r&&"object"==typeof r&&(r=r["@id"]),n.Util.isValidKeyword(r)&&(t=r)}return i?t:this.parsingContext.unaliasedKeywordCacheStack[r]=t}async unaliasKeywordParent(t,e){return await this.unaliasKeyword(e>0&&t[e-1],t,e-1)}async unaliasKeywords(t,e,r,n){const i={};for(const o in t)i[await this.unaliasKeyword(o,e,r+1,!0,n)]=t[o];return i}isLiteral(t){for(let e=t;e>=0;e--)if(this.parsingContext.literalStack[e]||this.parsingContext.jsonLiteralStack[e])return!0;return!1}async getDepthOffsetGraph(t,e){for(let r=t-1;r>0;r--)if("@graph"===await this.unaliasKeyword(e[r],e,r)){const n=(await i.EntryHandlerContainer.getContainerHandler(this.parsingContext,e,r)).containers;return i.EntryHandlerContainer.isComplexGraphContainer(n)?-1:t-r-1}return-1}validateReverseSubject(t){if("Literal"===t.termType)throw new n.ErrorCoded(`Found illegal literal in subject position: ${t.value}`,n.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE)}getDefaultGraph(){return this.parsingContext.defaultGraph||this.dataFactory.defaultGraph()}async getGraphContainerValue(t,e){let r=this.getDefaultGraph();const{containers:n,depth:o}=await i.EntryHandlerContainer.getContainerHandler(this.parsingContext,t,e);if("@graph"in n){const e=i.EntryHandlerContainer.getContainerGraphIndex(n,o,t),s=this.parsingContext.graphContainerTermStack[o];if(r=s?s[e]:null,!r){let i=null;if("@id"in n){const e=await this.getContainerKey(t[o],t,o);null!==e&&(i=await this.resourceToTerm(await this.parsingContext.getContext(t),e))}i||(i=this.dataFactory.blankNode()),this.parsingContext.graphContainerTermStack[o]||(this.parsingContext.graphContainerTermStack[o]={}),r=this.parsingContext.graphContainerTermStack[o][e]=i}}return r}async getPropertiesDepth(t,e){let r=e;for(let n=e-1;n>0;n--)if("number"!=typeof t[n]){const e=await this.unaliasKeyword(t[n],t,n);if("@reverse"===e)return n;if("@nest"!==e)return r;r=n}return r}async getContainerKey(t,e,r){const n=await this.unaliasKeyword(t,e,r);return"@none"===n?null:n}}s.XSD="http://www.w3.org/2001/XMLSchema#",s.XSD_BOOLEAN=s.XSD+"boolean",s.XSD_INTEGER=s.XSD+"integer",s.XSD_DOUBLE=s.XSD+"double",s.RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#",e.Util=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.EntryHandlerKeyword=class{constructor(t){this.keyword=t}isPropertyHandler(){return!1}isStackProcessor(){return!0}async validate(t,e,r,n,i){return!1}async test(t,e,r,n,i){return r===this.keyword}}},function(t,e){var r,n,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(t){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&d())}function d(){if(!l){var t=a(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function _(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new p(t,e)),1!==c.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(116))},function(t,e,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}t.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function l(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function h(t,e,r,n){var i,o,s,a;if(c(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),s=o[e]),void 0===s)s=o[e]=r,++t._eventsCount;else if("function"==typeof s?s=o[e]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=l(t))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function f(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=f.bind(n);return i.listener=r,n.wrapFn=i,i}function p(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):g(i,i.length)}function _(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return l(this)},a.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var c=u.length,l=g(u,c);for(r=0;r<c;++r)o(l[r],this,e)}return!0},a.prototype.addListener=function(t,e){return h(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return h(this,t,e,!0)},a.prototype.once=function(t,e){return c(e),this.on(t,d(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){return c(e),this.prependListener(t,d(this,t,e)),this},a.prototype.removeListener=function(t,e){var r,n,i,o,s;if(c(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},a.prototype.listeners=function(t){return p(this,t,!0)},a.prototype.rawListeners=function(t){return p(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):_.call(t,e)},a.prototype.listenerCount=_,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,r(5).Buffer)},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(108)),n(r(111))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(30);e.isTag=function(t){return n.isTag(t)},e.isCDATA=function(t){return"cdata"===t.type},e.isText=function(t){return"text"===t.type},e.isComment=function(t){return"comment"===t.type},e.hasChildren=function(t){return Object.prototype.hasOwnProperty.call(t,"children")}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(78))},function(t,e){var r=/^(?:0|[1-9]\d*)$/;function n(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}var i,o,s=Object.prototype,a=s.hasOwnProperty,u=s.toString,c=s.propertyIsEnumerable,l=(i=Object.keys,o=Object,function(t){return i(o(t))}),h=Math.max,f=!c.call({valueOf:1},"valueOf");function d(t,e){var r=m(t)||function(t){return function(t){return function(t){return!!t&&"object"==typeof t}(t)&&b(t)}(t)&&a.call(t,"callee")&&(!c.call(t,"callee")||"[object Arguments]"==u.call(t))}(t)?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],n=r.length,i=!!n;for(var o in t)!e&&!a.call(t,o)||i&&("length"==o||_(o,n))||r.push(o);return r}function p(t,e,r){var n=t[e];a.call(t,e)&&y(n,r)&&(void 0!==r||e in t)||(t[e]=r)}function _(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||r.test(t))&&t>-1&&t%1==0&&t<e}function g(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||s)}function y(t,e){return t===e||t!=t&&e!=e}var m=Array.isArray;function b(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}(t.length)&&!function(t){var e=v(t)?u.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}(t)}function v(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}var w,x=(w=function(t,e){if(f||g(e)||b(e))!function(t,e,r,n){r||(r={});for(var i=-1,o=e.length;++i<o;){var s=e[i],a=n?n(r[s],t[s],s,r,t):void 0;p(r,s,void 0===a?t[s]:a)}}(e,function(t){return b(t)?d(t):function(t){if(!g(t))return l(t);var e=[];for(var r in Object(t))a.call(t,r)&&"constructor"!=r&&e.push(r);return e}(t)}(e),t);else for(var r in e)a.call(e,r)&&p(t,r,e[r])},function(t,e){return e=h(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=h(r.length-e,0),s=Array(o);++i<o;)s[i]=r[e+i];i=-1;for(var a=Array(e+1);++i<e;)a[i]=r[i];return a[e]=s,n(t,this,a)}}((function(t,e){var r=-1,n=e.length,i=n>1?e[n-1]:void 0,o=n>2?e[2]:void 0;for(i=w.length>3&&"function"==typeof i?(n--,i):void 0,o&&function(t,e,r){if(!v(r))return!1;var n=typeof e;return!!("number"==n?b(r)&&_(e,r.length):"string"==n&&e in r)&&y(r[e],t)}(e[0],e[1],o)&&(i=n<3?void 0:i,n=1),t=Object(t);++r<n;){var s=e[r];s&&w(t,s,r,i)}return t})));t.exports=x},function(t,e,r){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r)}));case 3:return e.nextTick((function(){t.call(null,r,n)}));case 4:return e.nextTick((function(){t.call(null,r,n,i)}));default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,r(9))},function(t,e,r){var n=r(119);t.exports=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n extends Error{constructor(t,e){super(t),this.code=e}}e.ErrorCoded=n,function(t){t.COLLIDING_KEYWORDS="colliding keywords",t.CONFLICTING_INDEXES="conflicting indexes",t.CYCLIC_IRI_MAPPING="cyclic IRI mapping",t.INVALID_ID_VALUE="invalid @id value",t.INVALID_INDEX_VALUE="invalid @index value",t.INVALID_NEST_VALUE="invalid @nest value",t.INVALID_PREFIX_VALUE="invalid @prefix value",t.INVALID_PROPAGATE_VALUE="invalid @propagate value",t.INVALID_REVERSE_VALUE="invalid @reverse value",t.INVALID_IMPORT_VALUE="invalid @import value",t.INVALID_VERSION_VALUE="invalid @version value",t.INVALID_BASE_IRI="invalid base IRI",t.INVALID_CONTAINER_MAPPING="invalid container mapping",t.INVALID_CONTEXT_ENTRY="invalid context entry",t.INVALID_CONTEXT_NULLIFICATION="invalid context nullification",t.INVALID_DEFAULT_LANGUAGE="invalid default language",t.INVALID_INCLUDED_VALUE="invalid @included value",t.INVALID_IRI_MAPPING="invalid IRI mapping",t.INVALID_JSON_LITERAL="invalid JSON literal",t.INVALID_KEYWORD_ALIAS="invalid keyword alias",t.INVALID_LANGUAGE_MAP_VALUE="invalid language map value",t.INVALID_LANGUAGE_MAPPING="invalid language mapping",t.INVALID_LANGUAGE_TAGGED_STRING="invalid language-tagged string",t.INVALID_LANGUAGE_TAGGED_VALUE="invalid language-tagged value",t.INVALID_LOCAL_CONTEXT="invalid local context",t.INVALID_REMOTE_CONTEXT="invalid remote context",t.INVALID_REVERSE_PROPERTY="invalid reverse property",t.INVALID_REVERSE_PROPERTY_MAP="invalid reverse property map",t.INVALID_REVERSE_PROPERTY_VALUE="invalid reverse property value",t.INVALID_SCOPED_CONTEXT="invalid scoped context",t.INVALID_SCRIPT_ELEMENT="invalid script element",t.INVALID_SET_OR_LIST_OBJECT="invalid set or list object",t.INVALID_TERM_DEFINITION="invalid term definition",t.INVALID_TYPE_MAPPING="invalid type mapping",t.INVALID_TYPE_VALUE="invalid type value",t.INVALID_TYPED_VALUE="invalid typed value",t.INVALID_VALUE_OBJECT="invalid value object",t.INVALID_VALUE_OBJECT_VALUE="invalid value object value",t.INVALID_VOCAB_MAPPING="invalid vocab mapping",t.IRI_CONFUSED_WITH_PREFIX="IRI confused with prefix",t.KEYWORD_REDEFINITION="keyword redefinition",t.LOADING_DOCUMENT_FAILED="loading document failed",t.LOADING_REMOTE_CONTEXT_FAILED="loading remote context failed",t.MULTIPLE_CONTEXT_LINK_HEADERS="multiple context link headers",t.PROCESSING_MODE_CONFLICT="processing mode conflict",t.PROTECTED_TERM_REDEFINITION="protected term redefinition",t.CONTEXT_OVERFLOW="context overflow",t.INVALID_BASE_DIRECTION="invalid base direction",t.RECURSIVE_CONTEXT_INCLUSION="recursive context inclusion",t.INVALID_STREAMING_KEY_ORDER="invalid streaming key order"}(e.ERROR_CODES||(e.ERROR_CODES={}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(7);class o{static async handlePredicateObject(t,e,r,n,i,o,s){const a=await e.getPropertiesDepth(r,n),u=await e.getDepthOffsetGraph(n,r),c=n-u,l=t.idStack[a];if(l)for(const h of l){if(u>=0){const r=t.idStack[c-1];if(r)for(const a of r)s?(e.validateReverseSubject(o),t.emitQuad(n,e.dataFactory.quad(o,i,h,a))):t.emitQuad(n,e.dataFactory.quad(h,i,o,a));else s?(e.validateReverseSubject(o),t.getUnidentifiedGraphBufferSafe(c-1).push({subject:o,predicate:i,object:h})):t.getUnidentifiedGraphBufferSafe(c-1).push({subject:h,predicate:i,object:o})}else{const u=await e.getGraphContainerValue(r,a);s?(e.validateReverseSubject(o),t.emitQuad(n,e.dataFactory.quad(o,i,h,u))):t.emitQuad(n,e.dataFactory.quad(h,i,o,u))}}else s&&e.validateReverseSubject(o),t.getUnidentifiedValueBufferSafe(a).push({predicate:i,object:o,reverse:s})}isPropertyHandler(){return!0}isStackProcessor(){return!0}async validate(t,e,r,n,o){const s=r[n];if(s){const o=await t.getContext(r);if(await e.predicateToTerm(o,r[n]))return"@json"===i.Util.getContextValueType(o,s)&&(t.jsonLiteralStack[n+1]=!0),!0}return!1}async test(t,e,r,n,i){return n[i]}async handle(t,e,r,s,a,u,c){const l=s[u],h=await t.getContext(s),f=await e.predicateToTerm(h,r);if(f){const c=await e.valueToTerm(h,r,a,u,s);if(c.length)for(let d of c){const c=i.Util.isPropertyReverse(h,l,await e.unaliasKeywordParent(s,u));if(a){const o="@list"in i.Util.getContextValueContainer(h,r);if(o||a["@list"]){if((o&&!Array.isArray(a)&&!a["@list"]||a["@list"]&&!Array.isArray(a["@list"]))&&d!==e.rdfNil){const r=e.dataFactory.blankNode();t.emitQuad(u,e.dataFactory.quad(r,e.rdfRest,e.rdfNil,e.getDefaultGraph())),t.emitQuad(u,e.dataFactory.quad(r,e.rdfFirst,d,e.getDefaultGraph())),d=r}if(c&&!t.allowSubjectList)throw new n.ErrorCoded(`Found illegal list value in subject position at ${r}`,n.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE)}}await o.handlePredicateObject(t,e,s,u,f,d,c)}else t.emittedStack[u]=!1}}}e.EntryHandlerPredicate=o},function(t,e,r){"use strict";(function(t,n){r.d(e,"a",(function(){return f}));var i=r(0);const{xsd:o}=i.a,{fromCharCode:s}=String;var a=/\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\[uU]|\\(.)/g,u={"\\":"\\","'":"'",'"':'"',n:"\n",r:"\r",t:"\t",f:"\f",b:"\b",_:"_","~":"~",".":".","-":"-","!":"!",$:"$","&":"&","(":"(",")":")","*":"*","+":"+",",":",",";":";","=":"=","/":"/","?":"?","#":"#","@":"@","%":"%"},c=/[\x00-\x20<>\\"\{\}\|\^\`]/,l={_iri:!0,_unescapedIri:!0,_simpleQuotedString:!0,_langcode:!0,_blank:!0,_newline:!0,_comment:!0,_whitespace:!0,_endOfFile:!0},h=/$0^/;class f{constructor(t){if(this._iri=/^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/,this._unescapedIri=/^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/,this._simpleQuotedString=/^"([^"\\\r\n]*)"(?=[^"])/,this._simpleApostropheString=/^'([^'\\\r\n]*)'(?=[^'])/,this._langcode=/^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i,this._prefix=/^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/,this._prefixed=/^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<]))/,this._variable=/^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<])/,this._blank=/^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<]))/,this._number=/^[\-+]?(?:\d+\.?\d*([eE](?:[\-\+])?\d+)|\d*\.?\d+)(?=\.?[,;:\s#()\[\]\{\}"'<])/,this._boolean=/^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<])/,this._keyword=/^@[a-z]+(?=[\s#<:])/i,this._sparqlKeyword=/^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i,this._shortPredicates=/^a(?=[\s()\[\]\{\}"'<])/,this._newline=/^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/,this._comment=/#([^\n\r]*)/,this._whitespace=/^[ \t]+/,this._endOfFile=/^(?:#[^\n\r]*)?$/,t=t||{},this._lineMode=!!t.lineMode)for(var e in this._n3Mode=!1,this)!(e in l)&&this[e]instanceof RegExp&&(this[e]=h);else this._n3Mode=!1!==t.n3;this._comments=!!t.comments,this._literalClosingPos=0}_tokenizeToEnd(t,e){for(var r=this._input,n=this._comments;;){for(var i,s;i=this._newline.exec(r);)n&&(s=this._comment.exec(i[0]))&&t(null,{line:this._line,type:"comment",value:s[1],prefix:""}),r=r.substr(i[0].length,r.length),this._line++;if(!i&&(i=this._whitespace.exec(r))&&(r=r.substr(i[0].length,r.length)),this._endOfFile.test(r))return e&&(n&&(s=this._comment.exec(r))&&t(null,{line:this._line,type:"comment",value:s[1],prefix:""}),t(r=null,{line:this._line,type:"eof",value:"",prefix:""})),this._input=r;var a=this._line,u="",l="",h="",f=r[0],d=null,p=0,_=!1;switch(f){case"^":if(r.length<3)break;if("^"!==r[1]){this._n3Mode&&(p=1,u="^");break}if(this._previousMarker="^^","<"!==(r=r.substr(2))[0]){_=!0;break}case"<":if(d=this._unescapedIri.exec(r))u="IRI",l=d[1];else if(d=this._iri.exec(r)){if(null===(l=this._unescape(d[1]))||c.test(l))return y(this);u="IRI"}else this._n3Mode&&r.length>1&&"="===r[1]&&(u="inverse",p=2,l=">");break;case"_":((d=this._blank.exec(r))||e&&(d=this._blank.exec(r+" ")))&&(u="blank",h="_",l=d[1]);break;case'"':if(d=this._simpleQuotedString.exec(r))l=d[1];else if(({value:l,matchLength:p}=this._parseLiteral(r)),null===l)return y(this);null===d&&0===p||(u="literal",this._literalClosingPos=0);break;case"'":if(!this._lineMode){if(d=this._simpleApostropheString.exec(r))l=d[1];else if(({value:l,matchLength:p}=this._parseLiteral(r)),null===l)return y(this);null===d&&0===p||(u="literal",this._literalClosingPos=0)}break;case"?":this._n3Mode&&(d=this._variable.exec(r))&&(u="var",l=d[0]);break;case"@":"literal"===this._previousMarker&&(d=this._langcode.exec(r))?(u="langcode",l=d[1]):(d=this._keyword.exec(r))&&(u=d[0]);break;case".":if(1===r.length?e:r[1]<"0"||r[1]>"9"){u=".",p=1;break}case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"+":case"-":(d=this._number.exec(r)||e&&(d=this._number.exec(r+" ")))&&(u="literal",l=d[0],h=d[1]?o.double:/^[+\-]?\d+$/.test(d[0])?o.integer:o.decimal);break;case"B":case"b":case"p":case"P":case"G":case"g":(d=this._sparqlKeyword.exec(r))?u=d[0].toUpperCase():_=!0;break;case"f":case"t":(d=this._boolean.exec(r))?(u="literal",l=d[0],h=o.boolean):_=!0;break;case"a":(d=this._shortPredicates.exec(r))?(u="abbreviation",l="a"):_=!0;break;case"=":this._n3Mode&&r.length>1&&(u="abbreviation",">"!==r[1]?(p=1,l="="):(p=2,l=">"));break;case"!":if(!this._n3Mode)break;case",":case";":case"[":case"]":case"(":case")":case"{":case"}":this._lineMode||(p=1,u=f);break;default:_=!0}if(_&&("@prefix"!==this._previousMarker&&"PREFIX"!==this._previousMarker||!(d=this._prefix.exec(r))?((d=this._prefixed.exec(r))||e&&(d=this._prefixed.exec(r+" ")))&&(u="prefixed",h=d[1]||"",l=this._unescape(d[2])):(u="prefix",l=d[1]||"")),"^^"===this._previousMarker)switch(u){case"prefixed":u="type";break;case"IRI":u="typeIRI";break;default:u=""}if(!u)return e||!/^'''|^"""/.test(r)&&/\n|\r/.test(r)?y(this):this._input=r;var g={line:a,type:u,value:l,prefix:h};t(null,g),this.previousToken=g,this._previousMarker=u,r=r.substr(p||d[0].length,r.length)}function y(e){t(e._syntaxError(/^\S*/.exec(r)[0]))}}_unescape(t){try{return t.replace(a,(function(t,e,r,n){var i;if(e){if(i=parseInt(e,16),isNaN(i))throw new Error;return s(i)}if(r){if(i=parseInt(r,16),isNaN(i))throw new Error;return i<=65535?s(i):s(55296+(i-=65536)/1024,56320+(1023&i))}var o=u[n];if(!o)throw new Error;return o}))}catch(t){return null}}_parseLiteral(t){if(t.length>=3){const e=t.match(/^(?:"""|"|'''|'|)/)[0],r=e.length;let n=Math.max(this._literalClosingPos,r);for(;(n=t.indexOf(e,n))>0;){let e=0;for(;"\\"===t[n-e-1];)e++;if(e%2==0){const e=t.substring(r,n),i=e.split(/\r\n|\r|\n/).length-1,o=n+r;if(1===r&&0!==i||3===r&&this._lineMode)break;return this._line+=i,{value:this._unescape(e),matchLength:o}}n++}this._literalClosingPos=t.length-r+1}return{value:"",matchLength:0}}_syntaxError(t){this._input=null;var e=new Error('Unexpected "'+t+'" on line '+this._line+".");return e.context={token:void 0,line:this._line,previousToken:this.previousToken},e}tokenize(e,r){var i=this;if(this._line=1,"string"==typeof e){if(this._input=e,"function"!=typeof r){var o,s=[];if(this._tokenizeToEnd((function(t,e){t?o=t:s.push(e)}),!0),o)throw o;return s}t((function(){i._tokenizeToEnd(r,!0)}))}else this._input="",this._pendingBuffer=null,"function"==typeof e.setEncoding&&e.setEncoding("utf8"),e.on("data",(function(t){null!==i._input&&0!==t.length&&(i._pendingBuffer&&(t=n.concat([i._pendingBuffer,t]),i._pendingBuffer=null),128&t[t.length-1]?i._pendingBuffer=t:(i._input+=t,i._tokenizeToEnd(r,!1)))})),e.on("end",(function(){null!==i._input&&i._tokenizeToEnd(r,!0)})),e.on("error",r)}}}).call(this,r(26).setImmediate,r(5).Buffer)},function(t,e,r){(e=t.exports=r(38)).Stream=e,e.Readable=e,e.Writable=r(25),e.Duplex=r(6),e.Transform=r(41),e.PassThrough=r(94)},function(t,e,r){var n=r(5),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=s),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){"use strict";(function(e,n,i){var o=r(18);function s(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;t.entry=null;for(;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=m;var a,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:o.nextTick;m.WritableState=y;var c=Object.create(r(13));c.inherits=r(10);var l={deprecate:r(92)},h=r(39),f=r(24).Buffer,d=i.Uint8Array||function(){};var p,_=r(40);function g(){}function y(t,e){a=a||r(6),t=t||{};var n=e instanceof a;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,c=t.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(c||0===c)?c:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(o.nextTick(i,n),o.nextTick(S,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),S(t,e))}(t,r,n,e,i);else{var s=x(r);s||r.corked||r.bufferProcessing||!r.bufferedRequest||w(t,r),n?u(v,t,r,s,i):v(t,r,s,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function m(t){if(a=a||r(6),!(p.call(m,this)||this instanceof a))return new m(t);this._writableState=new y(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function b(t,e,r,n,i,o,s){e.writelen=n,e.writecb=s,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function v(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),S(t,e)}function w(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,i=new Array(n),o=e.corkedRequestsFree;o.entry=r;for(var a=0,u=!0;r;)i[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;i.allBuffers=u,b(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new s(e),e.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,l=r.encoding,h=r.callback;if(b(t,e,!1,e.objectMode?1:c.length,c,l,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function x(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function E(t,e){t._final((function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),S(t,e)}))}function S(t,e){var r=x(e);return r&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(E,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}c.inherits(m,h),y.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(y.prototype,"buffer",{get:l.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(m,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===m&&(t&&t._writableState instanceof y)}})):p=function(t){return t instanceof this},m.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},m.prototype.write=function(t,e,r){var n,i=this._writableState,s=!1,a=!i.objectMode&&(n=t,f.isBuffer(n)||n instanceof d);return a&&!f.isBuffer(t)&&(t=function(t){return f.from(t)}(t)),"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof r&&(r=g),i.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),o.nextTick(e,r)}(this,r):(a||function(t,e,r,n){var i=!0,s=!1;return null===r?s=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),o.nextTick(n,s),i=!1),i}(this,i,t,r))&&(i.pendingcb++,s=function(t,e,r,n,i,o){if(!r){var s=function(t,e,r){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=f.from(e,r));return e}(e,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=e.objectMode?1:n.length;e.length+=a;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else b(t,e,!1,a,n,i,o);return u}(this,i,a,t,e,r)),s},m.prototype.cork=function(){this._writableState.corked++},m.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||w(this,t))},m.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(m.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),m.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},m.prototype._writev=null,m.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,S(t,e),r&&(e.finished?o.nextTick(r):t.once("finish",r));e.ended=!0,t.writable=!1}(this,n,r)},Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),m.prototype.destroy=_.destroy,m.prototype._undestroy=_.undestroy,m.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,r(9),r(26).setImmediate,r(4))},function(t,e,r){(function(t){var n=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},r(91),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(4))},function(t,e,r){"use strict";var n=r(93).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=l,this.end=h,e=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function l(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function f(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=s(e[n]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=s(e[n]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=s(e[n]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t){t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(t){t.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isTag=function(t){return"tag"===t.type||"script"===t.type||"style"===t.type},e.Text="text",e.Directive="directive",e.Comment="comment",e.Script="script",e.Style="style",e.Tag="tag",e.CDATA="cdata",e.Doctype="doctype"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RDFA_FEATURES={"":{baseTag:!0,xmlBase:!0,langAttribute:!0,onlyAllowUriRelRevIfProperty:!0,inheritSubjectInHeadBody:!0,datetimeAttribute:!0,timeTag:!0,htmlDatatype:!0,copyRdfaPatterns:!0,xmlnsPrefixMappings:!0,xhtmlInitialContext:!0,roleAttribute:!0},core:{baseTag:!1,xmlBase:!1,langAttribute:!0,onlyAllowUriRelRevIfProperty:!0,inheritSubjectInHeadBody:!1,datetimeAttribute:!1,timeTag:!1,htmlDatatype:!1,copyRdfaPatterns:!0,xmlnsPrefixMappings:!0,xhtmlInitialContext:!1,roleAttribute:!1},html:{baseTag:!0,xmlBase:!1,langAttribute:!0,onlyAllowUriRelRevIfProperty:!0,inheritSubjectInHeadBody:!0,datetimeAttribute:!0,timeTag:!0,htmlDatatype:!0,copyRdfaPatterns:!0,xmlnsPrefixMappings:!0,xhtmlInitialContext:!1,roleAttribute:!0},xhtml:{baseTag:!0,xmlBase:!1,langAttribute:!0,onlyAllowUriRelRevIfProperty:!0,inheritSubjectInHeadBody:!0,datetimeAttribute:!0,timeTag:!0,htmlDatatype:!0,copyRdfaPatterns:!0,xmlnsPrefixMappings:!0,xhtmlInitialContext:!0,roleAttribute:!0},xml:{baseTag:!1,xmlBase:!0,langAttribute:!0,onlyAllowUriRelRevIfProperty:!1,inheritSubjectInHeadBody:!1,datetimeAttribute:!0,timeTag:!0,htmlDatatype:!1,copyRdfaPatterns:!1,xmlnsPrefixMappings:!0,xhtmlInitialContext:!1,roleAttribute:!0}},e.RDFA_CONTENTTYPES={"text/html":"html","application/xhtml+xml":"xhtml","application/xml":"xml","text/xml":"xml","image/svg+xml":"xml"}},function(t,e,r){r(149),t.exports=self.fetch.bind(self)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{static isCompactIri(t){return t.indexOf(":")>0&&!(t&&"#"===t[0])}static getPrefix(t,e){if(t&&"#"===t[0])return null;const r=t.indexOf(":");if(r>=0){if(t.length>r+1&&"/"===t.charAt(r+1)&&"/"===t.charAt(r+2))return null;const n=t.substr(0,r);if("_"===n)return null;if(e[n])return n}return null}static getContextValueId(t){if(null===t||"string"==typeof t)return t;const e=t["@id"];return e||null}static isSimpleTermDefinitionPrefix(t,e){return!n.isPotentialKeyword(t)&&("_"===t[0]||e.allowPrefixNonGenDelims||n.isPrefixIriEndingWithGenDelim(t))}static isPotentialKeyword(t){return"string"==typeof t&&n.KEYWORD_REGEX.test(t)}static isPrefixIriEndingWithGenDelim(t){return n.ENDS_WITH_GEN_DELIM.test(t)}static isPrefixValue(t){return t&&("string"==typeof t||t&&"object"==typeof t)}static isValidIri(t){return n.IRI_REGEX.test(t)}static isValidIriWeak(t){return!!t&&":"!==t[0]&&n.IRI_REGEX_WEAK.test(t)}static isValidKeyword(t){return n.VALID_KEYWORDS[t]}static isTermProtected(t,e){const r=t[e];return!("string"==typeof r)&&r&&r["@protected"]}static hasProtectedTerms(t){for(const e of Object.keys(t))if(n.isTermProtected(t,e))return!0;return!1}static isReservedInternalKeyword(t){return t.startsWith("@__")}}n.IRI_REGEX=/^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`#]*(#[^#]*)?$/,n.IRI_REGEX_WEAK=/(?::[^:])|\//,n.KEYWORD_REGEX=/^@[a-z]+$/i,n.ENDS_WITH_GEN_DELIM=/[:/?#\[\]@]$/,n.REGEX_LANGUAGE_TAG=/^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/,n.REGEX_DIRECTION_TAG=/^(ltr)|(rtl)$/,n.VALID_KEYWORDS={"@base":!0,"@container":!0,"@context":!0,"@direction":!0,"@graph":!0,"@id":!0,"@import":!0,"@included":!0,"@index":!0,"@json":!0,"@language":!0,"@list":!0,"@nest":!0,"@none":!0,"@prefix":!0,"@propagate":!0,"@protected":!0,"@reverse":!0,"@set":!0,"@type":!0,"@value":!0,"@version":!0,"@vocab":!0},n.EXPAND_KEYS_BLACKLIST=["@base","@vocab","@language","@version","@direction"],n.ALIAS_DOMAIN_BLACKLIST=["@container","@graph","@id","@index","@list","@nest","@none","@prefix","@reverse","@set","@type","@value","@version"],n.ALIAS_RANGE_BLACKLIST=["@context","@preserve"],n.CONTAINERS=["@list","@set","@index","@language","@graph","@id","@type"],n.CONTAINERS_1_0=["@list","@set","@index"],e.Util=n},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(77)),n(r(102))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Bus=class{constructor(t){this.actors=[],this.observers=[],this.dependencyLinks=new Map,r(17)(this,t)}subscribe(t){this.actors.push(t),this.reorderForDependencies()}subscribeObserver(t){this.observers.push(t)}unsubscribe(t){const e=this.actors.indexOf(t);return e>=0&&(this.actors.splice(e,1),!0)}unsubscribeObserver(t){const e=this.observers.indexOf(t);return e>=0&&(this.observers.splice(e,1),!0)}publish(t){return this.actors.map(e=>({actor:e,reply:e.test(t)}))}onRun(t,e,r){for(const n of this.observers)n.onRun(t,e,r)}addDependencies(t,e){for(const r of e){let e=this.dependencyLinks.get(r);e||(e=[],this.dependencyLinks.set(r,e)),e.push(t)}this.reorderForDependencies()}reorderForDependencies(){if(this.dependencyLinks.size>0){const t=[];for(const e of this.dependencyLinks.keys()){const r=this.actors.indexOf(e);r>=0&&(this.actors.splice(r,1),t.push(e))}for(;t.length>0;){let e=-1;for(let r=0;r<t.length;r++){let n=!0;for(const e of this.dependencyLinks.get(t[r]))if(this.actors.indexOf(e)<0&&t.indexOf(e)>=0){n=!1;break}if(n){e=r;break}}if(e<0)throw new Error("Cyclic dependency links detected in bus "+this.name);const r=t.splice(e,1)[0];this.actors.push(r)}}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{static getLevelOrdinal(t){return n.LEVELS[t]}}n.LEVELS={trace:0,debug:1,info:2,warn:3,error:4,fatal:5},e.Logger=n,e.KEY_CONTEXT_LOG="@comunica/core:log"},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(e,n){var i=r(18);t.exports=b;var o,s=r(37);b.ReadableState=m;r(12).EventEmitter;var a=function(t,e){return t.listeners(e).length},u=r(39),c=r(24).Buffer,l=e.Uint8Array||function(){};var h=Object.create(r(13));h.inherits=r(10);var f=r(88),d=void 0;d=f&&f.debuglog?f.debuglog("stream"):function(){};var p,_=r(89),g=r(40);h.inherits(b,u);var y=["error","close","destroy","pause","resume"];function m(t,e){t=t||{};var n=e instanceof(o=o||r(6));this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,s=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new _,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=r(27).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function b(t){if(o=o||r(6),!(this instanceof b))return new b(t);this._readableState=new m(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function v(t,e,r,n,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,E(t)}(t,s)):(i||(o=function(t,e){var r;n=e,c.isBuffer(n)||n instanceof l||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),n?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):w(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?w(t,s,e,!1):T(t,s)):w(t,s,e,!1))):n||(s.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function w(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&E(t)),T(t,e)}Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.push(null),e(t)},b.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=c.from(t,e),e=""),r=!0),v(this,t,e,!1,r)},b.prototype.unshift=function(t){return v(this,t,null,!0,!1)},b.prototype.isPaused=function(){return!1===this._readableState.flowing},b.prototype.setEncoding=function(t){return p||(p=r(27).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};function x(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=8388608?t=8388608:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function E(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(d("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(S,t):S(t))}function S(t){d("emit readable"),t.emit("readable"),O(t)}function T(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(I,t,e))}function I(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(d("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function R(t){d("readable nexttick read 0"),t.read(0)}function C(t,e){e.reading||(d("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),O(t),e.flowing&&!e.reading&&t.read(0)}function O(t){var e=t._readableState;for(d("flow",e.flowing);e.flowing&&null!==t.read(););}function A(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;t-=i.length;for(;r=r.next;){var o=r.data,s=t>o.length?o.length:t;if(s===o.length?i+=o:i+=o.slice(0,t),0===(t-=s)){s===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(s));break}++n}return e.length-=n,i}(t,e):function(t,e){var r=c.allocUnsafe(t),n=e.head,i=1;n.data.copy(r),t-=n.data.length;for(;n=n.next;){var o=n.data,s=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,s),0===(t-=s)){s===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(s));break}++i}return e.length-=i,r}(t,e);return n}(t,e.buffer,e.decoder),r);var r}function P(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(N,e,t))}function N(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function D(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}b.prototype.read=function(t){d("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return d("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?P(this):E(this),null;if(0===(t=x(t,e))&&e.ended)return 0===e.length&&P(this),null;var n,i=e.needReadable;return d("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&d("length less than watermark",i=!0),e.ended||e.reading?d("reading or ended",i=!1):i&&(d("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=x(r,e))),null===(n=t>0?A(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&P(this)),null!==n&&this.emit("data",n),n},b.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},b.prototype.pipe=function(t,e){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==n.stdout&&t!==n.stderr?l:b;function c(e,n){d("onunpipe"),e===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,d("cleanup"),t.removeListener("close",y),t.removeListener("finish",m),t.removeListener("drain",h),t.removeListener("error",g),t.removeListener("unpipe",c),r.removeListener("end",l),r.removeListener("end",b),r.removeListener("data",_),f=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function l(){d("onend"),t.end()}o.endEmitted?i.nextTick(u):r.once("end",u),t.on("unpipe",c);var h=function(t){return function(){var e=t._readableState;d("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,O(t))}}(r);t.on("drain",h);var f=!1;var p=!1;function _(e){d("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==D(o.pipes,t))&&!f&&(d("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function g(e){d("onerror",e),b(),t.removeListener("error",g),0===a(t,"error")&&t.emit("error",e)}function y(){t.removeListener("finish",m),b()}function m(){d("onfinish"),t.removeListener("close",y),b()}function b(){d("unpipe"),r.unpipe(t)}return r.on("data",_),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?s(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",g),t.once("close",y),t.once("finish",m),t.emit("pipe",r),o.flowing||(d("pipe resume"),r.resume()),t},b.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r),this);if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var s=D(e.pipes,t);return-1===s?this:(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r),this)},b.prototype.on=function(t,e){var r=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&E(this):i.nextTick(R,this))}return r},b.prototype.addListener=b.prototype.on,b.prototype.resume=function(){var t=this._readableState;return t.flowing||(d("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(C,t,e))}(this,t)),this},b.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},b.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(d("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){(d("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<y.length;o++)t.on(y[o],this.emit.bind(this,y[o]));return this._read=function(e){d("wrapped _read",e),n&&(n=!1,t.resume())},this},Object.defineProperty(b.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),b._fromList=A}).call(this,r(4),r(9))},function(t,e,r){t.exports=r(12).EventEmitter},function(t,e,r){"use strict";var n=r(18);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(n.nextTick(i,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,r){"use strict";t.exports=s;var n=r(6),i=Object.create(r(13));function o(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function s(t){if(!(this instanceof s))return new s(t);n.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",a)}function a(){var t=this;"function"==typeof this._flush?this._flush((function(e,r){u(t,e,r)})):u(this,null,null)}function u(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=r(10),i.inherits(s,n),s.prototype.push=function(t,e){return this._transformState.needTransform=!1,n.prototype.push.call(this,t,e)},s.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},s.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},s.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},s.prototype._destroy=function(t,e){var r=this;n.prototype._destroy.call(this,t,(function(t){e(t),r.emit("close")}))}},function(t,e,r){(function(e){t.exports=function t(e,r,n){function i(s,a){if(!r[s]){if(!e[s]){if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[s]={exports:{}};e[s][0].call(c.exports,(function(t){var r=e[s][1][t];return i(r||t)}),c,c.exports,t,e,r,n)}return r[s].exports}for(var o=!1,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t("./spec/reference-implementation/lib/readable-stream").ReadableStream,i=t("./spec/reference-implementation/lib/writable-stream").WritableStream,o=t("./spec/reference-implementation/lib/byte-length-queuing-strategy"),s=t("./spec/reference-implementation/lib/count-queuing-strategy"),a=t("./spec/reference-implementation/lib/transform-stream").TransformStream;r.ByteLengthQueuingStrategy=o,r.CountQueuingStrategy=s,r.ReadableStream=n,r.WritableStream=i,r.TransformStream=a;var u={ReadableStream:n,WritableStream:i,ByteLengthQueuingStrategy:o,CountQueuingStrategy:s,TransformStream:a};r.default=u},{"./spec/reference-implementation/lib/byte-length-queuing-strategy":8,"./spec/reference-implementation/lib/count-queuing-strategy":9,"./spec/reference-implementation/lib/readable-stream":12,"./spec/reference-implementation/lib/transform-stream":13,"./spec/reference-implementation/lib/writable-stream":15}],2:[function(t,r,n){(function(e){"use strict";function n(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0}function i(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}function o(t){return Object.prototype.toString.call(t)}function s(t){return!i(t)&&"function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer)))}function a(t){if(g.isFunction(t)){if(b)return t.name;var e=t.toString().match(w);return e&&e[1]}}function u(t,e){return"string"==typeof t?t.length<e?t:t.slice(0,e):t}function c(t){if(b||!g.isFunction(t))return g.inspect(t);var e=a(t);return"[Function"+(e?": "+e:"")+"]"}function l(t,e,r,n,i){throw new v.AssertionError({message:r,actual:t,expected:e,operator:n,stackStartFunction:i})}function h(t,e){t||l(t,!0,e,"==",v.ok)}function f(t,e,r,a){if(t===e)return!0;if(i(t)&&i(e))return 0===n(t,e);if(g.isDate(t)&&g.isDate(e))return t.getTime()===e.getTime();if(g.isRegExp(t)&&g.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(s(t)&&s(e)&&o(t)===o(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===n(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return!1;var u=(a=a||{actual:[],expected:[]}).actual.indexOf(t);return-1!==u&&u===a.expected.indexOf(e)||(a.actual.push(t),a.expected.push(e),function(t,e,r,n){if(null==t||null==e)return!1;if(g.isPrimitive(t)||g.isPrimitive(e))return t===e;if(r&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1;var i=d(t),o=d(e);if(i&&!o||!i&&o)return!1;if(i)return t=m.call(t),e=m.call(e),f(t,e,r);var s,a,u=x(t),c=x(e);if(u.length!==c.length)return!1;for(u.sort(),c.sort(),a=u.length-1;a>=0;a--)if(u[a]!==c[a])return!1;for(a=u.length-1;a>=0;a--)if(s=u[a],!f(t[s],e[s],r,n))return!1;return!0}(t,e,r,a))}return r?t===e:t==e}function d(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function p(t,e){if(!t||!e)return!1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return!0}catch(t){}return!Error.isPrototypeOf(e)&&!0===e.call({},t)}function _(t,e,r,n){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(t){var e;try{t()}catch(t){e=t}return e}(e),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),t&&!i&&l(i,r,"Missing expected exception"+n);var o="string"==typeof n,s=!t&&i&&!r;if((!t&&g.isError(i)&&o&&p(i,r)||s)&&l(i,r,"Got unwanted exception"+n),t&&i&&r&&!p(i,r)||!t&&i)throw i}var g=t("util/"),y=Object.prototype.hasOwnProperty,m=Array.prototype.slice,b="foo"===function(){}.name,v=r.exports=h,w=/\s*function\s+([^\(\s]*)\s*/;v.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return u(c(t.actual),128)+" "+t.operator+" "+u(c(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||l;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var r=new Error;if(r.stack){var n=r.stack,i=a(e),o=n.indexOf("\n"+i);if(o>=0){var s=n.indexOf("\n",o+1);n=n.substring(s+1)}this.stack=n}}},g.inherits(v.AssertionError,Error),v.fail=l,v.ok=h,v.equal=function(t,e,r){t!=e&&l(t,e,r,"==",v.equal)},v.notEqual=function(t,e,r){t==e&&l(t,e,r,"!=",v.notEqual)},v.deepEqual=function(t,e,r){f(t,e,!1)||l(t,e,r,"deepEqual",v.deepEqual)},v.deepStrictEqual=function(t,e,r){f(t,e,!0)||l(t,e,r,"deepStrictEqual",v.deepStrictEqual)},v.notDeepEqual=function(t,e,r){f(t,e,!1)&&l(t,e,r,"notDeepEqual",v.notDeepEqual)},v.notDeepStrictEqual=function t(e,r,n){f(e,r,!0)&&l(e,r,n,"notDeepStrictEqual",t)},v.strictEqual=function(t,e,r){t!==e&&l(t,e,r,"===",v.strictEqual)},v.notStrictEqual=function(t,e,r){t===e&&l(t,e,r,"!==",v.notStrictEqual)},v.throws=function(t,e,r){_(!0,t,e,r)},v.doesNotThrow=function(t,e,r){_(!1,t,e,r)},v.ifError=function(t){if(t)throw t};var x=Object.keys||function(t){var e=[];for(var r in t)y.call(t,r)&&e.push(r);return e}}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"util/":7}],3:[function(t,e,r){},{}],4:[function(t,e,r){function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(t){if(l===setTimeout)return setTimeout(t,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(t,0);try{return l(t,0)}catch(e){try{return l.call(null,t,0)}catch(e){return l.call(this,t,0)}}}function s(){_&&d&&(_=!1,d.length?p=d.concat(p):g=-1,p.length&&a())}function a(){if(!_){var t=o(s);_=!0;for(var e=p.length;e;){for(d=p,p=[];++g<e;)d&&d[g].run();g=-1,e=p.length}d=null,_=!1,function(t){if(h===clearTimeout)return clearTimeout(t);if((h===i||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}(t)}}function u(t,e){this.fun=t,this.array=e}function c(){}var l,h,f=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(t){l=n}try{h="function"==typeof clearTimeout?clearTimeout:i}catch(t){h=i}}();var d,p=[],_=!1,g=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];p.push(new u(t,e)),1!==p.length||_||o(a)},u.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=c,f.addListener=c,f.once=c,f.off=c,f.removeListener=c,f.removeAllListeners=c,f.emit=c,f.prependListener=c,f.prependOnceListener=c,f.listeners=function(t){return[]},f.binding=function(t){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(t){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},{}],5:[function(t,e,r){"function"==typeof Object.create?e.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},{}],6:[function(t,e,r){e.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},{}],7:[function(t,r,n){(function(e,r){function i(t,e){var r={seen:[],stylize:s};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),h(e)?r.showHidden=e:e&&n._extend(r,e),_(r.showHidden)&&(r.showHidden=!1),_(r.depth)&&(r.depth=2),_(r.colors)&&(r.colors=!1),_(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=o),a(r,t,r.depth)}function o(t,e){var r=i.styles[e];return r?"["+i.colors[r][0]+"m"+t+"["+i.colors[r][1]+"m":t}function s(t,e){return t}function a(t,e,r){if(t.customInspect&&e&&v(e.inspect)&&e.inspect!==n.inspect&&(!e.constructor||e.constructor.prototype!==e)){var i=e.inspect(r,t);return p(i)||(i=a(t,i,r)),i}var o=function(t,e){if(_(e))return t.stylize("undefined","undefined");if(p(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return d(e)?t.stylize(""+e,"number"):h(e)?t.stylize(""+e,"boolean"):f(e)?t.stylize("null","null"):void 0}(t,e);if(o)return o;var s=Object.keys(e),y=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(e)),b(e)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return u(e);if(0===s.length){if(v(e)){var w=e.name?": "+e.name:"";return t.stylize("[Function"+w+"]","special")}if(g(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(m(e))return t.stylize(Date.prototype.toString.call(e),"date");if(b(e))return u(e)}var x,E="",T=!1,I=["{","}"];return l(e)&&(T=!0,I=["[","]"]),v(e)&&(E=" [Function"+(e.name?": "+e.name:"")+"]"),g(e)&&(E=" "+RegExp.prototype.toString.call(e)),m(e)&&(E=" "+Date.prototype.toUTCString.call(e)),b(e)&&(E=" "+u(e)),0!==s.length||T&&0!=e.length?r<0?g(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),x=T?function(t,e,r,n,i){for(var o=[],s=0,a=e.length;s<a;++s)S(e,String(s))?o.push(c(t,e,r,n,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(c(t,e,r,n,i,!0))})),o}(t,e,r,y,s):s.map((function(n){return c(t,e,r,y,n,T)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(x,E,I)):I[0]+E+I[1]}function u(t){return"["+Error.prototype.toString.call(t)+"]"}function c(t,e,r,n,i,o){var s,u,c;if((c=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?u=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(u=t.stylize("[Setter]","special")),S(n,i)||(s="["+i+"]"),u||(t.seen.indexOf(c.value)<0?(u=f(r)?a(t,c.value,null):a(t,c.value,r-1)).indexOf("\n")>-1&&(u=o?u.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+u.split("\n").map((function(t){return"   "+t})).join("\n")):u=t.stylize("[Circular]","special")),_(s)){if(o&&i.match(/^\d+$/))return u;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+u}function l(t){return Array.isArray(t)}function h(t){return"boolean"==typeof t}function f(t){return null===t}function d(t){return"number"==typeof t}function p(t){return"string"==typeof t}function _(t){return void 0===t}function g(t){return y(t)&&"[object RegExp]"===w(t)}function y(t){return"object"==typeof t&&null!==t}function m(t){return y(t)&&"[object Date]"===w(t)}function b(t){return y(t)&&("[object Error]"===w(t)||t instanceof Error)}function v(t){return"function"==typeof t}function w(t){return Object.prototype.toString.call(t)}function x(t){return t<10?"0"+t.toString(10):t.toString(10)}function E(){var t=new Date,e=[x(t.getHours()),x(t.getMinutes()),x(t.getSeconds())].join(":");return[t.getDate(),C[t.getMonth()],e].join(" ")}function S(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var T=/%[sdj%]/g;n.format=function(t){if(!p(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(i(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,o=n.length,s=String(t).replace(T,(function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),a=n[r];r<o;a=n[++r])f(a)||!y(a)?s+=" "+a:s+=" "+i(a);return s},n.deprecate=function(t,i){if(_(r.process))return function(){return n.deprecate(t,i).apply(this,arguments)};if(!0===e.noDeprecation)return t;var o=!1;return function(){if(!o){if(e.throwDeprecation)throw new Error(i);e.traceDeprecation?console.trace(i):console.error(i),o=!0}return t.apply(this,arguments)}};var I,R={};n.debuglog=function(t){if(_(I)&&(I=e.env.NODE_DEBUG||""),t=t.toUpperCase(),!R[t])if(new RegExp("\\b"+t+"\\b","i").test(I)){var r=e.pid;R[t]=function(){var e=n.format.apply(n,arguments);console.error("%s %d: %s",t,r,e)}}else R[t]=function(){};return R[t]},n.inspect=i,i.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},i.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},n.isArray=l,n.isBoolean=h,n.isNull=f,n.isNullOrUndefined=function(t){return null==t},n.isNumber=d,n.isString=p,n.isSymbol=function(t){return"symbol"==typeof t},n.isUndefined=_,n.isRegExp=g,n.isObject=y,n.isDate=m,n.isError=b,n.isFunction=v,n.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},n.isBuffer=t("./support/isBuffer");var C=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];n.log=function(){console.log("%s - %s",E(),n.format.apply(n,arguments))},n.inherits=t("inherits"),n._extend=function(t,e){if(!e||!y(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t}}).call(this,t("_process"),void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":6,_process:4,inherits:5}],8:[function(t,e,r){"use strict";var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=t("./helpers.js").createDataProperty;e.exports=function(){function t(e){var r=e.highWaterMark;(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),i(this,"highWaterMark",r)}return n(t,[{key:"size",value:function(t){return t.byteLength}}]),t}()},{"./helpers.js":10}],9:[function(t,e,r){"use strict";var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=t("./helpers.js").createDataProperty;e.exports=function(){function t(e){var r=e.highWaterMark;(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),i(this,"highWaterMark",r)}return n(t,[{key:"size",value:function(){return 1}}]),t}()},{"./helpers.js":10}],10:[function(t,e,r){"use strict";function n(t,e,r){if("function"!=typeof t)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(t,e,r)}function i(t,e,r){try{return Promise.resolve(n(t,e,r))}catch(t){return Promise.reject(t)}}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s=(t("better-assert"),Symbol('is "detached" for our purposes'));r.typeIsObject=function(t){return"object"===(void 0===t?"undefined":o(t))&&null!==t||"function"==typeof t},r.createDataProperty=function(t,e,r){Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!0,configurable:!0})},r.createArrayFromList=function(t){return t.slice()},r.ArrayBufferCopy=function(t,e,r,n,i){new Uint8Array(t).set(new Uint8Array(r,n,i),e)},r.CreateIterResultObject=function(t,e){var r={};return Object.defineProperty(r,"value",{value:t,enumerable:!0,writable:!0,configurable:!0}),Object.defineProperty(r,"done",{value:e,enumerable:!0,writable:!0,configurable:!0}),r},r.IsFiniteNonNegativeNumber=function(t){return!1!==r.IsNonNegativeNumber(t)&&t!==1/0},r.IsNonNegativeNumber=function(t){return!("number"!=typeof t||Number.isNaN(t)||t<0)},r.Call=n,r.CreateAlgorithmFromUnderlyingMethod=function(t,e,r,n){var o=t[e];if(void 0!==o){if("function"!=typeof o)throw new TypeError(o+" is not a method");switch(r){case 0:return function(){return i(o,t,n)};case 1:return function(e){var r=[e].concat(n);return i(o,t,r)}}}return function(){return Promise.resolve()}},r.InvokeOrNoop=function(t,e,r){var i=t[e];if(void 0!==i)return n(i,t,r)},r.PromiseCall=i,r.TransferArrayBuffer=function(t){var e=t.slice();return Object.defineProperty(t,"byteLength",{get:function(){return 0}}),t[s]=!0,e},r.IsDetachedBuffer=function(t){return s in t},r.ValidateAndNormalizeHighWaterMark=function(t){if(t=Number(t),Number.isNaN(t)||t<0)throw new RangeError("highWaterMark property of a queuing strategy must be non-negative and non-NaN");return t},r.MakeSizeAlgorithmFromSizeFunction=function(t){if(void 0===t)return function(){return 1};if("function"!=typeof t)throw new TypeError("size property of a queuing strategy must be a function");return function(e){return t(e)}}},{"better-assert":16}],11:[function(t,e,r){"use strict";t("better-assert");var n=t("./helpers.js").IsFiniteNonNegativeNumber;r.DequeueValue=function(t){var e=t._queue.shift();return t._queueTotalSize-=e.size,t._queueTotalSize<0&&(t._queueTotalSize=0),e.value},r.EnqueueValueWithSize=function(t,e,r){if(r=Number(r),!n(r))throw new RangeError("Size must be a finite, non-NaN, non-negative number.");t._queue.push({value:e,size:r}),t._queueTotalSize+=r},r.PeekQueueValue=function(t){return t._queue[0].value},r.ResetQueue=function(t){t._queue=[],t._queueTotalSize=0}},{"./helpers.js":10,"better-assert":16}],12:[function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){return new Ut(t)}function o(t){return new Bt(t)}function s(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){return 1},o=Object.create(qt.prototype);return a(o),L(o,Object.create(Vt.prototype),t,e,r,n,i),o}function a(t){t._state="readable",t._reader=void 0,t._storedError=void 0,t._disturbed=!1}function u(t){return!!xt(t)&&!!Object.prototype.hasOwnProperty.call(t,"_readableStreamController")}function c(t){return void 0!==t._reader}function l(t){return new Promise((function(e,r){var n={_resolve:e,_reject:r};t._reader._readIntoRequests.push(n)}))}function h(t){return new Promise((function(e,r){var n={_resolve:e,_reject:r};t._reader._readRequests.push(n)}))}function f(t,e){return t._disturbed=!0,"closed"===t._state?Promise.resolve(void 0):"errored"===t._state?Promise.reject(t._storedError):(d(t),t._readableStreamController[Mt](e).then((function(){})))}function d(t){t._state="closed";var e=t._reader;if(void 0!==e){if(!0===w(e)){var r=!0,n=!1,i=void 0;try{for(var o,s=e._readRequests[Symbol.iterator]();!(r=(o=s.next()).done);r=!0)(0,o.value._resolve)(pt(void 0,!0))}catch(t){n=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(n)throw i}}e._readRequests=[]}!function(t){t._closedPromise_resolve(void 0),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0}(e)}}function p(t,e){t._state="errored",t._storedError=e;var r=t._reader;if(void 0!==r){if(!0===w(r)){var n=!0,i=!1,o=void 0;try{for(var s,a=r._readRequests[Symbol.iterator]();!(n=(s=a.next()).done);n=!0)s.value._reject(e)}catch(t){i=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}r._readRequests=[]}else{var u=!0,c=!1,l=void 0;try{for(var h,f=r._readIntoRequests[Symbol.iterator]();!(u=(h=f.next()).done);u=!0)h.value._reject(e)}catch(t){c=!0,l=t}finally{try{!u&&f.return&&f.return()}finally{if(c)throw l}}r._readIntoRequests=[]}ot(r,e),r._closedPromise.catch((function(){}))}}function _(t,e,r){t._reader._readRequests.shift()._resolve(pt(e,r))}function g(t){return t._reader._readIntoRequests.length}function y(t){return t._reader._readRequests.length}function m(t){var e=t._reader;return void 0!==e&&!1!==v(e)}function b(t){var e=t._reader;return void 0!==e&&!1!==w(e)}function v(t){return!!xt(t)&&!!Object.prototype.hasOwnProperty.call(t,"_readIntoRequests")}function w(t){return!!xt(t)&&!!Object.prototype.hasOwnProperty.call(t,"_readRequests")}function x(t,e){t._ownerReadableStream=e,e._reader=t,"readable"===e._state?function(t){t._closedPromise=new Promise((function(e,r){t._closedPromise_resolve=e,t._closedPromise_reject=r}))}(t):"closed"===e._state?function(t){t._closedPromise=Promise.resolve(void 0),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0}(t):(function(t,e){t._closedPromise=Promise.reject(e),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0}(t,e._storedError),t._closedPromise.catch((function(){})))}function E(t,e){return f(t._ownerReadableStream,e)}function S(t){"readable"===t._ownerReadableStream._state?ot(t,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(t,e){t._closedPromise=Promise.reject(e)}(t,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),t._closedPromise.catch((function(){})),t._ownerReadableStream._reader=void 0,t._ownerReadableStream=void 0}function T(t,e){var r=t._ownerReadableStream;return r._disturbed=!0,"errored"===r._state?Promise.reject(r._storedError):function(t,e){var r=t._controlledReadableByteStream,n=1;e.constructor!==DataView&&(n=e.constructor.BYTES_PER_ELEMENT);var i=e.constructor,o={buffer:mt(e.buffer),byteOffset:e.byteOffset,byteLength:e.byteLength,bytesFilled:0,elementSize:n,ctor:i,readerType:"byob"};if(t._pendingPullIntos.length>0)return t._pendingPullIntos.push(o),l(r);if("closed"===r._state){var s=new e.constructor(o.buffer,o.byteOffset,0);return Promise.resolve(pt(s,!0))}if(t._queueTotalSize>0){if(!0===H(t,o)){var a=z(o);return $(t),Promise.resolve(pt(a,!1))}if(!0===t._closeRequested){var u=new TypeError("Insufficient bytes to fill elements in the given buffer");return Q(t,u),Promise.reject(u)}}t._pendingPullIntos.push(o);var c=l(r);return B(t),c}(r._readableStreamController,e)}function I(t){var e=t._ownerReadableStream;return e._disturbed=!0,"closed"===e._state?Promise.resolve(pt(void 0,!0)):"errored"===e._state?Promise.reject(e._storedError):e._readableStreamController[Ft]()}function R(t){return!!xt(t)&&!!Object.prototype.hasOwnProperty.call(t,"_controlledReadableStream")}function C(t){!1!==O(t)&&(!0!==t._pulling?(t._pulling=!0,t._pullAlgorithm().then((function(){if(t._pulling=!1,!0===t._pullAgain)return t._pullAgain=!1,C(t)}),(function(e){D(t,e)})).catch(Et)):t._pullAgain=!0)}function O(t){var e=t._controlledReadableStream;return!1!==j(t)&&!1!==t._started&&(!0===c(e)&&y(e)>0||k(t)>0)}function A(t){var e=t._controlledReadableStream;t._closeRequested=!0,0===t._queue.length&&d(e)}function P(t,e){var r=t._controlledReadableStream;if(!0===c(r)&&y(r)>0)_(r,e,!1);else{var n=void 0;try{n=t._strategySizeAlgorithm(e)}catch(e){throw D(t,e),e}try{It(t,e,n)}catch(e){throw D(t,e),e}}C(t)}function N(t,e){var r=t._controlledReadableStream;Rt(t),p(r,e)}function D(t,e){"readable"===t._controlledReadableStream._state&&N(t,e)}function k(t){var e=t._controlledReadableStream._state;return"errored"===e?null:"closed"===e?0:t._strategyHWM-t._queueTotalSize}function j(t){var e=t._controlledReadableStream._state;return!1===t._closeRequested&&"readable"===e}function L(t,e,r,n,i,o,s){e._controlledReadableStream=t,e._queue=void 0,e._queueTotalSize=void 0,Rt(e),e._started=!1,e._closeRequested=!1,e._pullAgain=!1,e._pulling=!1,e._strategySizeAlgorithm=s,e._strategyHWM=o,e._pullAlgorithm=n,e._cancelAlgorithm=i,t._readableStreamController=e;var a=r();Promise.resolve(a).then((function(){e._started=!0,C(e)}),(function(t){D(e,t)})).catch(Et)}function M(t,e,r,n){var i=Object.create(Vt.prototype),o=dt(e,"pull",0,[i]),s=dt(e,"cancel",1,[]);L(t,i,(function(){return gt(e,"start",[i])}),o,s,r,n)}function F(t){return!!xt(t)&&!!Object.prototype.hasOwnProperty.call(t,"_controlledReadableByteStream")}function q(t){return!!xt(t)&&!!Object.prototype.hasOwnProperty.call(t,"_associatedReadableByteStreamController")}function B(t){!1!==function(t){var e=t._controlledReadableByteStream;return"readable"===e._state&&!0!==t._closeRequested&&!1!==t._started&&(!0===b(e)&&y(e)>0||!0===m(e)&&g(e)>0||Z(t)>0)}(t)&&(!0!==t._pulling?(t._pulling=!0,t._pullAlgorithm().then((function(){t._pulling=!1,!0===t._pullAgain&&(t._pullAgain=!1,B(t))}),(function(e){"readable"===t._controlledReadableByteStream._state&&Q(t,e)})).catch(Et)):t._pullAgain=!0)}function U(t){K(t),t._pendingPullIntos=[]}function V(t,e){var r=!1;"closed"===t._state&&(r=!0);var n=z(e);"default"===e.readerType?_(t,n,r):function(t,e,r){t._reader._readIntoRequests.shift()._resolve(pt(e,r))}(t,n,r)}function z(t){var e=t.bytesFilled,r=t.elementSize;return new t.ctor(t.buffer,t.byteOffset,e/r)}function G(t,e,r,n){t._queue.push({buffer:e,byteOffset:r,byteLength:n}),t._queueTotalSize+=n}function H(t,e){var r=e.elementSize,n=e.bytesFilled-e.bytesFilled%r,i=Math.min(t._queueTotalSize,e.byteLength-e.bytesFilled),o=e.bytesFilled+i,s=o-o%r,a=i,u=!1;s>n&&(a=s-e.bytesFilled,u=!0);for(var c=t._queue;a>0;){var l=c[0],h=Math.min(a,l.byteLength),f=e.byteOffset+e.bytesFilled;ft(e.buffer,f,l.buffer,l.byteOffset,h),l.byteLength===h?c.shift():(l.byteOffset+=h,l.byteLength-=h),t._queueTotalSize-=h,W(t,h,e),a-=h}return u}function W(t,e,r){K(t),r.bytesFilled+=e}function $(t){0===t._queueTotalSize&&!0===t._closeRequested?d(t._controlledReadableByteStream):B(t)}function K(t){void 0!==t._byobRequest&&(t._byobRequest._associatedReadableByteStreamController=void 0,t._byobRequest._view=void 0,t._byobRequest=void 0)}function J(t){for(;t._pendingPullIntos.length>0;){if(0===t._queueTotalSize)return;var e=t._pendingPullIntos[0];!0===H(t,e)&&(X(t),V(t._controlledReadableByteStream,e))}}function Y(t,e){var r=t._pendingPullIntos[0];if("closed"===t._controlledReadableByteStream._state){if(0!==e)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");!function(t,e){e.buffer=mt(e.buffer);var r=t._controlledReadableByteStream;if(!0===m(r))for(;g(r)>0;)V(r,X(t))}(t,r)}else!function(t,e,r){if(r.bytesFilled+e>r.byteLength)throw new RangeError("bytesWritten out of range");if(W(t,e,r),!(r.bytesFilled<r.elementSize)){X(t);var n=r.bytesFilled%r.elementSize;if(n>0){var i=r.byteOffset+r.bytesFilled,o=r.buffer.slice(i-n,i);G(t,o,0,o.byteLength)}r.buffer=mt(r.buffer),r.bytesFilled-=n,V(t._controlledReadableByteStream,r),J(t)}}(t,e,r)}function X(t){var e=t._pendingPullIntos.shift();return K(t),e}function Q(t,e){var r=t._controlledReadableByteStream;U(t),Rt(t),p(r,e)}function Z(t){var e=t._controlledReadableByteStream._state;return"errored"===e?null:"closed"===e?0:t._strategyHWM-t._queueTotalSize}function tt(t,e,r,n,i,o,s){e._controlledReadableByteStream=t,e._pullAgain=!1,e._pulling=!1,U(e),e._queue=e._queueTotalSize=void 0,Rt(e),e._closeRequested=!1,e._started=!1,e._strategyHWM=bt(o),e._pullAlgorithm=n,e._cancelAlgorithm=i,e._autoAllocateChunkSize=s,e._pendingPullIntos=[],t._readableStreamController=e;var a=r();Promise.resolve(a).then((function(){e._started=!0,B(e)}),(function(r){"readable"===t._state&&Q(e,r)})).catch(Et)}function et(t,e,r){var n=Object.create(Gt.prototype),i=dt(e,"pull",0,[n]),o=dt(e,"cancel",1,[]),s=e.autoAllocateChunkSize;if(void 0!==s&&(!1===Number.isInteger(s)||s<=0))throw new RangeError("autoAllocateChunkSize must be a positive integer");tt(t,n,(function(){return gt(e,"start",[n])}),i,o,r,s)}function rt(t){return new TypeError("ReadableStream.prototype."+t+" can only be used on a ReadableStream")}function nt(t){return new TypeError("Cannot "+t+" a stream using a released reader")}function it(t){return new TypeError("ReadableStreamDefaultReader.prototype."+t+" can only be used on a ReadableStreamDefaultReader")}function ot(t,e){t._closedPromise_reject(e),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0}function st(t){return new TypeError("ReadableStreamBYOBReader.prototype."+t+" can only be used on a ReadableStreamBYOBReader")}function at(t){return new TypeError("ReadableStreamDefaultController.prototype."+t+" can only be used on a ReadableStreamDefaultController")}function ut(t){return new TypeError("ReadableStreamBYOBRequest.prototype."+t+" can only be used on a ReadableStreamBYOBRequest")}function ct(t){return new TypeError("ReadableByteStreamController.prototype."+t+" can only be used on a ReadableByteStreamController")}var lt=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),ht=(t("better-assert"),t("./helpers.js")),ft=ht.ArrayBufferCopy,dt=ht.CreateAlgorithmFromUnderlyingMethod,pt=ht.CreateIterResultObject,_t=ht.IsFiniteNonNegativeNumber,gt=ht.InvokeOrNoop,yt=ht.IsDetachedBuffer,mt=ht.TransferArrayBuffer,bt=ht.ValidateAndNormalizeHighWaterMark,vt=(ht.IsNonNegativeNumber,ht.MakeSizeAlgorithmFromSizeFunction),wt=ht.createArrayFromList,xt=ht.typeIsObject,Et=t("./utils.js").rethrowAssertionErrorRejection,St=t("./queue-with-sizes.js"),Tt=St.DequeueValue,It=St.EnqueueValueWithSize,Rt=St.ResetQueue,Ct=t("./writable-stream.js"),Ot=Ct.AcquireWritableStreamDefaultWriter,At=Ct.IsWritableStream,Pt=Ct.IsWritableStreamLocked,Nt=Ct.WritableStreamAbort,Dt=Ct.WritableStreamDefaultWriterCloseWithErrorPropagation,kt=Ct.WritableStreamDefaultWriterRelease,jt=Ct.WritableStreamDefaultWriterWrite,Lt=Ct.WritableStreamCloseQueuedOrInFlight,Mt=Symbol("[[CancelSteps]]"),Ft=Symbol("[[PullSteps]]"),qt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=r.size,o=r.highWaterMark;n(this,t),a(this);var s=e.type;if("bytes"===String(s)){if(void 0===o&&(o=0),o=bt(o),void 0!==i)throw new RangeError("The strategy for a byte stream cannot have a size function");et(this,e,o)}else{if(void 0!==s)throw new RangeError("Invalid type is specified");void 0===o&&(o=1),M(this,e,o=bt(o),vt(i))}}return lt(t,[{key:"cancel",value:function(t){return!1===u(this)?Promise.reject(rt("cancel")):!0===c(this)?Promise.reject(new TypeError("Cannot cancel a stream that already has a reader")):f(this,t)}},{key:"getReader",value:function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mode;if(!1===u(this))throw rt("getReader");if(void 0===t)return o(this);if("byob"===(t=String(t)))return i(this);throw new RangeError("Invalid mode is specified")}},{key:"pipeThrough",value:function(t,e){var r=t.writable,n=t.readable;if(void 0===r||void 0===n)throw new TypeError("readable and writable arguments must be defined");return function(t){try{Promise.prototype.then.call(t,void 0,(function(){}))}catch(t){}}(this.pipeTo(r,e)),n}},{key:"pipeTo",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.preventClose,i=r.preventAbort,s=r.preventCancel;if(!1===u(this))return Promise.reject(rt("pipeTo"));if(!1===At(t))return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));if(n=Boolean(n),i=Boolean(i),s=Boolean(s),!0===c(this))return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));if(!0===Pt(t))return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));var a=o(this),l=Ot(t),h=!1,d=Promise.resolve();return new Promise((function(r,o){function u(){var t=d;return d.then((function(){return t!==d?u():void 0}))}function c(t,e,r){"errored"===t._state?r(t._storedError):e.catch(r).catch(Et)}function p(e,r,n){function i(){e().then((function(){return g(r,n)}),(function(t){return g(!0,t)})).catch(Et)}!0!==h&&(h=!0,"writable"===t._state&&!1===Lt(t)?u().then(i):i())}function _(e,r){!0!==h&&(h=!0,"writable"===t._state&&!1===Lt(t)?u().then((function(){return g(e,r)})).catch(Et):g(e,r))}function g(t,e){kt(l),S(a),t?o(e):r(void 0)}if(c(e,a._closedPromise,(function(e){!1===i?p((function(){return Nt(t,e)}),!0,e):_(!0,e)})),c(t,l._closedPromise,(function(t){!1===s?p((function(){return f(e,t)}),!0,t):_(!0,t)})),function(t,e,r){"closed"===t._state?r():e.then(r).catch(Et)}(e,a._closedPromise,(function(){!1===n?p((function(){return Dt(l)})):_()})),!0===Lt(t)||"closed"===t._state){var y=new TypeError("the destination writable stream closed before all data could be piped to it");!1===s?p((function(){return f(e,y)}),!0,y):_(!0,y)}(function t(){return!0===h?Promise.resolve():l._readyPromise.then((function(){return I(a).then((function(t){var e=t.value;!0!==t.done&&(d=jt(l,e).catch((function(){})))}))})).then(t)})().catch((function(t){d=Promise.resolve(),Et(t)}))}))}},{key:"tee",value:function(){if(!1===u(this))throw rt("tee");var t=function(t,e){function r(){return I(i).then((function(t){var e=t.value;if(!0===t.done&&!1===a&&(!1===u&&A(d._readableStreamController),!1===c&&A(p._readableStreamController),a=!0),!0!==a){var r=e,n=e;!1===u&&P(d._readableStreamController,r),!1===c&&P(p._readableStreamController,n)}}))}function n(){}var i=o(t),a=!1,u=!1,c=!1,l=void 0,h=void 0,d=void 0,p=void 0,_=void 0,g=new Promise((function(t){_=t}));return d=s(n,r,(function(e){if(u=!0,l=e,!0===c){var r=wt([l,h]),n=f(t,r);_(n)}return g})),p=s(n,r,(function(e){if(c=!0,h=e,!0===u){var r=wt([l,h]),n=f(t,r);_(n)}return g})),i._closedPromise.catch((function(t){!0!==a&&(D(d._readableStreamController,t),D(p._readableStreamController,t),a=!0)})),[d,p]}(this);return wt(t)}},{key:"locked",get:function(){if(!1===u(this))throw rt("locked");return c(this)}}]),t}();e.exports={CreateReadableByteStream:function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0,o=Object.create(qt.prototype);return a(o),tt(o,Object.create(Gt.prototype),t,e,r,n,i),o},CreateReadableStream:s,ReadableStream:qt,IsReadableStreamDisturbed:function(t){return t._disturbed},ReadableStreamDefaultControllerClose:A,ReadableStreamDefaultControllerEnqueue:P,ReadableStreamDefaultControllerError:N,ReadableStreamDefaultControllerGetDesiredSize:k,ReadableStreamDefaultControllerHasBackpressure:function(t){return!0!==O(t)},ReadableStreamDefaultControllerCanCloseOrEnqueue:j};var Bt=function(){function t(e){if(n(this,t),!1===u(e))throw new TypeError("ReadableStreamDefaultReader can only be constructed with a ReadableStream instance");if(!0===c(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");x(this,e),this._readRequests=[]}return lt(t,[{key:"cancel",value:function(t){return!1===w(this)?Promise.reject(it("cancel")):void 0===this._ownerReadableStream?Promise.reject(nt("cancel")):E(this,t)}},{key:"read",value:function(){return!1===w(this)?Promise.reject(it("read")):void 0===this._ownerReadableStream?Promise.reject(nt("read from")):I(this)}},{key:"releaseLock",value:function(){if(!1===w(this))throw it("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");S(this)}}},{key:"closed",get:function(){return!1===w(this)?Promise.reject(it("closed")):this._closedPromise}}]),t}(),Ut=function(){function t(e){if(n(this,t),!u(e))throw new TypeError("ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a byte source");if(!1===F(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");if(c(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");x(this,e),this._readIntoRequests=[]}return lt(t,[{key:"cancel",value:function(t){return v(this)?void 0===this._ownerReadableStream?Promise.reject(nt("cancel")):E(this,t):Promise.reject(st("cancel"))}},{key:"read",value:function(t){return v(this)?void 0===this._ownerReadableStream?Promise.reject(nt("read from")):ArrayBuffer.isView(t)?!0===yt(t.buffer)?Promise.reject(new TypeError("Cannot read into a view onto a detached ArrayBuffer")):0===t.byteLength?Promise.reject(new TypeError("view must have non-zero byteLength")):T(this,t):Promise.reject(new TypeError("view must be an array buffer view")):Promise.reject(st("read"))}},{key:"releaseLock",value:function(){if(!v(this))throw st("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");S(this)}}},{key:"closed",get:function(){return v(this)?this._closedPromise:Promise.reject(st("closed"))}}]),t}(),Vt=function(){function t(){throw n(this,t),new TypeError}return lt(t,[{key:"close",value:function(){if(!1===R(this))throw at("close");if(!1===j(this))throw new TypeError("The stream is not in a state that permits close");A(this)}},{key:"enqueue",value:function(t){if(!1===R(this))throw at("enqueue");if(!1===j(this))throw new TypeError("The stream is not in a state that permits enqueue");return P(this,t)}},{key:"error",value:function(t){if(!1===R(this))throw at("error");var e=this._controlledReadableStream;if("readable"!==e._state)throw new TypeError("The stream is "+e._state+" and so cannot be errored");N(this,t)}},{key:Mt,value:function(t){return Rt(this),this._cancelAlgorithm(t)}},{key:Ft,value:function(){var t=this._controlledReadableStream;if(this._queue.length>0){var e=Tt(this);return!0===this._closeRequested&&0===this._queue.length?d(t):C(this),Promise.resolve(pt(e,!1))}var r=h(t);return C(this),r}},{key:"desiredSize",get:function(){if(!1===R(this))throw at("desiredSize");return k(this)}}]),t}(),zt=function(){function t(){throw n(this,t),new TypeError("ReadableStreamBYOBRequest cannot be used directly")}return lt(t,[{key:"respond",value:function(t){if(!1===q(this))throw ut("respond");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");if(!0===yt(this._view.buffer))throw new TypeError("The BYOB request's buffer has been detached and so cannot be used as a response");!function(t,e){if(e=Number(e),!1===_t(e))throw new RangeError("bytesWritten must be a finite");Y(t,e)}(this._associatedReadableByteStreamController,t)}},{key:"respondWithNewView",value:function(t){if(!1===q(this))throw ut("respond");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");if(!ArrayBuffer.isView(t))throw new TypeError("You can only respond with array buffer views");if(!0===yt(t.buffer))throw new TypeError("The supplied view's buffer has been detached and so cannot be used as a response");!function(t,e){var r=t._pendingPullIntos[0];if(r.byteOffset+r.bytesFilled!==e.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.byteLength!==e.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");r.buffer=e.buffer,Y(t,e.byteLength)}(this._associatedReadableByteStreamController,t)}},{key:"view",get:function(){if(!1===q(this))throw ut("view");return this._view}}]),t}(),Gt=function(){function t(){throw n(this,t),new TypeError("ReadableByteStreamController constructor cannot be used directly")}return lt(t,[{key:"close",value:function(){if(!1===F(this))throw ct("close");if(!0===this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");var t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError("The stream (in "+t+" state) is not in the readable state and cannot be closed");!function(t){var e=t._controlledReadableByteStream;if(t._queueTotalSize>0)t._closeRequested=!0;else{if(t._pendingPullIntos.length>0&&t._pendingPullIntos[0].bytesFilled>0){var r=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Q(t,r),r}d(e)}}(this)}},{key:"enqueue",value:function(t){if(!1===F(this))throw ct("enqueue");if(!0===this._closeRequested)throw new TypeError("stream is closed or draining");var e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError("The stream (in "+e+" state) is not in the readable state and cannot be enqueued to");if(!ArrayBuffer.isView(t))throw new TypeError("You can only enqueue array buffer views when using a ReadableByteStreamController");if(!0===yt(t.buffer))throw new TypeError("Cannot enqueue a view onto a detached ArrayBuffer");!function(t,e){var r=t._controlledReadableByteStream,n=e.buffer,i=e.byteOffset,o=e.byteLength,s=mt(n);!0===b(r)?0===y(r)?G(t,s,i,o):_(r,new Uint8Array(s,i,o),!1):!0===m(r)?(G(t,s,i,o),J(t)):G(t,s,i,o)}(this,t)}},{key:"error",value:function(t){if(!1===F(this))throw ct("error");var e=this._controlledReadableByteStream;if("readable"!==e._state)throw new TypeError("The stream is "+e._state+" and so cannot be errored");Q(this,t)}},{key:Mt,value:function(t){return this._pendingPullIntos.length>0&&(this._pendingPullIntos[0].bytesFilled=0),Rt(this),this._cancelAlgorithm(t)}},{key:Ft,value:function(){var t=this._controlledReadableByteStream;if(this._queueTotalSize>0){var e=this._queue.shift();this._queueTotalSize-=e.byteLength,$(this);var r=void 0;try{r=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}catch(t){return Promise.reject(t)}return Promise.resolve(pt(r,!1))}var n=this._autoAllocateChunkSize;if(void 0!==n){var i=void 0;try{i=new ArrayBuffer(n)}catch(t){return Promise.reject(t)}var o={buffer:i,byteOffset:0,byteLength:n,bytesFilled:0,elementSize:1,ctor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(o)}var s=h(t);return B(this),s}},{key:"byobRequest",get:function(){if(!1===F(this))throw ct("byobRequest");if(void 0===this._byobRequest&&this._pendingPullIntos.length>0){var t=this._pendingPullIntos[0],e=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),r=Object.create(zt.prototype);(function(t,e,r){t._associatedReadableByteStreamController=e,t._view=r})(r,this,e),this._byobRequest=r}return this._byobRequest}},{key:"desiredSize",get:function(){if(!1===F(this))throw ct("desiredSize");return Z(this)}}]),t}()},{"./helpers.js":10,"./queue-with-sizes.js":11,"./utils.js":14,"./writable-stream.js":15,"better-assert":16}],13:[function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e,r,n,i,o){function c(){return e}t._writable=D(c,(function(e){return function(t,e){g("TransformStreamDefaultSinkWriteAlgorithm()");var r=t._transformStreamController;return!0===t._backpressure?t._backpressureChangePromise.then((function(){var n=t._writable;if("erroring"===n._state)throw n._storedError;return r._transformAlgorithm(e)})):r._transformAlgorithm(e)}(t,e)}),(function(){return function(t){g("TransformStreamDefaultSinkCloseAlgorithm()");var e=t._readable;return t._transformStreamController._flushAlgorithm().then((function(){if("errored"===e._state)throw e._storedError;var t=e._readableStreamController;!0===P(t)&&I(t)})).catch((function(r){throw s(t,r),e._storedError}))}(t)}),(function(){return function(t){return s(t,new TypeError("Writable side aborted")),Promise.resolve()}(t)}),r,n),t._readable=T(c,(function(){return function(t){return g("TransformStreamDefaultSourcePullAlgorithm()"),u(t,!1),t._backpressureChangePromise}(t)}),(function(e){return a(t,e),Promise.resolve()}),i,o),t._backpressure=void 0,t._backpressureChangePromise=void 0,t._backpressureChangePromise_resolve=void 0,u(t,!0),t._transformStreamController=void 0}function o(t){return!!w(t)&&!!Object.prototype.hasOwnProperty.call(t,"_transformStreamController")}function s(t,e){g("TransformStreamError()"),"readable"===t._readable._state&&C(t._readable._readableStreamController,e),a(t,e)}function a(t,e){k(t._writable._writableStreamController,e),!0===t._backpressure&&u(t,!1)}function u(t,e){g("TransformStreamSetBackpressure() [backpressure = "+e+"]"),void 0!==t._backpressureChangePromise&&t._backpressureChangePromise_resolve(),t._backpressureChangePromise=new Promise((function(e){t._backpressureChangePromise_resolve=e})),t._backpressure=e}function c(t){return!!w(t)&&!!Object.prototype.hasOwnProperty.call(t,"_controlledTransformStream")}function l(t,e,r,n){e._controlledTransformStream=t,t._transformStreamController=e,e._transformAlgorithm=r,e._flushAlgorithm=n}function h(t,e){var r=Object.create(L.prototype),n=function(t){try{return f(r,t),Promise.resolve()}catch(t){return Promise.reject(t)}},i=e.transform;if(void 0!==i){if("function"!=typeof i)throw new TypeError("transform is not a method");n=function(n){return v(i,e,[n,r]).catch((function(e){throw s(t,e),e}))}}var o=b(e,"flush",0,[r]);l(t,r,n,o)}function f(t,e){g("TransformStreamDefaultControllerEnqueue()");var r=t._controlledTransformStream,n=r._readable._readableStreamController;if(!1===P(n))throw new TypeError("Readable side is not in a state that permits enqueue");try{R(n,e)}catch(t){throw a(r,t),r._readable._storedError}A(n)!==r._backpressure&&u(r,!0)}function d(t){return new TypeError("TransformStreamDefaultController.prototype."+t+" can only be used on a TransformStreamDefaultController")}function p(t){return new TypeError("TransformStream.prototype."+t+" can only be used on a TransformStream")}var _=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),g=(t("better-assert"),t("debug")("streams:transform-stream:verbose")),y=t("./helpers.js"),m=y.InvokeOrNoop,b=y.CreateAlgorithmFromUnderlyingMethod,v=y.PromiseCall,w=y.typeIsObject,x=y.ValidateAndNormalizeHighWaterMark,E=(y.IsNonNegativeNumber,y.MakeSizeAlgorithmFromSizeFunction),S=t("./readable-stream.js"),T=S.CreateReadableStream,I=S.ReadableStreamDefaultControllerClose,R=S.ReadableStreamDefaultControllerEnqueue,C=S.ReadableStreamDefaultControllerError,O=S.ReadableStreamDefaultControllerGetDesiredSize,A=S.ReadableStreamDefaultControllerHasBackpressure,P=S.ReadableStreamDefaultControllerCanCloseOrEnqueue,N=t("./writable-stream.js"),D=N.CreateWritableStream,k=N.WritableStreamDefaultControllerErrorIfNeeded,j=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(n(this,t),void 0!==e.readableType)throw new RangeError("Invalid readable type specified");if(void 0!==e.writableType)throw new RangeError("Invalid writable type specified");var s=r.size,a=E(s),u=r.highWaterMark;void 0===u&&(u=1),u=x(u);var c=o.size,l=E(c),f=o.highWaterMark;void 0===f&&(f=0),f=x(f);var d=void 0;i(this,new Promise((function(t){d=t})),u,a,f,l),h(this,e);var p=m(e,"start",[this._transformStreamController]);d(p)}return _(t,[{key:"readable",get:function(){if(!1===o(this))throw p("readable");return this._readable}},{key:"writable",get:function(){if(!1===o(this))throw p("writable");return this._writable}}]),t}(),L=function(){function t(){throw n(this,t),new TypeError("TransformStreamDefaultController instances cannot be created directly")}return _(t,[{key:"enqueue",value:function(t){if(!1===c(this))throw d("enqueue");f(this,t)}},{key:"error",value:function(t){if(!1===c(this))throw d("error");!function(t,e){s(t._controlledTransformStream,e)}(this,t)}},{key:"terminate",value:function(){if(!1===c(this))throw d("terminate");!function(t){g("TransformStreamDefaultControllerTerminate()");var e=t._controlledTransformStream,r=e._readable._readableStreamController;!0===P(r)&&I(r),a(e,new TypeError("TransformStream terminated"))}(this)}},{key:"desiredSize",get:function(){if(!1===c(this))throw d("desiredSize");var t=this._controlledTransformStream._readable._readableStreamController;return O(t)}}]),t}();e.exports={CreateTransformStream:function(t,e,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){return 1},s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:function(){return 1},u=Object.create(j.prototype),c=void 0;i(u,new Promise((function(t){c=t})),n,o,s,a),l(u,Object.create(L.prototype),e,r);var h=t();return c(h),u},TransformStream:j}},{"./helpers.js":10,"./readable-stream.js":12,"./writable-stream.js":15,"better-assert":16,debug:18}],14:[function(t,e,r){"use strict";var n=t("better-assert");r.rethrowAssertionErrorRejection=function(t){t&&t.constructor===n.AssertionError&&setTimeout((function(){throw t}),0)}},{"better-assert":16}],15:[function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){return new Z(t)}function o(t){t._state="writable",t._storedError=void 0,t._writer=void 0,t._writableStreamController=void 0,t._writeRequests=[],t._inFlightWriteRequest=void 0,t._closeRequest=void 0,t._inFlightCloseRequest=void 0,t._pendingAbortRequest=void 0,t._backpressure=!1}function s(t){return!!z(t)&&!!Object.prototype.hasOwnProperty.call(t,"_writableStreamController")}function a(t){return void 0!==t._writer}function u(t,e){var r=t._state;if("closed"===r)return Promise.resolve(void 0);if("errored"===r)return Promise.reject(t._storedError);var n=new TypeError("Requested to abort");if(void 0!==t._pendingAbortRequest)return Promise.reject(n);var i=!1;"erroring"===r&&(i=!0,e=void 0);var o=new Promise((function(r,n){t._pendingAbortRequest={_resolve:r,_reject:n,_reason:e,_wasAlreadyErroring:i}}));return!1===i&&l(t,n),o}function c(t,e){M("WritableStreamDealWithRejection(stream, %o)",e),"writable"!==t._state?h(t):l(t,e)}function l(t,e){M("WritableStreamStartErroring(stream, %o)",e);var r=t._writableStreamController;t._state="erroring",t._storedError=e;var n=t._writer;void 0!==n&&m(n,e),!1===function(t){return void 0===t._inFlightWriteRequest&&void 0===t._inFlightCloseRequest?(M("WritableStreamHasOperationMarkedInFlight() is false"),!1):(M("WritableStreamHasOperationMarkedInFlight() is true"),!0)}(t)&&!0===r._started&&h(t)}function h(t){M("WritableStreamFinishErroring()"),t._state="errored",t._writableStreamController[X]();var e=t._storedError,r=!0,n=!1,i=void 0;try{for(var o,s=t._writeRequests[Symbol.iterator]();!(r=(o=s.next()).done);r=!0)o.value._reject(e)}catch(t){n=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(n)throw i}}if(t._writeRequests=[],void 0!==t._pendingAbortRequest){var a=t._pendingAbortRequest;if(t._pendingAbortRequest=void 0,!0===a._wasAlreadyErroring)return a._reject(e),void d(t);t._writableStreamController[Y](a._reason).then((function(){a._resolve(),d(t)}),(function(e){a._reject(e),d(t)}))}else d(t)}function f(t){return void 0!==t._closeRequest||void 0!==t._inFlightCloseRequest}function d(t){M("WritableStreamRejectCloseAndClosedPromiseIfNeeded()"),void 0!==t._closeRequest&&(t._closeRequest._reject(t._storedError),t._closeRequest=void 0);var e=t._writer;void 0!==e&&(N(e,t._storedError),e._closedPromise.catch((function(){})))}function p(t,e){var r=t._writer;void 0!==r&&e!==t._backpressure&&(!0===e?function(t){M("defaultWriterReadyPromiseReset()"),t._readyPromise=new Promise((function(e,r){t._readyPromise_resolve=e,t._readyPromise_reject=r})),t._readyPromiseState="pending"}(r):j(r)),t._backpressure=e}function _(t){return!!z(t)&&!!Object.prototype.hasOwnProperty.call(t,"_ownerWritableStream")}function g(t){var e=t._ownerWritableStream,r=e._state;if("closed"===r||"errored"===r)return Promise.reject(new TypeError("The stream (in "+r+" state) is not in the writable state and cannot be closed"));var n=new Promise((function(t,r){var n={_resolve:t,_reject:r};e._closeRequest=n}));return!0===e._backpressure&&"writable"===r&&j(t),function(t){$(t,"close",0),S(t)}(e._writableStreamController),n}function y(t,e){"pending"===t._closedPromiseState?N(t,e):function(t,e){t._closedPromise=Promise.reject(e),t._closedPromiseState="rejected"}(t,e),t._closedPromise.catch((function(){}))}function m(t,e){M("WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, %o)",e),"pending"===t._readyPromiseState?function(t,e){M("defaultWriterReadyPromiseReject(writer, %o)",e),t._readyPromise_reject(e),t._readyPromise_resolve=void 0,t._readyPromise_reject=void 0,t._readyPromiseState="rejected"}(t,e):function(t,e){M("defaultWriterReadyPromiseResetToRejected(writer, %o)",e),t._readyPromise=Promise.reject(e),t._readyPromiseState="rejected"}(t,e),t._readyPromise.catch((function(){}))}function b(t){var e=t._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");m(t,r),y(t,r),e._writer=void 0,t._ownerWritableStream=void 0}function v(t,e){var r=t._ownerWritableStream,n=r._writableStreamController,i=function(t,e){try{return t._strategySizeAlgorithm(e)}catch(e){return T(t,e),1}}(n,e);if(r!==t._ownerWritableStream)return Promise.reject(A("write to"));var o=r._state;if("errored"===o)return Promise.reject(r._storedError);if(!0===f(r)||"closed"===o)return Promise.reject(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===o)return Promise.reject(r._storedError);var s=function(t){return new Promise((function(e,r){var n={_resolve:e,_reject:r};t._writeRequests.push(n)}))}(r);return function(t,e,r){var n={chunk:e};try{$(t,n,r)}catch(e){return void T(t,e)}var i=t._controlledWritableStream;!1===f(i)&&"writable"===i._state&&p(i,I(t)),S(t)}(n,e,i),s}function w(t,e,r,n,i,o,s,a){e._controlledWritableStream=t,t._writableStreamController=e,e._queue=void 0,e._queueTotalSize=void 0,J(e),e._started=!1,e._strategySizeAlgorithm=a,e._strategyHWM=s,e._writeAlgorithm=n,e._closeAlgorithm=i,e._abortAlgorithm=o;var u=I(e);p(t,u);var l=r();Promise.resolve(l).then((function(){e._started=!0,S(e)}),(function(r){e._started=!0,c(t,r)})).catch(G)}function x(t,e,r,n){var i=Object.create(tt.prototype),o=q(e,"write",1,[i]),s=q(e,"close",0,[]),a=q(e,"abort",1,[]);w(t,i,(function(){return B(e,"start",[i])}),o,s,a,r,n)}function E(t){return t._strategyHWM-t._queueTotalSize}function S(t){M("WritableStreamDefaultControllerAdvanceQueueIfNeeded()");var e=t._controlledWritableStream;if(!1!==t._started&&void 0===e._inFlightWriteRequest){var r=e._state;if("closed"!==r&&"errored"!==r)if("erroring"!==r){if(0!==t._queue.length){var n=K(t);"close"===n?function(t){var e=t._controlledWritableStream;(function(t){t._inFlightCloseRequest=t._closeRequest,t._closeRequest=void 0})(e),W(t),t._closeAlgorithm().then((function(){!function(t){t._inFlightCloseRequest._resolve(void 0),t._inFlightCloseRequest=void 0,"erroring"===t._state&&(t._storedError=void 0,void 0!==t._pendingAbortRequest&&(t._pendingAbortRequest._resolve(),t._pendingAbortRequest=void 0)),t._state="closed";var e=t._writer;void 0!==e&&function(t){t._closedPromise_resolve(void 0),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0,t._closedPromiseState="resolved"}(e)}(e)}),(function(t){!function(t,e){t._inFlightCloseRequest._reject(e),t._inFlightCloseRequest=void 0,void 0!==t._pendingAbortRequest&&(t._pendingAbortRequest._reject(e),t._pendingAbortRequest=void 0),c(t,e)}(e,t)})).catch(G)}(t):function(t,e){var r=t._controlledWritableStream;(function(t){t._inFlightWriteRequest=t._writeRequests.shift()})(r),t._writeAlgorithm(e).then((function(){!function(t){t._inFlightWriteRequest._resolve(void 0),t._inFlightWriteRequest=void 0}(r);var e=r._state;if(W(t),!1===f(r)&&"writable"===e){var n=I(t);p(r,n)}S(t)}),(function(t){!function(t,e){t._inFlightWriteRequest._reject(e),t._inFlightWriteRequest=void 0,c(t,e)}(r,t)})).catch(G)}(t,n.chunk)}}else h(e)}}function T(t,e){"writable"===t._controlledWritableStream._state&&R(t,e)}function I(t){return E(t)<=0}function R(t,e){l(t._controlledWritableStream,e)}function C(t){return new TypeError("WritableStream.prototype."+t+" can only be used on a WritableStream")}function O(t){return new TypeError("WritableStreamDefaultWriter.prototype."+t+" can only be used on a WritableStreamDefaultWriter")}function A(t){return new TypeError("Cannot "+t+" a stream using a released writer")}function P(t){t._closedPromise=new Promise((function(e,r){t._closedPromise_resolve=e,t._closedPromise_reject=r,t._closedPromiseState="pending"}))}function N(t,e){t._closedPromise_reject(e),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0,t._closedPromiseState="rejected"}function D(t,e){M("defaultWriterReadyPromiseInitializeAsRejected(writer, %o)",e),t._readyPromise=Promise.reject(e),t._readyPromise_resolve=void 0,t._readyPromise_reject=void 0,t._readyPromiseState="rejected"}function k(t){M("defaultWriterReadyPromiseInitializeAsResolved()"),t._readyPromise=Promise.resolve(void 0),t._readyPromise_resolve=void 0,t._readyPromise_reject=void 0,t._readyPromiseState="fulfilled"}function j(t){M("defaultWriterReadyPromiseResolve()"),t._readyPromise_resolve(void 0),t._readyPromise_resolve=void 0,t._readyPromise_reject=void 0,t._readyPromiseState="fulfilled"}var L=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),M=(t("better-assert"),t("debug")("streams:writable-stream:verbose")),F=t("./helpers.js"),q=F.CreateAlgorithmFromUnderlyingMethod,B=F.InvokeOrNoop,U=F.ValidateAndNormalizeHighWaterMark,V=(F.IsNonNegativeNumber,F.MakeSizeAlgorithmFromSizeFunction),z=F.typeIsObject,G=t("./utils.js").rethrowAssertionErrorRejection,H=t("./queue-with-sizes.js"),W=H.DequeueValue,$=H.EnqueueValueWithSize,K=H.PeekQueueValue,J=H.ResetQueue,Y=Symbol("[[AbortSteps]]"),X=Symbol("[[ErrorSteps]]"),Q=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=r.size,s=r.highWaterMark,a=void 0===s?1:s;if(n(this,t),o(this),void 0!==e.type)throw new RangeError("Invalid type is specified");var u=V(i);x(this,e,a=U(a),u)}return L(t,[{key:"abort",value:function(t){return!1===s(this)?Promise.reject(C("abort")):!0===a(this)?Promise.reject(new TypeError("Cannot abort a stream that already has a writer")):u(this,t)}},{key:"getWriter",value:function(){if(!1===s(this))throw C("getWriter");return i(this)}},{key:"locked",get:function(){if(!1===s(this))throw C("locked");return a(this)}}]),t}();e.exports={AcquireWritableStreamDefaultWriter:i,CreateWritableStream:function(t,e,r,n){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:function(){return 1},a=Object.create(Q.prototype);return o(a),w(a,Object.create(tt.prototype),t,e,r,n,i,s),a},IsWritableStream:s,IsWritableStreamLocked:a,WritableStream:Q,WritableStreamAbort:u,WritableStreamDefaultControllerErrorIfNeeded:T,WritableStreamDefaultWriterCloseWithErrorPropagation:function(t){var e=t._ownerWritableStream,r=e._state;return!0===f(e)||"closed"===r?Promise.resolve():"errored"===r?Promise.reject(e._storedError):g(t)},WritableStreamDefaultWriterRelease:b,WritableStreamDefaultWriterWrite:v,WritableStreamCloseQueuedOrInFlight:f};var Z=function(){function t(e){if(n(this,t),!1===s(e))throw new TypeError("WritableStreamDefaultWriter can only be constructed with a WritableStream instance");if(!0===a(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;var r=e._state;if("writable"===r)!1===f(e)&&!0===e._backpressure?function(t){M("defaultWriterReadyPromiseInitialize()"),t._readyPromise=new Promise((function(e,r){t._readyPromise_resolve=e,t._readyPromise_reject=r})),t._readyPromiseState="pending"}(this):k(this),P(this);else if("erroring"===r)D(this,e._storedError),this._readyPromise.catch((function(){})),P(this);else if("closed"===r)k(this),function(t){t._closedPromise=Promise.resolve(void 0),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0,t._closedPromiseState="resolved"}(this);else{var i=e._storedError;D(this,i),this._readyPromise.catch((function(){})),function(t,e){t._closedPromise=Promise.reject(e),t._closedPromise_resolve=void 0,t._closedPromise_reject=void 0,t._closedPromiseState="rejected"}(this,i),this._closedPromise.catch((function(){}))}}return L(t,[{key:"abort",value:function(t){return!1===_(this)?Promise.reject(O("abort")):void 0===this._ownerWritableStream?Promise.reject(A("abort")):function(t,e){return u(t._ownerWritableStream,e)}(this,t)}},{key:"close",value:function(){if(!1===_(this))return Promise.reject(O("close"));var t=this._ownerWritableStream;return void 0===t?Promise.reject(A("close")):!0===f(t)?Promise.reject(new TypeError("cannot close an already-closing stream")):g(this)}},{key:"releaseLock",value:function(){if(!1===_(this))throw O("releaseLock");void 0!==this._ownerWritableStream&&b(this)}},{key:"write",value:function(t){return!1===_(this)?Promise.reject(O("write")):void 0===this._ownerWritableStream?Promise.reject(A("write to")):v(this,t)}},{key:"closed",get:function(){return!1===_(this)?Promise.reject(O("closed")):this._closedPromise}},{key:"desiredSize",get:function(){if(!1===_(this))throw O("desiredSize");if(void 0===this._ownerWritableStream)throw A("desiredSize");return t=this._ownerWritableStream,"errored"===(e=t._state)||"erroring"===e?null:"closed"===e?0:E(t._writableStreamController);var t,e}},{key:"ready",get:function(){return!1===_(this)?Promise.reject(O("ready")):this._readyPromise}}]),t}(),tt=function(){function t(){throw n(this,t),new TypeError("WritableStreamDefaultController cannot be constructed explicitly")}return L(t,[{key:"error",value:function(t){if(!1===function(t){return!!z(t)&&!!Object.prototype.hasOwnProperty.call(t,"_controlledWritableStream")}(this))throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");"writable"===this._controlledWritableStream._state&&R(this,t)}},{key:Y,value:function(t){return this._abortAlgorithm(t)}},{key:X,value:function(){J(this)}}]),t}()},{"./helpers.js":10,"./queue-with-sizes.js":11,"./utils.js":14,"better-assert":16,debug:18}],16:[function(t,e,r){(function(r){var n=t("assert").AssertionError,i=t("callsite"),o=t("fs");e.exports=r.env.NO_ASSERT?function(){}:function(t){if(!t){var e=i(),r=e[1],s=r.getFileName(),a=r.getLineNumber(),u=(u=o.readFileSync(s,"utf8")).split("\n")[a-1].match(/assert\((.*)\)/)[1];throw new n({message:u,stackStartFunction:e[0].getFunction()})}}}).call(this,t("_process"))},{_process:4,assert:2,callsite:17,fs:3}],17:[function(t,e,r){e.exports=function(){var t=Error.prepareStackTrace;Error.prepareStackTrace=function(t,e){return e};var e=new Error;Error.captureStackTrace(e,arguments.callee);var r=e.stack;return Error.prepareStackTrace=t,r}},{}],18:[function(t,e,r){(function(n){function i(){var t;try{t=r.storage.debug}catch(t){}return!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG),t}(r=e.exports=t("./debug")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},r.formatArgs=function(t){var e=this.useColors;if(t[0]=(e?"%c":"")+this.namespace+(e?" %c":" ")+t[0]+(e?"%c ":" ")+"+"+r.humanize(this.diff),e){var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var i=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(o=i))})),t.splice(o,0,n)}},r.save=function(t){try{null==t?r.storage.removeItem("debug"):r.storage.debug=t}catch(t){}},r.load=i,r.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},r.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],r.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},r.enable(i())}).call(this,t("_process"))},{"./debug":19,_process:4}],19:[function(t,e,r){function n(t){function e(){if(e.enabled){var t=e,i=+new Date,o=i-(n||i);t.diff=o,t.prev=n,t.curr=i,n=i;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=r.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(e,n){if("%%"===e)return e;u++;var i=r.formatters[n];if("function"==typeof i){var o=s[u];e=i.call(t,o),s.splice(u,1),u--}return e})),r.formatArgs.call(t,s),(e.log||r.log||console.log.bind(console)).apply(t,s)}}var n;return e.namespace=t,e.enabled=r.enabled(t),e.useColors=r.useColors(),e.color=function(t){var e,n=0;for(e in t)n=(n<<5)-n+t.charCodeAt(e),n|=0;return r.colors[Math.abs(n)%r.colors.length]}(t),e.destroy=i,"function"==typeof r.init&&r.init(e),r.instances.push(e),e}function i(){var t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}(r=e.exports=n.debug=n.default=n).coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){r.enable("")},r.enable=function(t){r.save(t),r.names=[],r.skips=[];var e,n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){var o=r.instances[e];o.enabled=r.enabled(o.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;var e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=t("ms"),r.instances=[],r.names=[],r.skips=[],r.formatters={}},{ms:20}],20:[function(t,e,r){function n(t){if(!((t=String(t)).length>100)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*h;case"days":case"day":case"d":return r*l;case"hours":case"hour":case"hrs":case"hr":case"h":return r*c;case"minutes":case"minute":case"mins":case"min":case"m":return r*u;case"seconds":case"second":case"secs":case"sec":case"s":return r*a;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function i(t){return t>=l?Math.round(t/l)+"d":t>=c?Math.round(t/c)+"h":t>=u?Math.round(t/u)+"m":t>=a?Math.round(t/a)+"s":t+"ms"}function o(t){return s(t,l,"day")||s(t,c,"hour")||s(t,u,"minute")||s(t,a,"second")||t+" ms"}function s(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var a=1e3,u=60*a,c=60*u,l=24*c,h=365.25*l;e.exports=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return n(t);if("number"===r&&!1===isNaN(t))return e.long?o(t):i(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},{}]},{},[1])(1)}).call(this,r(4))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(103);class i extends n.RdfDereferencerBase{}e.RdfDereferencer=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(105))},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(46)),n(r(109))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);class i extends n.Actor{constructor(t){super(t)}async run(t){if("handle"in t){const e=t;return{handle:await this.runHandle(e.handle,e.handleMediaType,t.context)}}if("mediaTypes"in t)return{mediaTypes:await this.getMediaTypes(t.context)};if("mediaTypeFormats"in t)return{mediaTypeFormats:await this.getMediaTypeFormats(t.context)};throw new Error("Either a handle, mediaTypes or mediaTypeFormats action needs to be provided")}async test(t){if("handle"in t){const e=t;return{handle:await this.testHandle(e.handle,e.handleMediaType,t.context)}}if("mediaTypes"in t)return{mediaTypes:await this.testMediaType(t.context)};if("mediaTypeFormats"in t)return{mediaTypeFormats:await this.testMediaTypeFormats(t.context)};throw new Error("Either a handle, mediaTypes or mediaTypeFormats action needs to be provided")}}e.ActorAbstractMediaTyped=i},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){function r(){this.value=""}r.prototype.equals=function(t){return!!t&&t.termType===this.termType},r.prototype.termType="DefaultGraph",t.exports=r},function(t,e){function r(t){this.value=t}r.prototype.equals=function(t){return!!t&&t.termType===this.termType&&t.value===this.value},r.prototype.termType="NamedNode",t.exports=r},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(126)),n(r(31)),n(r(62))},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}var i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=r(52);e.Parser=o.Parser;var s=r(56);e.DomHandler=s.DomHandler,e.DefaultHandler=s.DomHandler,e.parseDOM=function(t,e){var r=new s.DomHandler(void 0,e);return new o.Parser(r,e).end(t),r.dom},e.createDomStream=function(t,e,r){var n=new s.DomHandler(t,e,r);return new o.Parser(n,e)};var a=r(53);e.Tokenizer=a.default;var u=i(r(30));e.ElementType=u,e.EVENTS={attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0},n(r(57)),n(r(137)),n(r(138));var c=i(r(58));e.DomUtils=c;var l=r(57);e.RssHandler=l.FeedHandler},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=o(r(53)),a=r(12),u=new Set(["input","option","optgroup","select","button","datalist","textarea"]),c=new Set(["p"]),l={tr:new Set(["tr","th","td"]),th:new Set(["th"]),td:new Set(["thead","th","td"]),body:new Set(["head","link","script"]),li:new Set(["li"]),p:c,h1:c,h2:c,h3:c,h4:c,h5:c,h6:c,select:u,input:u,output:u,button:u,datalist:u,textarea:u,option:new Set(["option"]),optgroup:new Set(["optgroup","option"]),dd:new Set(["dt","dd"]),dt:new Set(["dt","dd"]),address:c,article:c,aside:c,blockquote:c,details:c,div:c,dl:c,fieldset:c,figcaption:c,figure:c,footer:c,form:c,header:c,hr:c,main:c,nav:c,ol:c,pre:c,section:c,table:c,ul:c,rt:new Set(["rt","rp"]),rp:new Set(["rt","rp"]),tbody:new Set(["thead","tbody"]),tfoot:new Set(["thead","tbody"])},h=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),f=new Set(["math","svg"]),d=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),p=/\s|\//,_=function(t){function e(r,n){var i=t.call(this)||this;return i._tagname="",i._attribname="",i._attribvalue="",i._attribs=null,i._stack=[],i._foreignContext=[],i.startIndex=0,i.endIndex=null,i.parseChunk=e.prototype.write,i.done=e.prototype.end,i._options=n||{},i._cbs=r||{},i._tagname="",i._attribname="",i._attribvalue="",i._attribs=null,i._stack=[],i._foreignContext=[],i.startIndex=0,i.endIndex=null,i._lowerCaseTagNames="lowerCaseTags"in i._options?!!i._options.lowerCaseTags:!i._options.xmlMode,i._lowerCaseAttributeNames="lowerCaseAttributeNames"in i._options?!!i._options.lowerCaseAttributeNames:!i._options.xmlMode,i._tokenizer=new(i._options.Tokenizer||s.default)(i._options,i),i._cbs.onparserinit&&i._cbs.onparserinit(i),i}return i(e,t),e.prototype._updatePosition=function(t){null===this.endIndex?this._tokenizer._sectionStart<=t?this.startIndex=0:this.startIndex=this._tokenizer._sectionStart-t:this.startIndex=this.endIndex+1,this.endIndex=this._tokenizer.getAbsoluteIndex()},e.prototype.ontext=function(t){this._updatePosition(1),this.endIndex--,this._cbs.ontext&&this._cbs.ontext(t)},e.prototype.onopentagname=function(t){if(this._lowerCaseTagNames&&(t=t.toLowerCase()),this._tagname=t,!this._options.xmlMode&&t in l)for(var e=void 0;l[t].has(e=this._stack[this._stack.length-1]);this.onclosetag(e));!this._options.xmlMode&&h.has(t)||(this._stack.push(t),f.has(t)?this._foreignContext.push(!0):d.has(t)&&this._foreignContext.push(!1)),this._cbs.onopentagname&&this._cbs.onopentagname(t),this._cbs.onopentag&&(this._attribs={})},e.prototype.onopentagend=function(){this._updatePosition(1),this._attribs&&(this._cbs.onopentag&&this._cbs.onopentag(this._tagname,this._attribs),this._attribs=null),!this._options.xmlMode&&this._cbs.onclosetag&&h.has(this._tagname)&&this._cbs.onclosetag(this._tagname),this._tagname=""},e.prototype.onclosetag=function(t){if(this._updatePosition(1),this._lowerCaseTagNames&&(t=t.toLowerCase()),(f.has(t)||d.has(t))&&this._foreignContext.pop(),!this._stack.length||!this._options.xmlMode&&h.has(t))this._options.xmlMode||"br"!==t&&"p"!==t||(this.onopentagname(t),this._closeCurrentTag());else{var e=this._stack.lastIndexOf(t);if(-1!==e)if(this._cbs.onclosetag)for(e=this._stack.length-e;e--;)this._cbs.onclosetag(this._stack.pop());else this._stack.length=e;else"p"!==t||this._options.xmlMode||(this.onopentagname(t),this._closeCurrentTag())}},e.prototype.onselfclosingtag=function(){this._options.xmlMode||this._options.recognizeSelfClosing||this._foreignContext[this._foreignContext.length-1]?this._closeCurrentTag():this.onopentagend()},e.prototype._closeCurrentTag=function(){var t=this._tagname;this.onopentagend(),this._stack[this._stack.length-1]===t&&(this._cbs.onclosetag&&this._cbs.onclosetag(t),this._stack.pop())},e.prototype.onattribname=function(t){this._lowerCaseAttributeNames&&(t=t.toLowerCase()),this._attribname=t},e.prototype.onattribdata=function(t){this._attribvalue+=t},e.prototype.onattribend=function(){this._cbs.onattribute&&this._cbs.onattribute(this._attribname,this._attribvalue),this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)&&(this._attribs[this._attribname]=this._attribvalue),this._attribname="",this._attribvalue=""},e.prototype._getInstructionName=function(t){var e=t.search(p),r=e<0?t:t.substr(0,e);return this._lowerCaseTagNames&&(r=r.toLowerCase()),r},e.prototype.ondeclaration=function(t){if(this._cbs.onprocessinginstruction){var e=this._getInstructionName(t);this._cbs.onprocessinginstruction("!"+e,"!"+t)}},e.prototype.onprocessinginstruction=function(t){if(this._cbs.onprocessinginstruction){var e=this._getInstructionName(t);this._cbs.onprocessinginstruction("?"+e,"?"+t)}},e.prototype.oncomment=function(t){this._updatePosition(4),this._cbs.oncomment&&this._cbs.oncomment(t),this._cbs.oncommentend&&this._cbs.oncommentend()},e.prototype.oncdata=function(t){this._updatePosition(1),this._options.xmlMode||this._options.recognizeCDATA?(this._cbs.oncdatastart&&this._cbs.oncdatastart(),this._cbs.ontext&&this._cbs.ontext(t),this._cbs.oncdataend&&this._cbs.oncdataend()):this.oncomment("[CDATA["+t+"]]")},e.prototype.onerror=function(t){this._cbs.onerror&&this._cbs.onerror(t)},e.prototype.onend=function(){if(this._cbs.onclosetag)for(var t=this._stack.length;t>0;this._cbs.onclosetag(this._stack[--t]));this._cbs.onend&&this._cbs.onend()},e.prototype.reset=function(){this._cbs.onreset&&this._cbs.onreset(),this._tokenizer.reset(),this._tagname="",this._attribname="",this._attribs=null,this._stack=[],this._cbs.onparserinit&&this._cbs.onparserinit(this)},e.prototype.parseComplete=function(t){this.reset(),this.end(t)},e.prototype.write=function(t){this._tokenizer.write(t)},e.prototype.end=function(t){this._tokenizer.end(t)},e.prototype.pause=function(){this._tokenizer.pause()},e.prototype.resume=function(){this._tokenizer.resume()},e}(a.EventEmitter);e.Parser=_},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(54)),o=n(r(28)),s=n(r(55)),a=n(r(29));function u(t){return" "===t||"\n"===t||"\t"===t||"\f"===t||"\r"===t}function c(t,e,r){var n=t.toLowerCase();return t===n?function(t,i){i===n?t._state=e:(t._state=r,t._index--)}:function(i,o){o===n||o===t?i._state=e:(i._state=r,i._index--)}}function l(t,e){var r=t.toLowerCase();return function(n,i){i===r||i===t?n._state=e:(n._state=3,n._index--)}}var h=c("C",23,16),f=c("D",24,16),d=c("A",25,16),p=c("T",26,16),_=c("A",27,16),g=l("R",34),y=l("I",35),m=l("P",36),b=l("T",37),v=c("R",39,1),w=c("I",40,1),x=c("P",41,1),E=c("T",42,1),S=l("Y",44),T=l("L",45),I=l("E",46),R=c("Y",48,1),C=c("L",49,1),O=c("E",50,1),A=c("#",52,53),P=c("X",55,54),N=function(){function t(t,e){this._state=1,this._buffer="",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=1,this._special=1,this._running=!0,this._ended=!1,this._cbs=e,this._xmlMode=!(!t||!t.xmlMode),this._decodeEntities=!(!t||!t.decodeEntities)}return t.prototype.reset=function(){this._state=1,this._buffer="",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=1,this._special=1,this._running=!0,this._ended=!1},t.prototype._stateText=function(t){"<"===t?(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._state=2,this._sectionStart=this._index):this._decodeEntities&&1===this._special&&"&"===t&&(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._baseState=1,this._state=51,this._sectionStart=this._index)},t.prototype._stateBeforeTagName=function(t){"/"===t?this._state=5:"<"===t?(this._cbs.ontext(this._getSection()),this._sectionStart=this._index):">"===t||1!==this._special||u(t)?this._state=1:"!"===t?(this._state=15,this._sectionStart=this._index+1):"?"===t?(this._state=17,this._sectionStart=this._index+1):(this._state=this._xmlMode||"s"!==t&&"S"!==t?3:31,this._sectionStart=this._index)},t.prototype._stateInTagName=function(t){("/"===t||">"===t||u(t))&&(this._emitToken("onopentagname"),this._state=8,this._index--)},t.prototype._stateBeforeCloseingTagName=function(t){u(t)||(">"===t?this._state=1:1!==this._special?"s"===t||"S"===t?this._state=32:(this._state=1,this._index--):(this._state=6,this._sectionStart=this._index))},t.prototype._stateInCloseingTagName=function(t){(">"===t||u(t))&&(this._emitToken("onclosetag"),this._state=7,this._index--)},t.prototype._stateAfterCloseingTagName=function(t){">"===t&&(this._state=1,this._sectionStart=this._index+1)},t.prototype._stateBeforeAttributeName=function(t){">"===t?(this._cbs.onopentagend(),this._state=1,this._sectionStart=this._index+1):"/"===t?this._state=4:u(t)||(this._state=9,this._sectionStart=this._index)},t.prototype._stateInSelfClosingTag=function(t){">"===t?(this._cbs.onselfclosingtag(),this._state=1,this._sectionStart=this._index+1):u(t)||(this._state=8,this._index--)},t.prototype._stateInAttributeName=function(t){("="===t||"/"===t||">"===t||u(t))&&(this._cbs.onattribname(this._getSection()),this._sectionStart=-1,this._state=10,this._index--)},t.prototype._stateAfterAttributeName=function(t){"="===t?this._state=11:"/"===t||">"===t?(this._cbs.onattribend(),this._state=8,this._index--):u(t)||(this._cbs.onattribend(),this._state=9,this._sectionStart=this._index)},t.prototype._stateBeforeAttributeValue=function(t){'"'===t?(this._state=12,this._sectionStart=this._index+1):"'"===t?(this._state=13,this._sectionStart=this._index+1):u(t)||(this._state=14,this._sectionStart=this._index,this._index--)},t.prototype._stateInAttributeValueDoubleQuotes=function(t){'"'===t?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=8):this._decodeEntities&&"&"===t&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=51,this._sectionStart=this._index)},t.prototype._stateInAttributeValueSingleQuotes=function(t){"'"===t?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=8):this._decodeEntities&&"&"===t&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=51,this._sectionStart=this._index)},t.prototype._stateInAttributeValueNoQuotes=function(t){u(t)||">"===t?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=8,this._index--):this._decodeEntities&&"&"===t&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=51,this._sectionStart=this._index)},t.prototype._stateBeforeDeclaration=function(t){this._state="["===t?22:"-"===t?18:16},t.prototype._stateInDeclaration=function(t){">"===t&&(this._cbs.ondeclaration(this._getSection()),this._state=1,this._sectionStart=this._index+1)},t.prototype._stateInProcessingInstruction=function(t){">"===t&&(this._cbs.onprocessinginstruction(this._getSection()),this._state=1,this._sectionStart=this._index+1)},t.prototype._stateBeforeComment=function(t){"-"===t?(this._state=19,this._sectionStart=this._index+1):this._state=16},t.prototype._stateInComment=function(t){"-"===t&&(this._state=20)},t.prototype._stateAfterComment1=function(t){this._state="-"===t?21:19},t.prototype._stateAfterComment2=function(t){">"===t?(this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2)),this._state=1,this._sectionStart=this._index+1):"-"!==t&&(this._state=19)},t.prototype._stateBeforeCdata6=function(t){"["===t?(this._state=28,this._sectionStart=this._index+1):(this._state=16,this._index--)},t.prototype._stateInCdata=function(t){"]"===t&&(this._state=29)},t.prototype._stateAfterCdata1=function(t){this._state="]"===t?30:28},t.prototype._stateAfterCdata2=function(t){">"===t?(this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2)),this._state=1,this._sectionStart=this._index+1):"]"!==t&&(this._state=28)},t.prototype._stateBeforeSpecial=function(t){"c"===t||"C"===t?this._state=33:"t"===t||"T"===t?this._state=43:(this._state=3,this._index--)},t.prototype._stateBeforeSpecialEnd=function(t){2!==this._special||"c"!==t&&"C"!==t?3!==this._special||"t"!==t&&"T"!==t?this._state=1:this._state=47:this._state=38},t.prototype._stateBeforeScript5=function(t){("/"===t||">"===t||u(t))&&(this._special=2),this._state=3,this._index--},t.prototype._stateAfterScript5=function(t){">"===t||u(t)?(this._special=1,this._state=6,this._sectionStart=this._index-6,this._index--):this._state=1},t.prototype._stateBeforeStyle4=function(t){("/"===t||">"===t||u(t))&&(this._special=3),this._state=3,this._index--},t.prototype._stateAfterStyle4=function(t){">"===t||u(t)?(this._special=1,this._state=6,this._sectionStart=this._index-5,this._index--):this._state=1},t.prototype._parseNamedEntityStrict=function(){if(this._sectionStart+1<this._index){var t=this._buffer.substring(this._sectionStart+1,this._index),e=this._xmlMode?a.default:o.default;Object.prototype.hasOwnProperty.call(e,t)&&(this._emitPartial(e[t]),this._sectionStart=this._index+1)}},t.prototype._parseLegacyEntity=function(){var t=this._sectionStart+1,e=this._index-t;for(e>6&&(e=6);e>=2;){var r=this._buffer.substr(t,e);if(Object.prototype.hasOwnProperty.call(s.default,r))return this._emitPartial(s.default[r]),void(this._sectionStart+=e+1);e--}},t.prototype._stateInNamedEntity=function(t){";"===t?(this._parseNamedEntityStrict(),this._sectionStart+1<this._index&&!this._xmlMode&&this._parseLegacyEntity(),this._state=this._baseState):(t<"a"||t>"z")&&(t<"A"||t>"Z")&&(t<"0"||t>"9")&&(this._xmlMode||this._sectionStart+1===this._index||(1!==this._baseState?"="!==t&&this._parseNamedEntityStrict():this._parseLegacyEntity()),this._state=this._baseState,this._index--)},t.prototype._decodeNumericEntity=function(t,e){var r=this._sectionStart+t;if(r!==this._index){var n=this._buffer.substring(r,this._index),o=parseInt(n,e);this._emitPartial(i.default(o)),this._sectionStart=this._index}else this._sectionStart--;this._state=this._baseState},t.prototype._stateInNumericEntity=function(t){";"===t?(this._decodeNumericEntity(2,10),this._sectionStart++):(t<"0"||t>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(2,10),this._index--)},t.prototype._stateInHexEntity=function(t){";"===t?(this._decodeNumericEntity(3,16),this._sectionStart++):(t<"a"||t>"f")&&(t<"A"||t>"F")&&(t<"0"||t>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(3,16),this._index--)},t.prototype._cleanup=function(){this._sectionStart<0?(this._buffer="",this._bufferOffset+=this._index,this._index=0):this._running&&(1===this._state?(this._sectionStart!==this._index&&this._cbs.ontext(this._buffer.substr(this._sectionStart)),this._buffer="",this._bufferOffset+=this._index,this._index=0):this._sectionStart===this._index?(this._buffer="",this._bufferOffset+=this._index,this._index=0):(this._buffer=this._buffer.substr(this._sectionStart),this._index-=this._sectionStart,this._bufferOffset+=this._sectionStart),this._sectionStart=0)},t.prototype.write=function(t){this._ended&&this._cbs.onerror(Error(".write() after done!")),this._buffer+=t,this._parse()},t.prototype._parse=function(){for(;this._index<this._buffer.length&&this._running;){var t=this._buffer.charAt(this._index);1===this._state?this._stateText(t):12===this._state?this._stateInAttributeValueDoubleQuotes(t):9===this._state?this._stateInAttributeName(t):19===this._state?this._stateInComment(t):8===this._state?this._stateBeforeAttributeName(t):3===this._state?this._stateInTagName(t):6===this._state?this._stateInCloseingTagName(t):2===this._state?this._stateBeforeTagName(t):10===this._state?this._stateAfterAttributeName(t):13===this._state?this._stateInAttributeValueSingleQuotes(t):11===this._state?this._stateBeforeAttributeValue(t):5===this._state?this._stateBeforeCloseingTagName(t):7===this._state?this._stateAfterCloseingTagName(t):31===this._state?this._stateBeforeSpecial(t):20===this._state?this._stateAfterComment1(t):14===this._state?this._stateInAttributeValueNoQuotes(t):4===this._state?this._stateInSelfClosingTag(t):16===this._state?this._stateInDeclaration(t):15===this._state?this._stateBeforeDeclaration(t):21===this._state?this._stateAfterComment2(t):18===this._state?this._stateBeforeComment(t):32===this._state?this._stateBeforeSpecialEnd(t):38===this._state?v(this,t):39===this._state?w(this,t):40===this._state?x(this,t):33===this._state?g(this,t):34===this._state?y(this,t):35===this._state?m(this,t):36===this._state?b(this,t):37===this._state?this._stateBeforeScript5(t):41===this._state?E(this,t):42===this._state?this._stateAfterScript5(t):43===this._state?S(this,t):28===this._state?this._stateInCdata(t):44===this._state?T(this,t):45===this._state?I(this,t):46===this._state?this._stateBeforeStyle4(t):47===this._state?R(this,t):48===this._state?C(this,t):49===this._state?O(this,t):50===this._state?this._stateAfterStyle4(t):17===this._state?this._stateInProcessingInstruction(t):53===this._state?this._stateInNamedEntity(t):22===this._state?h(this,t):51===this._state?A(this,t):23===this._state?f(this,t):24===this._state?d(this,t):29===this._state?this._stateAfterCdata1(t):30===this._state?this._stateAfterCdata2(t):25===this._state?p(this,t):26===this._state?_(this,t):27===this._state?this._stateBeforeCdata6(t):55===this._state?this._stateInHexEntity(t):54===this._state?this._stateInNumericEntity(t):52===this._state?P(this,t):this._cbs.onerror(Error("unknown _state"),this._state),this._index++}this._cleanup()},t.prototype.pause=function(){this._running=!1},t.prototype.resume=function(){this._running=!0,this._index<this._buffer.length&&this._parse(),this._ended&&this._finish()},t.prototype.end=function(t){this._ended&&this._cbs.onerror(Error(".end() after done!")),t&&this.write(t),this._ended=!0,this._running&&this._finish()},t.prototype._finish=function(){this._sectionStart<this._index&&this._handleTrailingData(),this._cbs.onend()},t.prototype._handleTrailingData=function(){var t=this._buffer.substr(this._sectionStart);28===this._state||29===this._state||30===this._state?this._cbs.oncdata(t):19===this._state||20===this._state||21===this._state?this._cbs.oncomment(t):53!==this._state||this._xmlMode?54!==this._state||this._xmlMode?55!==this._state||this._xmlMode?3!==this._state&&8!==this._state&&11!==this._state&&10!==this._state&&9!==this._state&&13!==this._state&&12!==this._state&&14!==this._state&&6!==this._state&&this._cbs.ontext(t):(this._decodeNumericEntity(3,16),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._decodeNumericEntity(2,10),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._parseLegacyEntity(),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData()))},t.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index},t.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index)},t.prototype._emitToken=function(t){this._cbs[t](this._getSection()),this._sectionStart=-1},t.prototype._emitPartial=function(t){1!==this._baseState?this._cbs.onattribdata(t):this._cbs.ontext(t)},t}();e.default=N},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(127));e.default=function(t){if(t>=55296&&t<=57343||t>1114111)return"�";t in i.default&&(t=i.default[t]);var e="";return t>65535&&(t-=65536,e+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e+=String.fromCharCode(t)}},function(t){t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(128);e.Node=n.Node,e.Element=n.Element,e.DataNode=n.DataNode,e.NodeWithChildren=n.NodeWithChildren;var i=/\s+/g,o={normalizeWhitespace:!1,withStartIndices:!1,withEndIndices:!1},s=function(){function t(t,e,r){this.dom=[],this._done=!1,this._tagStack=[],this._lastNode=null,this._parser=null,"function"==typeof e&&(r=e,e=o),"object"==typeof t&&(e=t,t=void 0),this._callback=t||null,this._options=e||o,this._elementCB=r||null}return t.prototype.onparserinit=function(t){this._parser=t},t.prototype.onreset=function(){this.dom=[],this._done=!1,this._tagStack=[],this._lastNode=null,this._parser=this._parser||null},t.prototype.onend=function(){this._done||(this._done=!0,this._parser=null,this.handleCallback(null))},t.prototype.onerror=function(t){this.handleCallback(t)},t.prototype.onclosetag=function(){this._lastNode=null;var t=this._tagStack.pop();t&&this._parser&&(this._options.withEndIndices&&(t.endIndex=this._parser.endIndex),this._elementCB&&this._elementCB(t))},t.prototype.onopentag=function(t,e){var r=new n.Element(t,e);this.addNode(r),this._tagStack.push(r)},t.prototype.ontext=function(t){var e=this._options.normalizeWhitespace,r=this._lastNode;if(r&&"text"===r.type)e?r.data=(r.data+t).replace(i," "):r.data+=t;else{e&&(t=t.replace(i," "));var o=new n.DataNode("text",t);this.addNode(o),this._lastNode=o}},t.prototype.oncomment=function(t){if(this._lastNode&&"comment"===this._lastNode.type)this._lastNode.data+=t;else{var e=new n.DataNode("comment",t);this.addNode(e),this._lastNode=e}},t.prototype.oncommentend=function(){this._lastNode=null},t.prototype.oncdatastart=function(){var t=new n.DataNode("text",""),e=new n.NodeWithChildren("cdata",[t]);this.addNode(e),t.parent=e,this._lastNode=t},t.prototype.oncdataend=function(){this._lastNode=null},t.prototype.onprocessinginstruction=function(t,e){var r=new n.ProcessingInstruction(t,e);this.addNode(r)},t.prototype.handleCallback=function(t){if("function"==typeof this._callback)this._callback(t,this.dom);else if(t)throw t},t.prototype.addNode=function(t){var e=this._tagStack[this._tagStack.length-1],r=e?e.children:this.dom,n=r[r.length-1];this._parser&&(this._options.withStartIndices&&(t.startIndex=this._parser.startIndex),this._options.withEndIndices&&(t.endIndex=this._parser.endIndex)),r.push(t),n&&(t.prev=n,n.next=t),e&&(t.parent=e),this._lastNode=null},t.prototype.addDataNode=function(t){this.addNode(t),this._lastNode=t},t}();e.DomHandler=s,e.default=s},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var a=o(r(56)),u=s(r(58)),c=r(52),l=function(t){function e(e,r){return"object"==typeof e&&null!==e&&(r=e=void 0),t.call(this,e,r)||this}return i(e,t),e.prototype.onend=function(){var t={},e=f(g,this.dom);if(e)if("feed"===e.name){var r=e.children;t.type="atom",_(t,"id","id",r),_(t,"title","title",r);var n=p("href",f("link",r));n&&(t.link=n),_(t,"description","subtitle",r),(i=d("updated",r))&&(t.updated=new Date(i)),_(t,"author","email",r,!0),t.items=h("entry",r).map((function(t){var e={},r=t.children;_(e,"id","id",r),_(e,"title","title",r);var n=p("href",f("link",r));n&&(e.link=n);var i=d("summary",r)||d("content",r);i&&(e.description=i);var o=d("updated",r);return o&&(e.pubDate=new Date(o)),e}))}else{var i;r=f("channel",e.children).children;t.type=e.name.substr(0,3),t.id="",_(t,"title","title",r),_(t,"link","link",r),_(t,"description","description",r),(i=d("lastBuildDate",r))&&(t.updated=new Date(i)),_(t,"author","managingEditor",r,!0),t.items=h("item",e.children).map((function(t){var e={},r=t.children;_(e,"id","guid",r),_(e,"title","title",r),_(e,"link","link",r),_(e,"description","description",r);var n=d("pubDate",r);return n&&(e.pubDate=new Date(n)),e}))}this.feed=t,this.handleCallback(e?null:Error("couldn't find root of feed"))},e}(a.default);function h(t,e){return u.getElementsByTagName(t,e,!0)}function f(t,e){return u.getElementsByTagName(t,e,!0,1)[0]}function d(t,e,r){return void 0===r&&(r=!1),u.getText(u.getElementsByTagName(t,e,r,1)).trim()}function p(t,e){return e?e.attribs[t]:null}function _(t,e,r,n,i){void 0===i&&(i=!1);var o=d(r,n,i);o&&(t[e]=o)}function g(t){return"rss"===t||"feed"===t||"rdf:RDF"===t}e.FeedHandler=l;var y={xmlMode:!0};e.parseFeed=function(t,e){void 0===e&&(e=y);var r=new l(e);return new c.Parser(r,e).end(t),r.feed}},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(129)),n(r(133)),n(r(134)),n(r(61)),n(r(135)),n(r(136)),n(r(15))},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(28)),o=n(r(55)),s=n(r(29)),a=n(r(54));function u(t){var e=Object.keys(t).join("|"),r=l(t),n=new RegExp("&(?:"+(e+="|#[xX][\\da-fA-F]+|#\\d+")+");","g");return function(t){return String(t).replace(n,r)}}e.decodeXML=u(s.default),e.decodeHTMLStrict=u(i.default);var c=function(t,e){return t<e?1:-1};function l(t){return function(e){return"#"===e.charAt(1)?"X"===e.charAt(2)||"x"===e.charAt(2)?a.default(parseInt(e.substr(3),16)):a.default(parseInt(e.substr(2),10)):t[e.slice(1,-1)]}}e.decodeHTML=function(){for(var t=Object.keys(o.default).sort(c),e=Object.keys(i.default).sort(c),r=0,n=0;r<e.length;r++)t[n]===e[r]?(e[r]+=";?",n++):e[r]+=";";var s=new RegExp("&(?:"+e.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),a=l(i.default);function u(t){return";"!==t.substr(-1)&&(t+=";"),a(t)}return function(t){return String(t).replace(s,u)}}()},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=u(n(r(29)).default),o=c(i);e.encodeXML=p(i,o);var s=u(n(r(28)).default),a=c(s);function u(t){return Object.keys(t).sort().reduce((function(e,r){return e[t[r]]="&"+r+";",e}),{})}function c(t){var e=[],r=[];return Object.keys(t).forEach((function(t){return 1===t.length?e.push("\\"+t):r.push(t)})),r.unshift("["+e.join("")+"]"),new RegExp(r.join("|"),"g")}e.encodeHTML=p(s,a);var l=/[^\0-\x7F]/g,h=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function f(t){return"&#x"+t.charCodeAt(0).toString(16).toUpperCase()+";"}function d(t,e){return"&#x"+(1024*(t.charCodeAt(0)-55296)+t.charCodeAt(1)-56320+65536).toString(16).toUpperCase()+";"}function p(t,e){return function(r){return r.replace(e,(function(e){return t[e]})).replace(h,d).replace(l,f)}}var _=c(i);e.escape=function(t){return t.replace(_,f).replace(h,d).replace(l,f)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(15);function i(t,e,r,o){for(var s=[],a=0;a<e.length;a++){var u=e[a];if(t(u)&&(s.push(u),--o<=0))break;if(r&&n.hasChildren(u)&&u.children.length>0){var c=i(t,u.children,r,o);if(s=s.concat(c),(o-=c.length)<=0)break}}return s}e.filter=function(t,e,r,n){return void 0===r&&(r=!0),void 0===n&&(n=1/0),Array.isArray(e)||(e=[e]),i(t,e,r,n)},e.find=i,e.findOneChild=function(t,e){for(var r=0;r<e.length;r++)if(t(e[r]))return e[r];return null},e.findOne=function t(e,r,i){void 0===i&&(i=!0);for(var o=null,s=0;s<r.length&&!o;s++){var a=r[s];n.isTag(a)&&(e(a)?o=a:i&&a.children.length>0&&(o=t(e,a.children)))}return o},e.existsOne=function t(e,r){for(var i=0;i<r.length;i++){var o=r[i];if(n.isTag(o)&&(e(o)||o.children.length>0&&t(e,o.children)))return!0}return!1},e.findAll=function(t,e){for(var r=[],i=e.slice();i.length;){var o=i.shift();o&&n.isTag(o)&&(o.children&&o.children.length>0&&i.unshift.apply(i,o.children),t(o)&&r.push(o))}return r}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(11),i=r(31);class o{constructor(t,e){this.dataFactory=t||r(19),this.baseIRI=this.dataFactory.namedNode(e||""),this.baseIRIDocument=this.baseIRI}static parsePrefixes(t,e,r){const n={};if(r)for(const e in t)e.startsWith("xmlns")&&(n[e.substr(6)]=t[e]);if(t.prefix||Object.keys(n).length>0){const r=Object.assign({},e,n);if(t.prefix){let e;for(;e=o.PREFIX_REGEX.exec(t.prefix);)r[e[1]]=e[2]}return r}return e}static expandPrefixedTerm(t,e){const r=t.indexOf(":");let n,i;if(r>=0&&(n=t.substr(0,r),i=t.substr(r+1)),""===n)return"http://www.w3.org/1999/xhtml/vocab#"+i;if(n){const t=e.prefixesAll[n];if(t)return t+i}if(t){const r=e.prefixesAll[t.toLocaleLowerCase()];if(r)return r}return t}static isValidIri(t){return o.IRI_REGEX.test(t)}static contentTypeToProfile(t){return i.RDFA_CONTENTTYPES[t]||""}getBaseIRI(t){let e=t;const r=e.indexOf("#");return r>=0&&(e=e.substr(0,r)),this.dataFactory.namedNode(e)}getResourceOrBaseIri(t,e){return!0===t?this.getBaseIriTerm(e):t}getBaseIriTerm(t){return t.localBaseIRI||this.baseIRI}createVocabIris(t,e,r,n){return t.split(/\s+/).filter(t=>t&&(r||t.indexOf(":")>=0)).map(t=>this.createIri(t,e,!0,!0,n)).filter(t=>null!=t)}createLiteral(t,e){if(e.interpretObjectAsTime&&!e.datatype)for(const r of o.TIME_REGEXES)if(t.match(r.regex)){e.datatype=this.dataFactory.namedNode(o.XSD+r.type);break}return this.dataFactory.literal(t,e.datatype||e.language)}createBlankNode(){return this.blankNodeFactory?this.blankNodeFactory():this.dataFactory.blankNode()}createIri(t,e,r,i,s){if(t=t||"",!i)return r||(t=n.resolve(t,this.getBaseIriTerm(e).value)),o.isValidIri(t)?this.dataFactory.namedNode(t):null;if(t.length>0&&"["===t[0]&&"]"===t[t.length-1]&&(t=t.substr(1,t.length-2)).indexOf(":")<0)return null;if(t.startsWith("_:"))return s?this.dataFactory.blankNode(t.substr(2)||"b_identity"):null;if(r&&e.vocab&&t.indexOf(":")<0)return this.dataFactory.namedNode(e.vocab+t);let a=o.expandPrefixedTerm(t,e);return r?t!==a&&(a=n.resolve(a,this.baseIRIDocument.value)):a=n.resolve(a,this.getBaseIriTerm(e).value),o.isValidIri(a)?this.dataFactory.namedNode(a):null}}o.RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#",o.XSD="http://www.w3.org/2001/XMLSchema#",o.RDFA="http://www.w3.org/ns/rdfa#",o.PREFIX_REGEX=/\s*([^:\s]*)*:\s*([^\s]*)*\s*/g,o.TIME_REGEXES=[{regex:/^-?P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+(\.[0-9])?S)?)?$/,type:"duration"},{regex:/^[0-9]+-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,type:"dateTime"},{regex:/^[0-9]+-[0-9][0-9]-[0-9][0-9]Z?$/,type:"date"},{regex:/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9]((Z?)|([\+-][0-9][0-9]:[0-9][0-9]))$/,type:"time"},{regex:/^[0-9]+-[0-9][0-9]$/,type:"gYearMonth"},{regex:/^[0-9]+$/,type:"gYear"}],o.IRI_REGEX=/^([A-Za-z][A-Za-z0-9+-.]*|_):[^ "<>{}|\\\[\]`]*$/,e.Util=o},function(t,e,r){"use strict";e.decode=e.parse=r(152),e.encode=e.stringify=r(153)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(162))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(169),i=r(3),o=r(1),s=r(170),a=r(70),u=r(175),c=r(21),l=r(176),h=r(177),f=r(178),d=r(179),p=r(180),_=r(181),g=r(182),y=r(183),m=r(184),b=r(7),v=r(186);class w extends o.Transform{constructor(t){super({objectMode:!0}),t=t||{},this.options=t,this.parsingContext=new m.ParsingContext(Object.assign({parser:this},t)),this.util=new b.Util({dataFactory:t.dataFactory,parsingContext:this.parsingContext}),this.jsonParser=new n,this.contextJobs=[],this.typeJobs=[],this.contextAwaitingJobs=[],this.lastDepth=0,this.lastKeys=[],this.lastOnValueJob=Promise.resolve(),this.attachJsonParserListeners()}static fromHttpResponse(t,e,r,n){let o,s;if("application/ld+json"!==e){if("application/json"!==e&&!e.endsWith("+json"))throw new i.ErrorCoded(`Unsupported JSON-LD media type ${e}`,i.ERROR_CODES.LOADING_DOCUMENT_FAILED);if(r&&r.has("Link")&&r.forEach((e,r)=>{if("link"===r){const r=v.parse(e);for(const e of r.get("rel","http://www.w3.org/ns/json-ld#context")){if(o)throw new i.ErrorCoded("Multiple JSON-LD context link headers were found on "+t,i.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);o=e.uri}}}),!o)throw new i.ErrorCoded(`Missing context link header for media type ${e} on ${t}`,i.ERROR_CODES.LOADING_DOCUMENT_FAILED)}if(r&&r.has("Content-Type")){const t=r.get("Content-Type"),e=/; *profile=([^"]*)/.exec(t);e&&"http://www.w3.org/ns/json-ld#streaming"===e[1]&&(s=!0)}return new w(Object.assign({baseIRI:t,context:o,streamingProfile:s},n||{}))}import(t){const e=new o.PassThrough({objectMode:!0});t.on("error",t=>r.emit("error",t)),t.on("data",t=>e.write(t)),t.on("end",()=>e.emit("end"));const r=e.pipe(new w(this.options));return r}_transform(t,e,r){this.jsonParser.write(t),this.lastOnValueJob.then(()=>r(),t=>r(t))}async newOnValueJob(t,e,r,n){let o=!0;if(n&&r<this.lastDepth){const t=this.parsingContext.listPointerStack[this.lastDepth];t&&(t.value&&this.emit("data",this.util.dataFactory.quad(t.value,this.util.rdfRest,this.util.rdfNil,this.util.getDefaultGraph())),t.listId.listHead=!0,this.parsingContext.idStack[t.listRootDepth+1]=[t.listId],this.parsingContext.listPointerStack.splice(this.lastDepth,1)),await a.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext,this.lastKeys,this.lastDepth)?(this.parsingContext.pendingContainerFlushBuffers.push({depth:this.lastDepth,keys:this.lastKeys.slice(0,this.lastKeys.length)}),o=!1):await this.flushBuffer(this.lastDepth,this.lastKeys)}const s=await this.util.unaliasKeyword(t[r],t,r),u=await this.util.unaliasKeywordParent(t,r);this.parsingContext.emittedStack[r]=!0;let c=!0;i.Util.isValidKeyword(s)&&"@reverse"===u&&this.emit("error",new i.ErrorCoded(`Found the @id '${e}' inside an @reverse property`,i.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));let l=!1;this.parsingContext.validationStack.length>1&&(l=this.parsingContext.validationStack[this.parsingContext.validationStack.length-1].property);for(let e=Math.max(1,this.parsingContext.validationStack.length-1);e<t.length-1;e++){const n=this.parsingContext.validationStack[e]||(this.parsingContext.validationStack[e]=await this.validateKey(t.slice(0,e+1),e,l));if(!n.valid){this.parsingContext.emittedStack[r]=!1,c=!1;break}!l&&n.property&&(l=!0)}if(this.util.isLiteral(r)&&(c=!1),c)for(const n of w.ENTRY_HANDLERS){const i=await n.test(this.parsingContext,this.util,s,t,r);if(i){await n.handle(this.parsingContext,this.util,s,t,e,r,i),n.isStackProcessor()&&(this.parsingContext.processingStack[r]=!0);break}}0===r&&Array.isArray(e)&&await this.util.validateValueIndexes(e),o&&r<this.lastDepth&&this.flushStacks(this.lastDepth),this.lastDepth=r,this.lastKeys=t,this.parsingContext.unaliasedKeywordCacheStack.splice(r-1)}flushStacks(t){this.parsingContext.processingStack.splice(t,1),this.parsingContext.emittedStack.splice(t,1),this.parsingContext.idStack.splice(t,1),this.parsingContext.graphStack.splice(t+1,1),this.parsingContext.graphContainerTermStack.splice(t,1),this.parsingContext.jsonLiteralStack.splice(t,1),this.parsingContext.validationStack.splice(t-1,2),this.parsingContext.literalStack.splice(t,this.parsingContext.literalStack.length-t)}async flushBuffer(t,e){let r=this.parsingContext.idStack[t];r||(r=this.parsingContext.idStack[t]=[this.util.dataFactory.blankNode()]);const n=this.parsingContext.unidentifiedValuesBuffer[t];if(n){for(const i of r){const r=await this.util.getDepthOffsetGraph(t,e),o=this.parsingContext.graphStack[t]||r>=0?this.parsingContext.idStack[t-r-1]:[await this.util.getGraphContainerValue(e,t)];if(o)for(const e of o){this.parsingContext.emittedStack[t]=!0;for(const r of n)r.reverse?this.parsingContext.emitQuad(t,this.util.dataFactory.quad(r.object,r.predicate,i,e)):this.parsingContext.emitQuad(t,this.util.dataFactory.quad(i,r.predicate,r.object,e))}else{const r=this.parsingContext.getUnidentifiedGraphBufferSafe(t-await this.util.getDepthOffsetGraph(t,e)-1);for(const t of n)t.reverse?r.push({object:i,predicate:t.predicate,subject:t.object}):r.push({object:t.object,predicate:t.predicate,subject:i})}}this.parsingContext.unidentifiedValuesBuffer.splice(t,1),this.parsingContext.literalStack.splice(t,1),this.parsingContext.jsonLiteralStack.splice(t,1)}const i=this.parsingContext.unidentifiedGraphsBuffer[t];if(i){for(const e of r){const r=1!==t||"BlankNode"!==e.termType||this.parsingContext.topLevelProperties?e:this.util.getDefaultGraph();this.parsingContext.emittedStack[t]=!0;for(const e of i)this.parsingContext.emitQuad(t,this.util.dataFactory.quad(e.subject,e.predicate,e.object,r))}this.parsingContext.unidentifiedGraphsBuffer.splice(t,1)}}async validateKey(t,e,r){for(const n of w.ENTRY_HANDLERS)if(await n.validate(this.parsingContext,this.util,t,e,r))return{valid:!0,property:r||n.isPropertyHandler()};return{valid:!1,property:!1}}attachJsonParserListeners(){this.jsonParser.onValue=t=>{const e=this.jsonParser.stack.length,r=new Array(e+1).fill(0).map((t,r)=>r===e?this.jsonParser.key:this.jsonParser.stack[r].key);if(!this.isParsingContextInner(e)){const n=()=>this.newOnValueJob(r,t,e,!0);if(this.parsingContext.streamingProfile||this.parsingContext.contextTree.getContext(r.slice(0,-1)))this.lastOnValueJob=this.lastOnValueJob.then(n);else if("@context"===r[e]){let t=this.contextJobs[e];t||(t=this.contextJobs[e]=[]),t.push(n)}else"@type"===r[e]||"number"==typeof r[e]&&"@type"===r[e-1]?this.typeJobs.push({job:n,keys:r.slice(0,r.length-1)}):this.contextAwaitingJobs.push({job:n,keys:r});this.parsingContext.streamingProfile||0!==e||(this.lastOnValueJob=this.lastOnValueJob.then(()=>this.executeBufferedJobs()))}},this.jsonParser.onError=t=>{this.emit("error",t)}}isParsingContextInner(t){for(let e=t;e>0;e--)if("@context"===this.jsonParser.stack[e-1].key)return!0;return!1}async executeBufferedJobs(){for(const t of this.contextJobs)if(t)for(const e of t)await e();this.parsingContext.unaliasedKeywordCacheStack.splice(0);for(const t of this.contextAwaitingJobs){if(this.typeJobs.length>0){const e=[],r=[];for(let n=0;n<this.typeJobs.length;n++){const i=this.typeJobs[n];b.Util.isPrefixArray(i.keys,t.keys)&&(e.push(i),r.push(n))}const n=e.sort((t,e)=>t.keys.length-e.keys.length);for(const t of n)await t.job();const i=r.sort().reverse();for(const t of i)this.typeJobs.splice(t,1)}await t.job()}}}w.DEFAULT_PROCESSING_MODE="1.1",w.ENTRY_HANDLERS=[new s.EntryHandlerArrayValue,new l.EntryHandlerKeywordContext,new f.EntryHandlerKeywordId,new d.EntryHandlerKeywordIncluded,new h.EntryHandlerKeywordGraph,new p.EntryHandlerKeywordNest,new _.EntryHandlerKeywordType,new y.EntryHandlerKeywordValue,new a.EntryHandlerContainer,new g.EntryHandlerKeywordUnknownFallback,new c.EntryHandlerPredicate,new u.EntryHandlerInvalidFallback],e.JsonLdParser=w},function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new r((function(e){e(t.value)})).then(s,a)}u((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),r(32);const i=r(11),o=r(20),s=r(67),a=r(68),u=r(33),c=r(69);class l{constructor(t){t=t||{},this.documentLoader=t.documentLoader||new s.FetchDocumentLoader,this.documentCache={},this.validateContext=!t.skipValidation,this.expandContentTypeToBase=!!t.expandContentTypeToBase,this.remoteContextsDepthLimit=t.remoteContextsDepthLimit||32}static validateLanguage(t,e,r){if("string"!=typeof t)throw new o.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(t)}'`,r);if(!u.Util.REGEX_LANGUAGE_TAG.test(t)){if(e)throw new o.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(t)}'`,r);return!1}return!0}static validateDirection(t,e){if("string"!=typeof t)throw new o.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(t)}'`,o.ERROR_CODES.INVALID_BASE_DIRECTION);if(!u.Util.REGEX_DIRECTION_TAG.test(t)){if(e)throw new o.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(t)}'`,o.ERROR_CODES.INVALID_BASE_DIRECTION);return!1}return!0}idifyReverseTerms(t){for(const e of Object.keys(t)){const r=t[e];if(r&&"object"==typeof r&&r["@reverse"]&&!r["@id"]){if("string"!=typeof r["@reverse"]||u.Util.isValidKeyword(r["@reverse"]))throw new o.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${r["@reverse"]}'`,o.ERROR_CODES.INVALID_IRI_MAPPING);r["@id"]=r["@reverse"],u.Util.isPotentialKeyword(r["@reverse"])?delete r["@reverse"]:r["@reverse"]=!0}}return t}expandPrefixedTerms(t,e){const r=t.getContextRaw();for(const n of Object.keys(r))if(u.Util.EXPAND_KEYS_BLACKLIST.indexOf(n)<0&&!u.Util.isReservedInternalKeyword(n)){const i=r[n];if(u.Util.isPotentialKeyword(n)&&u.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(n)>=0&&("@type"!==n||"object"==typeof r[n]&&!r[n]["@protected"]&&"@set"!==r[n]["@container"]))throw new o.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${n} to ${JSON.stringify(i)}`,o.ERROR_CODES.KEYWORD_REDEFINITION);if(u.Util.ALIAS_RANGE_BLACKLIST.indexOf(u.Util.getContextValueId(i))>=0)throw new o.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${n} to ${JSON.stringify(i)}`,o.ERROR_CODES.INVALID_KEYWORD_ALIAS);if(i&&u.Util.isPotentialKeyword(u.Util.getContextValueId(i))&&!0===i["@prefix"])throw new o.ErrorCoded(`Tried to use keyword aliases as prefix: '${n}': '${JSON.stringify(i)}'`,o.ERROR_CODES.INVALID_TERM_DEFINITION);for(;u.Util.isPrefixValue(r[n]);){const i=r[n];let o=!1;if("string"==typeof i)r[n]=t.expandTerm(i,!0),o=o||i!==r[n];else{const s=i["@id"],a=i["@type"],c=!("@prefix"in i)||u.Util.isValidIri(n);if("@id"in i)null!=s&&"string"==typeof s&&(r[n]["@id"]=t.expandTerm(s,!0),o=o||s!==r[n]["@id"]);else if(!u.Util.isPotentialKeyword(n)&&c){const e=t.expandTerm(n,!0);e!==n&&(r[n]["@id"]=e,o=!0)}!a||"string"!=typeof a||"@vocab"===a||i["@container"]&&i["@container"]["@type"]||!c||(r[n]["@type"]=t.expandTerm(a,!0),e&&a===r[n]["@type"]&&(r[n]["@type"]=t.expandTerm(a,!1)),o=o||a!==r[n]["@type"])}if(!o)break}}}normalize(t,{processingMode:e,normalizeLanguageTags:r}){if(r||1===e)for(const e of Object.keys(t))if("@language"===e&&"string"==typeof t[e])t[e]=t[e].toLowerCase();else{const r=t[e];r&&"object"==typeof r&&"string"==typeof r["@language"]&&(r["@language"]=r["@language"].toLowerCase())}}containersToHash(t){for(const e of Object.keys(t)){const r=t[e];if(r&&"object"==typeof r)if("string"==typeof r["@container"])r["@container"]={[r["@container"]]:!0};else if(Array.isArray(r["@container"])){const t={};for(const e of r["@container"])t[e]=!0;r["@container"]=t}}}applyScopedProtected(t,{processingMode:e}){if(e&&e>=1.1&&t["@protected"]){for(const e of Object.keys(t))if(!u.Util.isReservedInternalKeyword(e)&&!u.Util.isPotentialKeyword(e)&&!u.Util.isTermProtected(t,e)){const r=t[e];r&&"object"==typeof r?"@protected"in t[e]||(t[e]["@protected"]=!0):t[e]={"@id":r,"@protected":!0}}delete t["@protected"]}}validateKeywordRedefinitions(t,e,r){for(const n of Object.keys(e))if(u.Util.isTermProtected(t,n)){if("string"==typeof e[n]){const i=u.Util.isSimpleTermDefinitionPrefix(e[n],r);e[n]={"@id":e[n]},i&&(e[n]["@prefix"]=!0,t[n]["@prefix"]=!0)}const i=c(t[n]);if(e[n]["@protected"]=!0,i!==c(e[n]))throw new o.ErrorCoded(`Attempted to override the protected keyword ${n} from ${JSON.stringify(u.Util.getContextValueId(t[n]))} to ${JSON.stringify(u.Util.getContextValueId(e[n]))}`,o.ERROR_CODES.PROTECTED_TERM_REDEFINITION)}}validate(t,{processingMode:e}){for(const r of Object.keys(t)){if(u.Util.isReservedInternalKeyword(r))continue;if(""===r)throw new o.ErrorCoded(`The empty term is not allowed, got: '${r}': '${JSON.stringify(t[r])}'`,o.ERROR_CODES.INVALID_TERM_DEFINITION);const n=t[r],i=typeof n;if(u.Util.isPotentialKeyword(r)){switch(r.substr(1)){case"vocab":if(null!==n&&"string"!==i)throw new o.ErrorCoded(`Found an invalid @vocab IRI: ${n}`,o.ERROR_CODES.INVALID_VOCAB_MAPPING);break;case"base":if(null!==n&&"string"!==i)throw new o.ErrorCoded(`Found an invalid @base IRI: ${t[r]}`,o.ERROR_CODES.INVALID_BASE_IRI);break;case"language":null!==n&&l.validateLanguage(n,!0,o.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);break;case"version":if(null!==n&&"number"!==i)throw new o.ErrorCoded(`Found an invalid @version number: ${n}`,o.ERROR_CODES.INVALID_VERSION_VALUE);break;case"direction":null!==n&&l.validateDirection(n,!0);break;case"propagate":if(1===e)throw new o.ErrorCoded(`Found an illegal @propagate keyword: ${n}`,o.ERROR_CODES.INVALID_CONTEXT_ENTRY);if(null!==n&&"boolean"!==i)throw new o.ErrorCoded(`Found an invalid @propagate value: ${n}`,o.ERROR_CODES.INVALID_PROPAGATE_VALUE)}if(u.Util.isValidKeyword(r)&&u.Util.isValidKeyword(u.Util.getContextValueId(n)))throw new o.ErrorCoded(`Illegal keyword alias in term value, found: '${r}': '${u.Util.getContextValueId(n)}'`,o.ERROR_CODES.KEYWORD_REDEFINITION)}else if(null!==n)switch(i){case"string":if(u.Util.getPrefix(n,t)===r)throw new o.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.CYCLIC_IRI_MAPPING);if(u.Util.isValidIriWeak(r)){if("@type"===n)throw new o.ErrorCoded(`IRIs can not be mapped to @type, found: '${r}': '${n}'`,o.ERROR_CODES.INVALID_IRI_MAPPING);if(u.Util.isValidIri(n)&&n!==new a.JsonLdContextNormalized(t).expandTerm(r))throw new o.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${r}': '${n}'`,o.ERROR_CODES.INVALID_IRI_MAPPING)}break;case"object":if(!(u.Util.isCompactIri(r)||"@id"in n||("@id"===n["@type"]?t["@base"]:t["@vocab"])))throw new o.ErrorCoded(`Missing @id in context entry: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_IRI_MAPPING);for(const i of Object.keys(n)){const s=n[i];if(s)switch(i){case"@id":if(u.Util.isValidKeyword(s)&&"@type"!==s&&"@id"!==s&&"@graph"!==s)throw new o.ErrorCoded(`Illegal keyword alias in term value, found: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_IRI_MAPPING);if(u.Util.isValidIriWeak(r)){if("@type"===s)throw new o.ErrorCoded(`IRIs can not be mapped to @type, found: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_IRI_MAPPING);if(u.Util.isValidIri(s)&&s!==new a.JsonLdContextNormalized(t).expandTerm(r))throw new o.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_IRI_MAPPING)}if("string"!=typeof s)throw new o.ErrorCoded(`Detected non-string @id in context entry: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_IRI_MAPPING);if(u.Util.getPrefix(s,t)===r)throw new o.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.CYCLIC_IRI_MAPPING);break;case"@type":if("@type"===n["@container"]&&"@id"!==s&&"@vocab"!==s)throw new o.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${r}': '${s}'`,o.ERROR_CODES.INVALID_TYPE_MAPPING);if(!("@id"===s||"@vocab"===s||1!==e&&"@json"===s||1!==e&&"@none"===s||"_"!==s[0]&&u.Util.isValidIri(s)))throw new o.ErrorCoded(`A context @type must be an absolute IRI, found: '${r}': '${s}'`,o.ERROR_CODES.INVALID_TYPE_MAPPING);break;case"@reverse":if("string"==typeof s&&n["@id"]&&n["@id"]!==s)throw new o.ErrorCoded(`Found non-matching @id and @reverse term values in '${r}':'${s}' and '${n["@id"]}'`,o.ERROR_CODES.INVALID_REVERSE_PROPERTY);if("@nest"in n)throw new o.ErrorCoded(`@nest is not allowed in the reverse property '${r}'`,o.ERROR_CODES.INVALID_REVERSE_PROPERTY);break;case"@container":if(1===e&&(Object.keys(s).length>1||u.Util.CONTAINERS_1_0.indexOf(Object.keys(s)[0])<0))throw new o.ErrorCoded(`Invalid term @container for '${r}' ('${Object.keys(s)}') in 1.0, must be only one of ${u.Util.CONTAINERS_1_0.join(", ")}`,o.ERROR_CODES.INVALID_CONTAINER_MAPPING);for(const t of Object.keys(s)){if("@list"===t&&n["@reverse"])throw new o.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${r}'`,o.ERROR_CODES.INVALID_REVERSE_PROPERTY);if(u.Util.CONTAINERS.indexOf(t)<0)throw new o.ErrorCoded(`Invalid term @container for '${r}' ('${t}'), must be one of ${u.Util.CONTAINERS.join(", ")}`,o.ERROR_CODES.INVALID_CONTAINER_MAPPING)}break;case"@language":l.validateLanguage(s,!0,o.ERROR_CODES.INVALID_LANGUAGE_MAPPING);break;case"@direction":l.validateDirection(s,!0);break;case"@prefix":if(null!==s&&"boolean"!=typeof s)throw new o.ErrorCoded(`Found an invalid term @prefix boolean in: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_PREFIX_VALUE);if(!("@id"in n||u.Util.isValidIri(r)))throw new o.ErrorCoded(`Invalid @prefix definition for '${r}' ('${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_TERM_DEFINITION);break;case"@index":if(1===e||!n["@container"]||!n["@container"]["@index"])throw new o.ErrorCoded(`Attempt to add illegal key to value object: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_TERM_DEFINITION);break;case"@nest":if(u.Util.isPotentialKeyword(s)&&"@nest"!==s)throw new o.ErrorCoded(`Found an invalid term @nest value in: '${r}': '${JSON.stringify(n)}'`,o.ERROR_CODES.INVALID_NEST_VALUE)}}break;default:throw new o.ErrorCoded(`Found an invalid term value: '${r}': '${n}'`,o.ERROR_CODES.INVALID_TERM_DEFINITION)}}}applyBaseEntry(t,e,r){return"string"==typeof t?t:(r&&!("@base"in t)&&e.parentContext&&"@base"in e.parentContext&&(t["@base"]=e.parentContext["@base"],e.parentContext["@__baseDocument"]&&(t["@__baseDocument"]=!0)),e.baseIRI&&!e.external&&("@base"in t?null===t["@base"]||"string"!=typeof t["@base"]||u.Util.isValidIri(t["@base"])||(t["@base"]=i.resolve(t["@base"],e.parentContext&&e.parentContext["@base"]||e.baseIRI)):(t["@base"]=e.baseIRI,t["@__baseDocument"]=!0)),t)}normalizeContextIri(t,e){if(!u.Util.isValidIri(t)&&(t=i.resolve(t,e),!u.Util.isValidIri(t)))throw new Error(`Invalid context IRI: ${t}`);return t}parseInnerContexts(t,e){return n(this,void 0,void 0,(function*(){for(const r of Object.keys(t)){const n=t[r];if(n&&"object"==typeof n&&"@context"in n&&null!==n["@context"]){if(this.validateContext)try{const i=Object.assign({},t);i[r]=Object.assign({},i[r]),delete i[r]["@context"],yield this.parse(n["@context"],Object.assign({},e,{parentContext:i,ignoreProtection:!0,ignoreRemoteScopedContexts:!0}))}catch(t){throw new o.ErrorCoded(t.message,o.ERROR_CODES.INVALID_SCOPED_CONTEXT)}n["@context"]=(yield this.parse(n["@context"],Object.assign({},e,{minimalProcessing:!0,ignoreRemoteScopedContexts:!0,parentContext:t}))).getContextRaw()}}return t}))}parse(t,r={processingMode:l.DEFAULT_PROCESSING_MODE}){return n(this,void 0,void 0,(function*(){const{baseIRI:n,parentContext:i,external:s,processingMode:c,normalizeLanguageTags:h,ignoreProtection:f,minimalProcessing:d}=r;let p=i;const _=r.remoteContexts||{};if(Object.keys(_).length>=this.remoteContextsDepthLimit)throw new o.ErrorCoded("Detected an overflow in remote context inclusions: "+Object.keys(_),o.ERROR_CODES.CONTEXT_OVERFLOW);if(null==t){if(!f&&p&&u.Util.hasProtectedTerms(p))throw new o.ErrorCoded("Illegal context nullification when terms are protected",o.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);return new a.JsonLdContextNormalized(this.applyBaseEntry({},r,!1))}if("string"==typeof t){const e=this.normalizeContextIri(t,n),i=this.getOverriddenLoad(e,r);if(i)return new a.JsonLdContextNormalized(i);const o=yield this.parse(yield this.load(e),Object.assign({},r,{baseIRI:e,external:!0,remoteContexts:Object.assign({},_,{[e]:!0})}));return this.applyBaseEntry(o.getContextRaw(),r,!0),o}if(Array.isArray(t)){const e=[],i=yield Promise.all(t.map((t,i)=>{if("string"==typeof t){const o=this.normalizeContextIri(t,n);e[i]=o;const s=this.getOverriddenLoad(o,r);return s||this.load(o)}return t}));if(d)return new a.JsonLdContextNormalized(i);const o=yield i.reduce((t,n,i)=>t.then(t=>this.parse(n,Object.assign({},r,{baseIRI:e[i]||r.baseIRI,external:!!e[i]||r.external,parentContext:t.getContextRaw(),remoteContexts:e[i]?Object.assign({},_,{[e[i]]:!0}):_}))),Promise.resolve(new a.JsonLdContextNormalized(p||{})));return this.applyBaseEntry(o.getContextRaw(),r,!0),o}if("object"==typeof t){if("@context"in t)return yield this.parse(t["@context"],r);t=JSON.parse(JSON.stringify(t)),p&&(p=JSON.parse(JSON.stringify(p)));let i={};if(s&&delete t["@base"],this.applyBaseEntry(t,r,!0),this.containersToHash(t),d)return new a.JsonLdContextNormalized(t);let u={};if("@import"in t){if(!(c&&c>=1.1))throw new o.ErrorCoded("Context importing is not supported in JSON-LD 1.0",o.ERROR_CODES.INVALID_CONTEXT_ENTRY);if("string"!=typeof t["@import"])throw new o.ErrorCoded("An @import value must be a string, but got "+typeof t["@import"],o.ERROR_CODES.INVALID_IMPORT_VALUE);u=yield this.loadImportContext(this.normalizeContextIri(t["@import"],n)),delete t["@import"]}i=Object.assign({},i,p,u,t);const _=new a.JsonLdContextNormalized(i);return yield this.parseInnerContexts(i,r),!f&&p&&c&&c>=1.1&&this.validateKeywordRedefinitions(p,i,e.defaultExpandOptions),(i&&i["@version"]||c||l.DEFAULT_PROCESSING_MODE)>=1.1&&(t["@vocab"]&&"string"==typeof t["@vocab"]||""===t["@vocab"])&&t["@vocab"].indexOf(":")<0&&p&&"@vocab"in p&&(i["@vocab"]=p["@vocab"]+t["@vocab"]),this.idifyReverseTerms(i),this.expandPrefixedTerms(_,this.expandContentTypeToBase),this.normalize(i,{processingMode:c,normalizeLanguageTags:h}),this.applyScopedProtected(i,{processingMode:c}),this.validateContext&&this.validate(i,{processingMode:c}),_}throw new o.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${t}`,o.ERROR_CODES.INVALID_LOCAL_CONTEXT)}))}load(t){return n(this,void 0,void 0,(function*(){const e=this.documentCache[t];if(e)return"string"==typeof e?e:Array.isArray(e)?e.slice():Object.assign({},e);let r;try{r=yield this.documentLoader.load(t)}catch(e){throw new o.ErrorCoded(`Failed to load remote context ${t}: ${e.message}`,o.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED)}if(!("@context"in r))throw new o.ErrorCoded(`Missing @context in remote context at ${t}`,o.ERROR_CODES.INVALID_REMOTE_CONTEXT);return this.documentCache[t]=r["@context"]}))}getOverriddenLoad(t,e){if(t in(e.remoteContexts||{})){if(e.ignoreRemoteScopedContexts)return t;throw new o.ErrorCoded("Detected a cyclic context inclusion of "+t,o.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION)}return null}loadImportContext(t){return n(this,void 0,void 0,(function*(){const e=yield this.load(t);if("object"!=typeof e||Array.isArray(e))throw new o.ErrorCoded("An imported context must be a single object: "+t,o.ERROR_CODES.INVALID_REMOTE_CONTEXT);if("@import"in e)throw new o.ErrorCoded("An imported context can not import another context: "+t,o.ERROR_CODES.INVALID_CONTEXT_ENTRY);return e}))}}l.DEFAULT_PROCESSING_MODE=1.1,e.ContextParser=l,e.defaultExpandOptions={allowPrefixForcing:!0,allowPrefixNonGenDelims:!1,allowVocabRelativeToBase:!0}},function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new r((function(e){e(t.value)})).then(s,a)}u((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),r(32);e.FetchDocumentLoader=class{load(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(t,{headers:{accept:"application/ld+json"}});if(e.ok)return yield e.json();throw new Error(e.statusText||`${e.status}`)}))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(11),i=r(66),o=r(20),s=r(33);e.JsonLdContextNormalized=class{constructor(t){this.contextRaw=t}getContextRaw(){return this.contextRaw}expandTerm(t,e,r=i.defaultExpandOptions){const a=this.contextRaw[t];if(null===a||a&&null===a["@id"])return null;let u=!0;if(a&&e){const e=s.Util.getContextValueId(a);if(e&&e!==t){if("string"==typeof e&&(s.Util.isValidIri(e)||s.Util.isValidKeyword(e)))return e;s.Util.isPotentialKeyword(e)||(u=!1)}}const c=s.Util.getPrefix(t,this.contextRaw),l=this.contextRaw["@vocab"],h=(!!l||""===l)&&l.indexOf(":")<0,f=this.contextRaw["@base"],d=s.Util.isPotentialKeyword(t);if(c){const e=this.contextRaw[c],n=s.Util.getContextValueId(e);if(n){if("string"!=typeof e&&r.allowPrefixForcing){if(!("_"===n[0]||d||e["@prefix"]||t in this.contextRaw))return t}else if(!s.Util.isSimpleTermDefinitionPrefix(n,r))return t;return n+t.substr(c.length+1)}}else{if(e&&(l||""===l||r.allowVocabRelativeToBase&&f&&h)&&!d&&!s.Util.isCompactIri(t)){if(h){if(r.allowVocabRelativeToBase)return n.resolve(l,f)+t;throw new o.ErrorCoded(`Relative vocab expansion for term '${t}' with vocab '${l}' is not allowed.`,o.ERROR_CODES.INVALID_VOCAB_MAPPING)}return l+t}if(!e&&f&&!d&&!s.Util.isCompactIri(t))return n.resolve(t,f)}if(u)return t;throw new o.ErrorCoded(`Invalid IRI mapping found for context entry '${t}': '${JSON.stringify(a)}'`,o.ERROR_CODES.INVALID_IRI_MAPPING)}compactIri(t,e){if(e&&this.contextRaw["@vocab"]&&t.startsWith(this.contextRaw["@vocab"]))return t.substr(this.contextRaw["@vocab"].length);if(!e&&this.contextRaw["@base"]&&t.startsWith(this.contextRaw["@base"]))return t.substr(this.contextRaw["@base"].length);const r={prefix:"",suffix:t};for(const n in this.contextRaw){const i=this.contextRaw[n];if(i&&!s.Util.isPotentialKeyword(n)){const o=s.Util.getContextValueId(i);if(t.startsWith(o)){const i=t.substr(o.length);if(i)i.length<r.suffix.length&&(r.prefix=n,r.suffix=i);else if(e)return n}}}return r.prefix?r.prefix+":"+r.suffix:t}}},function(t,e,r){"use strict";t.exports=function(t){return function t(e){if(null===e||"object"!=typeof e||null!=e.toJSON)return JSON.stringify(e);if(Array.isArray(e)&&0===e.length)return"[]";if(Array.isArray(e)&&1===e.length)return"["+t(e[0])+"]";if(Array.isArray(e))return"["+e.reduce((e,r,n)=>(e=1===n?t(e):e)+","+t(r))+"]";const r=Object.keys(e);if(0===r.length)return"{}";if(1===r.length)return"{"+t(r[0])+":"+t(e[r[0]])+"}";return"{"+r.sort().reduce((r,n,i)=>(r=1===i?t(r)+":"+t(e[r]):r)+","+t(n)+":"+t(e[n]))+"}"}(t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(171),i=r(172),o=r(173),s=r(174),a=r(7);class u{static isSimpleGraphContainer(t){return"@graph"in t&&("@set"in t&&2===Object.keys(t).length||1===Object.keys(t).length)}static isComplexGraphContainer(t){return"@graph"in t&&("@set"in t&&Object.keys(t).length>2||!("@set"in t)&&Object.keys(t).length>1)}static getContainerGraphIndex(t,e,r){let n=u.isSimpleGraphContainer(t),i="";for(let t=e;t<r.length;t++)n&&"number"!=typeof r[t]||(i+=":"+r[t]),n||"number"==typeof r[t]||(n=!0);return i}static async getContainerHandler(t,e,r){const n={containers:{"@set":!0},depth:r,fallback:!0};let i=!1;const o=await t.getContext(e,2);for(let t=r-1;t>=0;t--)if("number"!=typeof e[t]){const r=a.Util.getContextValue(o,"@container",e[t],!1);if(r&&u.isSimpleGraphContainer(r))return{containers:r,depth:t+1,fallback:!1};const s=a.Util.getContextValue(o,"@container",e[t-1],!1);if(s){const e="@graph"in s;for(const r in u.CONTAINER_HANDLERS)if(s[r])return e?u.CONTAINER_HANDLERS[r].canCombineWithGraph()?{containers:s,depth:t,fallback:!1}:n:i?n:{containers:s,depth:t,fallback:!1};return n}if(i)return n;i=!0}return n}static async isBufferableContainerHandler(t,e,r){const n=await u.getContainerHandler(t,e,r);return!(n.fallback||"@graph"in n.containers)}isPropertyHandler(){return!1}isStackProcessor(){return!0}async validate(t,e,r,n,i){return!!await this.test(t,e,null,r,n)}async test(t,e,r,n,i){const o=a.Util.getContextValueContainer(await t.getContext(n,2),n[i-1]);for(const t in u.CONTAINER_HANDLERS)if(o[t])return{containers:o,handler:u.CONTAINER_HANDLERS[t]};return null}async handle(t,e,r,n,i,o,s){return s.handler.handle(s.containers,t,e,n,i,o)}}u.CONTAINER_HANDLERS={"@id":new n.ContainerHandlerIdentifier,"@index":new i.ContainerHandlerIndex,"@language":new o.ContainerHandlerLanguage,"@type":new s.ContainerHandlerType},e.EntryHandlerContainer=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(16),i=r(191),o=r(11);class s extends i.ActorRdfDereferenceMediaMappings{constructor(t){super(t)}async test(t){if(!/^https?:/.test(t.url))throw new Error(`Cannot retrieve ${t.url} because it is not an HTTP(S) URL.`);return!0}async run(t){const e=(await this.mediatorRdfParseMediatypes.mediate({context:t.context,mediaTypes:!0})).mediaTypes,r=this.mediaTypesToAcceptString(e,this.getMaxAcceptHeaderLength()),i=new Headers;i.append("Accept",r);for(const e in t.headers)i.append(e,t.headers[e]);const a={context:t.context,init:{headers:i,method:t.method},input:t.url};let u;try{u=await this.mediatorHttp.mediate(a)}catch(e){return this.handleDereferenceError(t,e)}const c=o.resolve(u.url,t.url),l={};u.headers.forEach((t,e)=>l[e]=t);const h=n.ActorHttp.toNodeReadable(u.body);if(200!==u.status){const e=new Error(`Could not retrieve ${t.url} (${u.status}: ${u.statusText||"unknown error"})`);return this.handleDereferenceError(t,e)}let f=u.headers.has("content-type")?s.REGEX_MEDIATYPE.exec(u.headers.get("content-type"))[0]:null;f&&"text/plain"!==f||(f=this.getMediaTypeFromExtension(u.url));const d={baseIRI:c,headers:u.headers,input:h};let p;try{p=(await this.mediatorRdfParseHandle.mediate({context:t.context,handle:d,handleMediaType:f})).handle}catch(e){return this.handleDereferenceError(t,e)}return{url:c,quads:this.handleDereferenceStreamErrors(t,p.quads),triples:p.triples,headers:l}}mediaTypesToAcceptString(t,e){e-=10;const r=[],n=Object.keys(t).map(e=>({mediaType:e,priority:t[e]})).sort((t,e)=>e.priority-t.priority);let i=0;for(const t of n){const n=t.mediaType+(1!==t.priority?";q="+t.priority.toFixed(3).replace(/0*$/,""):"");if(i+n.length>e){r.push("*/*;q=0.1");break}r.push(n),i+=n.length}return r.length?r.join(","):"*/*"}}e.ActorRdfDereferenceHttpParseBase=s,s.REGEX_MEDIATYPE=/^[^ ;]*/},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2),i=r(1);class o extends n.Actor{constructor(t){super(t)}isHardError(t){return!t.context||!t.context.get(e.KEY_CONTEXT_LENIENT)}handleDereferenceStreamErrors(t,e){return this.isHardError(t)||(e.on("error",r=>{this.logError(t.context,r.message,{url:t.url}),e.push(null)}),e=e.pipe(new i.PassThrough({objectMode:!0}))),e}async handleDereferenceError(t,e){if(this.isHardError(t))throw e;{this.logError(t.context,e.message);const r=new i.Readable;return r.push(null),{url:t.url,quads:r}}}}e.ActorRdfDereference=o,e.KEY_CONTEXT_LENIENT="@comunica/actor-init-sparql:lenient"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(43)),e.default=r(104)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(194);e.getLiteralLanguage=n.getLiteralLanguage,e.getLiteralType=n.getLiteralType,e.getLiteralValue=n.getLiteralValue,e.quadToStringQuad=n.quadToStringQuad,e.stringQuadToQuad=n.stringQuadToQuad,e.stringToTerm=n.stringToTerm,e.termToString=n.termToString},function(t,e,r){t.exports=r(76)},function(t,e,r){"use strict";r.r(e);var n=r(34),i=r(73),o=r.n(i),s=r(74),a=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))},u=function(t,e){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};self.onmessage=function(t){var e={};t.data.proxy&&(e["@comunica/actor-http-proxy:httpProxyHandler"]=new n.ProxyHandlerStatic(t.data.proxy)),function(t,e,r,n,i){a(this,void 0,void 0,(function(){var s,a,c;return u(this,(function(u){switch(u.label){case 0:return u.trys.push([0,2,,3]),[4,o.a.dereference(t,e)];case 1:return s=u.sent().quads,i(a=0,!1),s.on("data",(function(t){i(++a,!1),r(t)})).on("error",n).on("end",(function(){i(a,!0)})),[3,3];case 2:return c=u.sent(),n(c),[3,3];case 3:return[2]}}))}))}(t.data.url,e,(function(t){return postMessage({type:"quad",quad:Object(s.quadToStringQuad)(t)},null,null)}),(function(t){return postMessage({type:"err",error:t.message},null,null)}),(function(t,e){return postMessage({type:"counter",counter:t,done:e},null,null)}))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(16);class i extends n.ActorHttp{constructor(t){super(t)}async test(t){const r=t.context.get(e.KEY_CONTEXT_HTTPPROXYHANDLER);if(!r)throw new Error(`Actor ${this.name} could not find a proxy handler in the context.`);if(!await r.getProxy(t))throw new Error(`Actor ${this.name} could not determine a proxy for the given request.`);return{time:1/0}}async run(t){const r="string"==typeof t.input?t.input:t.input.url,n=t.context.get(e.KEY_CONTEXT_HTTPPROXYHANDLER),i=await this.mediatorHttp.mediate(Object.assign(Object.assign({},await n.getProxy(t)),{context:t.context.delete(e.KEY_CONTEXT_HTTPPROXYHANDLER)}));return i.url=i.headers.get("x-final-url")||r,i}}e.ActorHttpProxy=i,e.KEY_CONTEXT_HTTPPROXYHANDLER="@comunica/actor-http-proxy:httpProxyHandler"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);class i extends n.Actor{constructor(t){super(t)}static toNodeReadable(t){return r(84)(t)?t:r(85).toNodeReadable(t)}}e.ActorHttp=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(35);class i extends n.Bus{constructor(t){super(t),this.actorsIndex={}}subscribe(t){const e=this.getActorIdentifier(t)||"_undefined_";let r=this.actorsIndex[e];r||(r=this.actorsIndex[e]=[]),r.push(t),super.subscribe(t)}unsubscribe(t){const e=this.getActorIdentifier(t)||"_undefined_",r=this.actorsIndex[e];if(r){const n=r.indexOf(t);n>=0&&r.splice(n,1),0===r.length&&delete this.actorsIndex[e]}return super.unsubscribe(t)}publish(t){const e=this.getActionIdentifier(t);if(e){return(this.actorsIndex[e]||[]).concat(this.actorsIndex._undefined_||[]).map(e=>({actor:e,reply:e.test(t)}))}return super.publish(t)}getActorIdentifier(t){return this.actorIdentifierFields.reduce((t,e)=>t[e],t)}getActionIdentifier(t){return this.actionIdentifierFields.reduce((t,e)=>t[e],t)}}e.BusIndexed=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ActionObserver=class{constructor(t){r(17)(this,t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(82),i=r(36);class o{constructor(t){this.beforeActors=[],r(17)(this,t),this.bus.subscribe(this),this.beforeActors.length&&this.bus.addDependencies(this,this.beforeActors)}static getContextLogger(t){return t?t.get(i.KEY_CONTEXT_LOG):null}runObservable(t){const e=this.run(t);return this.bus.onRun(this,t,e),e}async initialize(){return!0}async deinitialize(){return!0}getDefaultLogData(t,e){return e||(e={}),e.actor=this.name,e}logTrace(t,e,r){const n=o.getContextLogger(t);n&&n.trace(e,this.getDefaultLogData(t,r))}logDebug(t,e,r){const n=o.getContextLogger(t);n&&n.debug(e,this.getDefaultLogData(t,r))}logInfo(t,e,r){const n=o.getContextLogger(t);n&&n.info(e,this.getDefaultLogData(t,r))}logWarn(t,e,r){const n=o.getContextLogger(t);n&&n.warn(e,this.getDefaultLogData(t,r))}logError(t,e,r){const n=o.getContextLogger(t);n&&n.error(e,this.getDefaultLogData(t,r))}logFatal(t,e,r){const n=o.getContextLogger(t);n&&n.fatal(e,this.getDefaultLogData(t,r))}}function s(t){return n.Map(t)}e.Actor=o,e.ActionContext=s,e.ensureActionContext=function(t){return n.Map.isMap(t)?t:s(t)}},function(t,e,r){t.exports=function(){"use strict";var t=Array.prototype.slice;function e(t,e){e&&(t.prototype=Object.create(e.prototype)),t.prototype.constructor=t}function r(t){return s(t)?t:V(t)}function n(t){return a(t)?t:z(t)}function i(t){return u(t)?t:G(t)}function o(t){return s(t)&&!c(t)?t:H(t)}function s(t){return!(!t||!t[h])}function a(t){return!(!t||!t[f])}function u(t){return!(!t||!t[d])}function c(t){return a(t)||u(t)}function l(t){return!(!t||!t[p])}e(n,r),e(i,r),e(o,r),r.isIterable=s,r.isKeyed=a,r.isIndexed=u,r.isAssociative=c,r.isOrdered=l,r.Keyed=n,r.Indexed=i,r.Set=o;var h="@@__IMMUTABLE_ITERABLE__@@",f="@@__IMMUTABLE_KEYED__@@",d="@@__IMMUTABLE_INDEXED__@@",p="@@__IMMUTABLE_ORDERED__@@",_={},g={value:!1},y={value:!1};function m(t){return t.value=!1,t}function b(t){t&&(t.value=!0)}function v(){}function w(t,e){e=e||0;for(var r=Math.max(0,t.length-e),n=new Array(r),i=0;i<r;i++)n[i]=t[i+e];return n}function x(t){return void 0===t.size&&(t.size=t.__iterate(S)),t.size}function E(t,e){if("number"!=typeof e){var r=e>>>0;if(""+r!==e||4294967295===r)return NaN;e=r}return e<0?x(t)+e:e}function S(){return!0}function T(t,e,r){return(0===t||void 0!==r&&t<=-r)&&(void 0===e||void 0!==r&&e>=r)}function I(t,e){return C(t,e,0)}function R(t,e){return C(t,e,e)}function C(t,e,r){return void 0===t?r:t<0?Math.max(0,e+t):void 0===e?t:Math.min(e,t)}var O,A,P,N="function"==typeof Symbol&&Symbol.iterator,D=N||"@@iterator";function k(t){this.next=t}function j(t,e,r,n){var i=0===t?e:1===t?r:[e,r];return n?n.value=i:n={value:i,done:!1},n}function L(){return{value:void 0,done:!0}}function M(t){return!!B(t)}function F(t){return t&&"function"==typeof t.next}function q(t){var e=B(t);return e&&e.call(t)}function B(t){var e=t&&(N&&t[N]||t["@@iterator"]);if("function"==typeof e)return e}function U(t){return t&&"number"==typeof t.length}function V(t){return null==t?X():s(t)?t.toSeq():function(t){var e=tt(t)||"object"==typeof t&&new $(t);if(!e)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+t);return e}(t)}function z(t){return null==t?X().toKeyedSeq():s(t)?a(t)?t.toSeq():t.fromEntrySeq():Q(t)}function G(t){return null==t?X():s(t)?a(t)?t.entrySeq():t.toIndexedSeq():Z(t)}function H(t){return(null==t?X():s(t)?a(t)?t.entrySeq():t:Z(t)).toSetSeq()}function W(t){this._array=t,this.size=t.length}function $(t){var e=Object.keys(t);this._object=t,this._keys=e,this.size=e.length}function K(t){this._iterable=t,this.size=t.length||t.size}function J(t){this._iterator=t,this._iteratorCache=[]}function Y(t){return!(!t||!t["@@__IMMUTABLE_SEQ__@@"])}function X(){return O||(O=new W([]))}function Q(t){var e=Array.isArray(t)?new W(t).fromEntrySeq():F(t)?new J(t).fromEntrySeq():M(t)?new K(t).fromEntrySeq():"object"==typeof t?new $(t):void 0;if(!e)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+t);return e}function Z(t){var e=tt(t);if(!e)throw new TypeError("Expected Array or iterable object of values: "+t);return e}function tt(t){return U(t)?new W(t):F(t)?new J(t):M(t)?new K(t):void 0}function et(t,e,r,n){var i=t._cache;if(i){for(var o=i.length-1,s=0;s<=o;s++){var a=i[r?o-s:s];if(!1===e(a[1],n?a[0]:s,t))return s+1}return s}return t.__iterateUncached(e,r)}function rt(t,e,r,n){var i=t._cache;if(i){var o=i.length-1,s=0;return new k((function(){var t=i[r?o-s:s];return s++>o?{value:void 0,done:!0}:j(e,n?t[0]:s-1,t[1])}))}return t.__iteratorUncached(e,r)}function nt(t,e){return e?function t(e,r,n,i){return Array.isArray(r)?e.call(i,n,G(r).map((function(n,i){return t(e,n,i,r)}))):ot(r)?e.call(i,n,z(r).map((function(n,i){return t(e,n,i,r)}))):r}(e,t,"",{"":t}):it(t)}function it(t){return Array.isArray(t)?G(t).map(it).toList():ot(t)?z(t).map(it).toMap():t}function ot(t){return t&&(t.constructor===Object||void 0===t.constructor)}function st(t,e){if(t===e||t!=t&&e!=e)return!0;if(!t||!e)return!1;if("function"==typeof t.valueOf&&"function"==typeof e.valueOf){if((t=t.valueOf())===(e=e.valueOf())||t!=t&&e!=e)return!0;if(!t||!e)return!1}return!("function"!=typeof t.equals||"function"!=typeof e.equals||!t.equals(e))}function at(t,e){if(t===e)return!0;if(!s(e)||void 0!==t.size&&void 0!==e.size&&t.size!==e.size||void 0!==t.__hash&&void 0!==e.__hash&&t.__hash!==e.__hash||a(t)!==a(e)||u(t)!==u(e)||l(t)!==l(e))return!1;if(0===t.size&&0===e.size)return!0;var r=!c(t);if(l(t)){var n=t.entries();return e.every((function(t,e){var i=n.next().value;return i&&st(i[1],t)&&(r||st(i[0],e))}))&&n.next().done}var i=!1;if(void 0===t.size)if(void 0===e.size)"function"==typeof t.cacheResult&&t.cacheResult();else{i=!0;var o=t;t=e,e=o}var h=!0,f=e.__iterate((function(e,n){if(r?!t.has(e):i?!st(e,t.get(n,_)):!st(t.get(n,_),e))return h=!1,!1}));return h&&t.size===f}function ut(t,e){if(!(this instanceof ut))return new ut(t,e);if(this._value=t,this.size=void 0===e?1/0:Math.max(0,e),0===this.size){if(A)return A;A=this}}function ct(t,e){if(!t)throw new Error(e)}function lt(t,e,r){if(!(this instanceof lt))return new lt(t,e,r);if(ct(0!==r,"Cannot step a Range by 0"),t=t||0,void 0===e&&(e=1/0),r=void 0===r?1:Math.abs(r),e<t&&(r=-r),this._start=t,this._end=e,this._step=r,this.size=Math.max(0,Math.ceil((e-t)/r-1)+1),0===this.size){if(P)return P;P=this}}function ht(){throw TypeError("Abstract")}function ft(){}function dt(){}function pt(){}k.prototype.toString=function(){return"[Iterator]"},k.KEYS=0,k.VALUES=1,k.ENTRIES=2,k.prototype.inspect=k.prototype.toSource=function(){return this.toString()},k.prototype[D]=function(){return this},e(V,r),V.of=function(){return V(arguments)},V.prototype.toSeq=function(){return this},V.prototype.toString=function(){return this.__toString("Seq {","}")},V.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},V.prototype.__iterate=function(t,e){return et(this,t,e,!0)},V.prototype.__iterator=function(t,e){return rt(this,t,e,!0)},e(z,V),z.prototype.toKeyedSeq=function(){return this},e(G,V),G.of=function(){return G(arguments)},G.prototype.toIndexedSeq=function(){return this},G.prototype.toString=function(){return this.__toString("Seq [","]")},G.prototype.__iterate=function(t,e){return et(this,t,e,!1)},G.prototype.__iterator=function(t,e){return rt(this,t,e,!1)},e(H,V),H.of=function(){return H(arguments)},H.prototype.toSetSeq=function(){return this},V.isSeq=Y,V.Keyed=z,V.Set=H,V.Indexed=G,V.prototype["@@__IMMUTABLE_SEQ__@@"]=!0,e(W,G),W.prototype.get=function(t,e){return this.has(t)?this._array[E(this,t)]:e},W.prototype.__iterate=function(t,e){for(var r=this._array,n=r.length-1,i=0;i<=n;i++)if(!1===t(r[e?n-i:i],i,this))return i+1;return i},W.prototype.__iterator=function(t,e){var r=this._array,n=r.length-1,i=0;return new k((function(){return i>n?{value:void 0,done:!0}:j(t,i,r[e?n-i++:i++])}))},e($,z),$.prototype.get=function(t,e){return void 0===e||this.has(t)?this._object[t]:e},$.prototype.has=function(t){return this._object.hasOwnProperty(t)},$.prototype.__iterate=function(t,e){for(var r=this._object,n=this._keys,i=n.length-1,o=0;o<=i;o++){var s=n[e?i-o:o];if(!1===t(r[s],s,this))return o+1}return o},$.prototype.__iterator=function(t,e){var r=this._object,n=this._keys,i=n.length-1,o=0;return new k((function(){var s=n[e?i-o:o];return o++>i?{value:void 0,done:!0}:j(t,s,r[s])}))},$.prototype[p]=!0,e(K,G),K.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);var r=q(this._iterable),n=0;if(F(r))for(var i;!(i=r.next()).done&&!1!==t(i.value,n++,this););return n},K.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var r=q(this._iterable);if(!F(r))return new k(L);var n=0;return new k((function(){var e=r.next();return e.done?e:j(t,n++,e.value)}))},e(J,G),J.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);for(var r,n=this._iterator,i=this._iteratorCache,o=0;o<i.length;)if(!1===t(i[o],o++,this))return o;for(;!(r=n.next()).done;){var s=r.value;if(i[o]=s,!1===t(s,o++,this))break}return o},J.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var r=this._iterator,n=this._iteratorCache,i=0;return new k((function(){if(i>=n.length){var e=r.next();if(e.done)return e;n[i]=e.value}return j(t,i,n[i++])}))},e(ut,G),ut.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},ut.prototype.get=function(t,e){return this.has(t)?this._value:e},ut.prototype.includes=function(t){return st(this._value,t)},ut.prototype.slice=function(t,e){var r=this.size;return T(t,e,r)?this:new ut(this._value,R(e,r)-I(t,r))},ut.prototype.reverse=function(){return this},ut.prototype.indexOf=function(t){return st(this._value,t)?0:-1},ut.prototype.lastIndexOf=function(t){return st(this._value,t)?this.size:-1},ut.prototype.__iterate=function(t,e){for(var r=0;r<this.size;r++)if(!1===t(this._value,r,this))return r+1;return r},ut.prototype.__iterator=function(t,e){var r=this,n=0;return new k((function(){return n<r.size?j(t,n++,r._value):{value:void 0,done:!0}}))},ut.prototype.equals=function(t){return t instanceof ut?st(this._value,t._value):at(t)},e(lt,G),lt.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},lt.prototype.get=function(t,e){return this.has(t)?this._start+E(this,t)*this._step:e},lt.prototype.includes=function(t){var e=(t-this._start)/this._step;return e>=0&&e<this.size&&e===Math.floor(e)},lt.prototype.slice=function(t,e){return T(t,e,this.size)?this:(t=I(t,this.size),(e=R(e,this.size))<=t?new lt(0,0):new lt(this.get(t,this._end),this.get(e,this._end),this._step))},lt.prototype.indexOf=function(t){var e=t-this._start;if(e%this._step==0){var r=e/this._step;if(r>=0&&r<this.size)return r}return-1},lt.prototype.lastIndexOf=function(t){return this.indexOf(t)},lt.prototype.__iterate=function(t,e){for(var r=this.size-1,n=this._step,i=e?this._start+r*n:this._start,o=0;o<=r;o++){if(!1===t(i,o,this))return o+1;i+=e?-n:n}return o},lt.prototype.__iterator=function(t,e){var r=this.size-1,n=this._step,i=e?this._start+r*n:this._start,o=0;return new k((function(){var s=i;return i+=e?-n:n,o>r?{value:void 0,done:!0}:j(t,o++,s)}))},lt.prototype.equals=function(t){return t instanceof lt?this._start===t._start&&this._end===t._end&&this._step===t._step:at(this,t)},e(ht,r),e(ft,ht),e(dt,ht),e(pt,ht),ht.Keyed=ft,ht.Indexed=dt,ht.Set=pt;var _t="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(t,e){var r=65535&(t|=0),n=65535&(e|=0);return r*n+((t>>>16)*n+r*(e>>>16)<<16>>>0)|0};function gt(t){return t>>>1&1073741824|3221225471&t}function yt(t){if(!1===t||null==t)return 0;if("function"==typeof t.valueOf&&(!1===(t=t.valueOf())||null==t))return 0;if(!0===t)return 1;var e=typeof t;if("number"===e){if(t!=t||t===1/0)return 0;var r=0|t;for(r!==t&&(r^=4294967295*t);t>4294967295;)r^=t/=4294967295;return gt(r)}if("string"===e)return t.length>Tt?function(t){var e=Ct[t];return void 0===e&&(e=mt(t),Rt===It&&(Rt=0,Ct={}),Rt++,Ct[t]=e),e}(t):mt(t);if("function"==typeof t.hashCode)return t.hashCode();if("object"===e)return function(t){var e;if(xt&&void 0!==(e=bt.get(t)))return e;if(void 0!==(e=t[St]))return e;if(!wt){if(void 0!==(e=t.propertyIsEnumerable&&t.propertyIsEnumerable[St]))return e;if(void 0!==(e=function(t){if(t&&t.nodeType>0)switch(t.nodeType){case 1:return t.uniqueID;case 9:return t.documentElement&&t.documentElement.uniqueID}}(t)))return e}if(e=++Et,1073741824&Et&&(Et=0),xt)bt.set(t,e);else{if(void 0!==vt&&!1===vt(t))throw new Error("Non-extensible objects are not allowed as keys.");if(wt)Object.defineProperty(t,St,{enumerable:!1,configurable:!1,writable:!1,value:e});else if(void 0!==t.propertyIsEnumerable&&t.propertyIsEnumerable===t.constructor.prototype.propertyIsEnumerable)t.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},t.propertyIsEnumerable[St]=e;else{if(void 0===t.nodeType)throw new Error("Unable to set a non-enumerable property on object.");t[St]=e}}return e}(t);if("function"==typeof t.toString)return mt(t.toString());throw new Error("Value type "+e+" cannot be hashed.")}function mt(t){for(var e=0,r=0;r<t.length;r++)e=31*e+t.charCodeAt(r)|0;return gt(e)}var bt,vt=Object.isExtensible,wt=function(){try{return Object.defineProperty({},"@",{}),!0}catch(t){return!1}}(),xt="function"==typeof WeakMap;xt&&(bt=new WeakMap);var Et=0,St="__immutablehash__";"function"==typeof Symbol&&(St=Symbol(St));var Tt=16,It=255,Rt=0,Ct={};function Ot(t){ct(t!==1/0,"Cannot perform this action with an infinite size.")}function At(t){return null==t?Gt():Pt(t)&&!l(t)?t:Gt().withMutations((function(e){var r=n(t);Ot(r.size),r.forEach((function(t,r){return e.set(r,t)}))}))}function Pt(t){return!(!t||!t[Dt])}e(At,ft),At.of=function(){var e=t.call(arguments,0);return Gt().withMutations((function(t){for(var r=0;r<e.length;r+=2){if(r+1>=e.length)throw new Error("Missing value for key: "+e[r]);t.set(e[r],e[r+1])}}))},At.prototype.toString=function(){return this.__toString("Map {","}")},At.prototype.get=function(t,e){return this._root?this._root.get(0,void 0,t,e):e},At.prototype.set=function(t,e){return Ht(this,t,e)},At.prototype.setIn=function(t,e){return this.updateIn(t,_,(function(){return e}))},At.prototype.remove=function(t){return Ht(this,t,_)},At.prototype.deleteIn=function(t){return this.updateIn(t,(function(){return _}))},At.prototype.update=function(t,e,r){return 1===arguments.length?t(this):this.updateIn([t],e,r)},At.prototype.updateIn=function(t,e,r){r||(r=e,e=void 0);var n=function t(e,r,n,i){var o=e===_,s=r.next();if(s.done){var a=o?n:e,u=i(a);return u===a?e:u}ct(o||e&&e.set,"invalid keyPath");var c=s.value,l=o?_:e.get(c,_),h=t(l,r,n,i);return h===l?e:h===_?e.remove(c):(o?Gt():e).set(c,h)}(this,Je(t),e,r);return n===_?void 0:n},At.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Gt()},At.prototype.merge=function(){return Jt(this,void 0,arguments)},At.prototype.mergeWith=function(e){var r=t.call(arguments,1);return Jt(this,e,r)},At.prototype.mergeIn=function(e){var r=t.call(arguments,1);return this.updateIn(e,Gt(),(function(t){return"function"==typeof t.merge?t.merge.apply(t,r):r[r.length-1]}))},At.prototype.mergeDeep=function(){return Jt(this,Yt,arguments)},At.prototype.mergeDeepWith=function(e){var r=t.call(arguments,1);return Jt(this,Xt(e),r)},At.prototype.mergeDeepIn=function(e){var r=t.call(arguments,1);return this.updateIn(e,Gt(),(function(t){return"function"==typeof t.mergeDeep?t.mergeDeep.apply(t,r):r[r.length-1]}))},At.prototype.sort=function(t){return we(Fe(this,t))},At.prototype.sortBy=function(t,e){return we(Fe(this,e,t))},At.prototype.withMutations=function(t){var e=this.asMutable();return t(e),e.wasAltered()?e.__ensureOwner(this.__ownerID):this},At.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new v)},At.prototype.asImmutable=function(){return this.__ensureOwner()},At.prototype.wasAltered=function(){return this.__altered},At.prototype.__iterator=function(t,e){return new Bt(this,t,e)},At.prototype.__iterate=function(t,e){var r=this,n=0;return this._root&&this._root.iterate((function(e){return n++,t(e[1],e[0],r)}),e),n},At.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?zt(this.size,this._root,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},At.isMap=Pt;var Nt,Dt="@@__IMMUTABLE_MAP__@@",kt=At.prototype;function jt(t,e){this.ownerID=t,this.entries=e}function Lt(t,e,r){this.ownerID=t,this.bitmap=e,this.nodes=r}function Mt(t,e,r){this.ownerID=t,this.count=e,this.nodes=r}function Ft(t,e,r){this.ownerID=t,this.keyHash=e,this.entries=r}function qt(t,e,r){this.ownerID=t,this.keyHash=e,this.entry=r}function Bt(t,e,r){this._type=e,this._reverse=r,this._stack=t._root&&Vt(t._root)}function Ut(t,e){return j(t,e[0],e[1])}function Vt(t,e){return{node:t,index:0,__prev:e}}function zt(t,e,r,n){var i=Object.create(kt);return i.size=t,i._root=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function Gt(){return Nt||(Nt=zt(0))}function Ht(t,e,r){var n,i;if(t._root){var o=m(g),s=m(y);if(n=Wt(t._root,t.__ownerID,0,void 0,e,r,o,s),!s.value)return t;i=t.size+(o.value?r===_?-1:1:0)}else{if(r===_)return t;i=1,n=new jt(t.__ownerID,[[e,r]])}return t.__ownerID?(t.size=i,t._root=n,t.__hash=void 0,t.__altered=!0,t):n?zt(i,n):Gt()}function Wt(t,e,r,n,i,o,s,a){return t?t.update(e,r,n,i,o,s,a):o===_?t:(b(a),b(s),new qt(e,n,[i,o]))}function $t(t){return t.constructor===qt||t.constructor===Ft}function Kt(t,e,r,n,i){if(t.keyHash===n)return new Ft(e,n,[t.entry,i]);var o,s=31&(0===r?t.keyHash:t.keyHash>>>r),a=31&(0===r?n:n>>>r);return new Lt(e,1<<s|1<<a,s===a?[Kt(t,e,r+5,n,i)]:(o=new qt(e,n,i),s<a?[t,o]:[o,t]))}function Jt(t,e,r){for(var i=[],o=0;o<r.length;o++){var a=r[o],u=n(a);s(a)||(u=u.map((function(t){return nt(t)}))),i.push(u)}return Qt(t,e,i)}function Yt(t,e,r){return t&&t.mergeDeep&&s(e)?t.mergeDeep(e):st(t,e)?t:e}function Xt(t){return function(e,r,n){if(e&&e.mergeDeepWith&&s(r))return e.mergeDeepWith(t,r);var i=t(e,r,n);return st(e,i)?e:i}}function Qt(t,e,r){return 0===(r=r.filter((function(t){return 0!==t.size}))).length?t:0!==t.size||t.__ownerID||1!==r.length?t.withMutations((function(t){for(var n=e?function(r,n){t.update(n,_,(function(t){return t===_?r:e(t,r,n)}))}:function(e,r){t.set(r,e)},i=0;i<r.length;i++)r[i].forEach(n)})):t.constructor(r[0])}function Zt(t){return t=(t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135,t+=t>>8,127&(t+=t>>16)}function te(t,e,r,n){var i=n?t:w(t);return i[e]=r,i}kt[Dt]=!0,kt.delete=kt.remove,kt.removeIn=kt.deleteIn,jt.prototype.get=function(t,e,r,n){for(var i=this.entries,o=0,s=i.length;o<s;o++)if(st(r,i[o][0]))return i[o][1];return n},jt.prototype.update=function(t,e,r,n,i,o,s){for(var a=i===_,u=this.entries,c=0,l=u.length;c<l&&!st(n,u[c][0]);c++);var h=c<l;if(h?u[c][1]===i:a)return this;if(b(s),(a||!h)&&b(o),!a||1!==u.length){if(!h&&!a&&u.length>=ee)return function(t,e,r,n){t||(t=new v);for(var i=new qt(t,yt(r),[r,n]),o=0;o<e.length;o++){var s=e[o];i=i.update(t,0,void 0,s[0],s[1])}return i}(t,u,n,i);var f=t&&t===this.ownerID,d=f?u:w(u);return h?a?c===l-1?d.pop():d[c]=d.pop():d[c]=[n,i]:d.push([n,i]),f?(this.entries=d,this):new jt(t,d)}},Lt.prototype.get=function(t,e,r,n){void 0===e&&(e=yt(r));var i=1<<(31&(0===t?e:e>>>t)),o=this.bitmap;return 0==(o&i)?n:this.nodes[Zt(o&i-1)].get(t+5,e,r,n)},Lt.prototype.update=function(t,e,r,n,i,o,s){void 0===r&&(r=yt(n));var a=31&(0===e?r:r>>>e),u=1<<a,c=this.bitmap,l=0!=(c&u);if(!l&&i===_)return this;var h=Zt(c&u-1),f=this.nodes,d=l?f[h]:void 0,p=Wt(d,t,e+5,r,n,i,o,s);if(p===d)return this;if(!l&&p&&f.length>=re)return function(t,e,r,n,i){for(var o=0,s=new Array(32),a=0;0!==r;a++,r>>>=1)s[a]=1&r?e[o++]:void 0;return s[n]=i,new Mt(t,o+1,s)}(t,f,c,a,p);if(l&&!p&&2===f.length&&$t(f[1^h]))return f[1^h];if(l&&p&&1===f.length&&$t(p))return p;var g=t&&t===this.ownerID,y=l?p?c:c^u:c|u,m=l?p?te(f,h,p,g):function(t,e,r){var n=t.length-1;if(r&&e===n)return t.pop(),t;for(var i=new Array(n),o=0,s=0;s<n;s++)s===e&&(o=1),i[s]=t[s+o];return i}(f,h,g):function(t,e,r,n){var i=t.length+1;if(n&&e+1===i)return t[e]=r,t;for(var o=new Array(i),s=0,a=0;a<i;a++)a===e?(o[a]=r,s=-1):o[a]=t[a+s];return o}(f,h,p,g);return g?(this.bitmap=y,this.nodes=m,this):new Lt(t,y,m)},Mt.prototype.get=function(t,e,r,n){void 0===e&&(e=yt(r));var i=31&(0===t?e:e>>>t),o=this.nodes[i];return o?o.get(t+5,e,r,n):n},Mt.prototype.update=function(t,e,r,n,i,o,s){void 0===r&&(r=yt(n));var a=31&(0===e?r:r>>>e),u=i===_,c=this.nodes,l=c[a];if(u&&!l)return this;var h=Wt(l,t,e+5,r,n,i,o,s);if(h===l)return this;var f=this.count;if(l){if(!h&&--f<ne)return function(t,e,r,n){for(var i=0,o=0,s=new Array(r),a=0,u=1,c=e.length;a<c;a++,u<<=1){var l=e[a];void 0!==l&&a!==n&&(i|=u,s[o++]=l)}return new Lt(t,i,s)}(t,c,f,a)}else f++;var d=t&&t===this.ownerID,p=te(c,a,h,d);return d?(this.count=f,this.nodes=p,this):new Mt(t,f,p)},Ft.prototype.get=function(t,e,r,n){for(var i=this.entries,o=0,s=i.length;o<s;o++)if(st(r,i[o][0]))return i[o][1];return n},Ft.prototype.update=function(t,e,r,n,i,o,s){void 0===r&&(r=yt(n));var a=i===_;if(r!==this.keyHash)return a?this:(b(s),b(o),Kt(this,t,e,r,[n,i]));for(var u=this.entries,c=0,l=u.length;c<l&&!st(n,u[c][0]);c++);var h=c<l;if(h?u[c][1]===i:a)return this;if(b(s),(a||!h)&&b(o),a&&2===l)return new qt(t,this.keyHash,u[1^c]);var f=t&&t===this.ownerID,d=f?u:w(u);return h?a?c===l-1?d.pop():d[c]=d.pop():d[c]=[n,i]:d.push([n,i]),f?(this.entries=d,this):new Ft(t,this.keyHash,d)},qt.prototype.get=function(t,e,r,n){return st(r,this.entry[0])?this.entry[1]:n},qt.prototype.update=function(t,e,r,n,i,o,s){var a=i===_,u=st(n,this.entry[0]);return(u?i===this.entry[1]:a)?this:(b(s),a?void b(o):u?t&&t===this.ownerID?(this.entry[1]=i,this):new qt(t,this.keyHash,[n,i]):(b(o),Kt(this,t,e,yt(n),[n,i])))},jt.prototype.iterate=Ft.prototype.iterate=function(t,e){for(var r=this.entries,n=0,i=r.length-1;n<=i;n++)if(!1===t(r[e?i-n:n]))return!1},Lt.prototype.iterate=Mt.prototype.iterate=function(t,e){for(var r=this.nodes,n=0,i=r.length-1;n<=i;n++){var o=r[e?i-n:n];if(o&&!1===o.iterate(t,e))return!1}},qt.prototype.iterate=function(t,e){return t(this.entry)},e(Bt,k),Bt.prototype.next=function(){for(var t=this._type,e=this._stack;e;){var r,n=e.node,i=e.index++;if(n.entry){if(0===i)return Ut(t,n.entry)}else if(n.entries){if(i<=(r=n.entries.length-1))return Ut(t,n.entries[this._reverse?r-i:i])}else if(i<=(r=n.nodes.length-1)){var o=n.nodes[this._reverse?r-i:i];if(o){if(o.entry)return Ut(t,o.entry);e=this._stack=Vt(o,e)}continue}e=this._stack=this._stack.__prev}return{value:void 0,done:!0}};var ee=8,re=16,ne=8;function ie(t){var e=pe();if(null==t)return e;if(oe(t))return t;var r=i(t),n=r.size;return 0===n?e:(Ot(n),n>0&&n<32?de(0,n,5,null,new ue(r.toArray())):e.withMutations((function(t){t.setSize(n),r.forEach((function(e,r){return t.set(r,e)}))})))}function oe(t){return!(!t||!t[se])}e(ie,dt),ie.of=function(){return this(arguments)},ie.prototype.toString=function(){return this.__toString("List [","]")},ie.prototype.get=function(t,e){if((t=E(this,t))>=0&&t<this.size){var r=ye(this,t+=this._origin);return r&&r.array[31&t]}return e},ie.prototype.set=function(t,e){return function(t,e,r){if((e=E(t,e))!=e)return t;if(e>=t.size||e<0)return t.withMutations((function(t){e<0?me(t,e).set(0,r):me(t,0,e+1).set(e,r)}));e+=t._origin;var n=t._tail,i=t._root,o=m(y);return e>=ve(t._capacity)?n=_e(n,t.__ownerID,0,e,r,o):i=_e(i,t.__ownerID,t._level,e,r,o),o.value?t.__ownerID?(t._root=i,t._tail=n,t.__hash=void 0,t.__altered=!0,t):de(t._origin,t._capacity,t._level,i,n):t}(this,t,e)},ie.prototype.remove=function(t){return this.has(t)?0===t?this.shift():t===this.size-1?this.pop():this.splice(t,1):this},ie.prototype.insert=function(t,e){return this.splice(t,0,e)},ie.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=5,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):pe()},ie.prototype.push=function(){var t=arguments,e=this.size;return this.withMutations((function(r){me(r,0,e+t.length);for(var n=0;n<t.length;n++)r.set(e+n,t[n])}))},ie.prototype.pop=function(){return me(this,0,-1)},ie.prototype.unshift=function(){var t=arguments;return this.withMutations((function(e){me(e,-t.length);for(var r=0;r<t.length;r++)e.set(r,t[r])}))},ie.prototype.shift=function(){return me(this,1)},ie.prototype.merge=function(){return be(this,void 0,arguments)},ie.prototype.mergeWith=function(e){var r=t.call(arguments,1);return be(this,e,r)},ie.prototype.mergeDeep=function(){return be(this,Yt,arguments)},ie.prototype.mergeDeepWith=function(e){var r=t.call(arguments,1);return be(this,Xt(e),r)},ie.prototype.setSize=function(t){return me(this,0,t)},ie.prototype.slice=function(t,e){var r=this.size;return T(t,e,r)?this:me(this,I(t,r),R(e,r))},ie.prototype.__iterator=function(t,e){var r=0,n=fe(this,e);return new k((function(){var e=n();return e===he?{value:void 0,done:!0}:j(t,r++,e)}))},ie.prototype.__iterate=function(t,e){for(var r,n=0,i=fe(this,e);(r=i())!==he&&!1!==t(r,n++,this););return n},ie.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?de(this._origin,this._capacity,this._level,this._root,this._tail,t,this.__hash):(this.__ownerID=t,this)},ie.isList=oe;var se="@@__IMMUTABLE_LIST__@@",ae=ie.prototype;function ue(t,e){this.array=t,this.ownerID=e}ae[se]=!0,ae.delete=ae.remove,ae.setIn=kt.setIn,ae.deleteIn=ae.removeIn=kt.removeIn,ae.update=kt.update,ae.updateIn=kt.updateIn,ae.mergeIn=kt.mergeIn,ae.mergeDeepIn=kt.mergeDeepIn,ae.withMutations=kt.withMutations,ae.asMutable=kt.asMutable,ae.asImmutable=kt.asImmutable,ae.wasAltered=kt.wasAltered,ue.prototype.removeBefore=function(t,e,r){if(r===e?1<<e:0===this.array.length)return this;var n=r>>>e&31;if(n>=this.array.length)return new ue([],t);var i,o=0===n;if(e>0){var s=this.array[n];if((i=s&&s.removeBefore(t,e-5,r))===s&&o)return this}if(o&&!i)return this;var a=ge(this,t);if(!o)for(var u=0;u<n;u++)a.array[u]=void 0;return i&&(a.array[n]=i),a},ue.prototype.removeAfter=function(t,e,r){if(r===(e?1<<e:0)||0===this.array.length)return this;var n,i=r-1>>>e&31;if(i>=this.array.length)return this;if(e>0){var o=this.array[i];if((n=o&&o.removeAfter(t,e-5,r))===o&&i===this.array.length-1)return this}var s=ge(this,t);return s.array.splice(i+1),n&&(s.array[i]=n),s};var ce,le,he={};function fe(t,e){var r=t._origin,n=t._capacity,i=ve(n),o=t._tail;return s(t._root,t._level,0);function s(t,a,u){return 0===a?function(t,s){var a=s===i?o&&o.array:t&&t.array,u=s>r?0:r-s,c=n-s;return c>32&&(c=32),function(){if(u===c)return he;var t=e?--c:u++;return a&&a[t]}}(t,u):function(t,i,o){var a,u=t&&t.array,c=o>r?0:r-o>>i,l=1+(n-o>>i);return l>32&&(l=32),function(){for(;;){if(a){var t=a();if(t!==he)return t;a=null}if(c===l)return he;var r=e?--l:c++;a=s(u&&u[r],i-5,o+(r<<i))}}}(t,a,u)}}function de(t,e,r,n,i,o,s){var a=Object.create(ae);return a.size=e-t,a._origin=t,a._capacity=e,a._level=r,a._root=n,a._tail=i,a.__ownerID=o,a.__hash=s,a.__altered=!1,a}function pe(){return ce||(ce=de(0,0,5))}function _e(t,e,r,n,i,o){var s,a=n>>>r&31,u=t&&a<t.array.length;if(!u&&void 0===i)return t;if(r>0){var c=t&&t.array[a],l=_e(c,e,r-5,n,i,o);return l===c?t:((s=ge(t,e)).array[a]=l,s)}return u&&t.array[a]===i?t:(b(o),s=ge(t,e),void 0===i&&a===s.array.length-1?s.array.pop():s.array[a]=i,s)}function ge(t,e){return e&&t&&e===t.ownerID?t:new ue(t?t.array.slice():[],e)}function ye(t,e){if(e>=ve(t._capacity))return t._tail;if(e<1<<t._level+5){for(var r=t._root,n=t._level;r&&n>0;)r=r.array[e>>>n&31],n-=5;return r}}function me(t,e,r){void 0!==e&&(e|=0),void 0!==r&&(r|=0);var n=t.__ownerID||new v,i=t._origin,o=t._capacity,s=i+e,a=void 0===r?o:r<0?o+r:i+r;if(s===i&&a===o)return t;if(s>=a)return t.clear();for(var u=t._level,c=t._root,l=0;s+l<0;)c=new ue(c&&c.array.length?[void 0,c]:[],n),l+=1<<(u+=5);l&&(s+=l,i+=l,a+=l,o+=l);for(var h=ve(o),f=ve(a);f>=1<<u+5;)c=new ue(c&&c.array.length?[c]:[],n),u+=5;var d=t._tail,p=f<h?ye(t,a-1):f>h?new ue([],n):d;if(d&&f>h&&s<o&&d.array.length){for(var _=c=ge(c,n),g=u;g>5;g-=5){var y=h>>>g&31;_=_.array[y]=ge(_.array[y],n)}_.array[h>>>5&31]=d}if(a<o&&(p=p&&p.removeAfter(n,0,a)),s>=f)s-=f,a-=f,u=5,c=null,p=p&&p.removeBefore(n,0,s);else if(s>i||f<h){for(l=0;c;){var m=s>>>u&31;if(m!==f>>>u&31)break;m&&(l+=(1<<u)*m),u-=5,c=c.array[m]}c&&s>i&&(c=c.removeBefore(n,u,s-l)),c&&f<h&&(c=c.removeAfter(n,u,f-l)),l&&(s-=l,a-=l)}return t.__ownerID?(t.size=a-s,t._origin=s,t._capacity=a,t._level=u,t._root=c,t._tail=p,t.__hash=void 0,t.__altered=!0,t):de(s,a,u,c,p)}function be(t,e,r){for(var n=[],o=0,a=0;a<r.length;a++){var u=r[a],c=i(u);c.size>o&&(o=c.size),s(u)||(c=c.map((function(t){return nt(t)}))),n.push(c)}return o>t.size&&(t=t.setSize(o)),Qt(t,e,n)}function ve(t){return t<32?0:t-1>>>5<<5}function we(t){return null==t?Se():xe(t)?t:Se().withMutations((function(e){var r=n(t);Ot(r.size),r.forEach((function(t,r){return e.set(r,t)}))}))}function xe(t){return Pt(t)&&l(t)}function Ee(t,e,r,n){var i=Object.create(we.prototype);return i.size=t?t.size:0,i._map=t,i._list=e,i.__ownerID=r,i.__hash=n,i}function Se(){return le||(le=Ee(Gt(),pe()))}function Te(t,e,r){var n,i,o=t._map,s=t._list,a=o.get(e),u=void 0!==a;if(r===_){if(!u)return t;s.size>=32&&s.size>=2*o.size?(n=(i=s.filter((function(t,e){return void 0!==t&&a!==e}))).toKeyedSeq().map((function(t){return t[0]})).flip().toMap(),t.__ownerID&&(n.__ownerID=i.__ownerID=t.__ownerID)):(n=o.remove(e),i=a===s.size-1?s.pop():s.set(a,void 0))}else if(u){if(r===s.get(a)[1])return t;n=o,i=s.set(a,[e,r])}else n=o.set(e,s.size),i=s.set(s.size,[e,r]);return t.__ownerID?(t.size=n.size,t._map=n,t._list=i,t.__hash=void 0,t):Ee(n,i)}function Ie(t,e){this._iter=t,this._useKeys=e,this.size=t.size}function Re(t){this._iter=t,this.size=t.size}function Ce(t){this._iter=t,this.size=t.size}function Oe(t){this._iter=t,this.size=t.size}function Ae(t){var e=We(t);return e._iter=t,e.size=t.size,e.flip=function(){return t},e.reverse=function(){var e=t.reverse.apply(this);return e.flip=function(){return t.reverse()},e},e.has=function(e){return t.includes(e)},e.includes=function(e){return t.has(e)},e.cacheResult=$e,e.__iterateUncached=function(e,r){var n=this;return t.__iterate((function(t,r){return!1!==e(r,t,n)}),r)},e.__iteratorUncached=function(e,r){if(2===e){var n=t.__iterator(e,r);return new k((function(){var t=n.next();if(!t.done){var e=t.value[0];t.value[0]=t.value[1],t.value[1]=e}return t}))}return t.__iterator(1===e?0:1,r)},e}function Pe(t,e,r){var n=We(t);return n.size=t.size,n.has=function(e){return t.has(e)},n.get=function(n,i){var o=t.get(n,_);return o===_?i:e.call(r,o,n,t)},n.__iterateUncached=function(n,i){var o=this;return t.__iterate((function(t,i,s){return!1!==n(e.call(r,t,i,s),i,o)}),i)},n.__iteratorUncached=function(n,i){var o=t.__iterator(2,i);return new k((function(){var i=o.next();if(i.done)return i;var s=i.value,a=s[0];return j(n,a,e.call(r,s[1],a,t),i)}))},n}function Ne(t,e){var r=We(t);return r._iter=t,r.size=t.size,r.reverse=function(){return t},t.flip&&(r.flip=function(){var e=Ae(t);return e.reverse=function(){return t.flip()},e}),r.get=function(r,n){return t.get(e?r:-1-r,n)},r.has=function(r){return t.has(e?r:-1-r)},r.includes=function(e){return t.includes(e)},r.cacheResult=$e,r.__iterate=function(e,r){var n=this;return t.__iterate((function(t,r){return e(t,r,n)}),!r)},r.__iterator=function(e,r){return t.__iterator(e,!r)},r}function De(t,e,r,n){var i=We(t);return n&&(i.has=function(n){var i=t.get(n,_);return i!==_&&!!e.call(r,i,n,t)},i.get=function(n,i){var o=t.get(n,_);return o!==_&&e.call(r,o,n,t)?o:i}),i.__iterateUncached=function(i,o){var s=this,a=0;return t.__iterate((function(t,o,u){if(e.call(r,t,o,u))return a++,i(t,n?o:a-1,s)}),o),a},i.__iteratorUncached=function(i,o){var s=t.__iterator(2,o),a=0;return new k((function(){for(;;){var o=s.next();if(o.done)return o;var u=o.value,c=u[0],l=u[1];if(e.call(r,l,c,t))return j(i,n?c:a++,l,o)}}))},i}function ke(t,e,r,n){var i=t.size;if(void 0!==e&&(e|=0),void 0!==r&&(r===1/0?r=i:r|=0),T(e,r,i))return t;var o=I(e,i),s=R(r,i);if(o!=o||s!=s)return ke(t.toSeq().cacheResult(),e,r,n);var a,u=s-o;u==u&&(a=u<0?0:u);var c=We(t);return c.size=0===a?a:t.size&&a||void 0,!n&&Y(t)&&a>=0&&(c.get=function(e,r){return(e=E(this,e))>=0&&e<a?t.get(e+o,r):r}),c.__iterateUncached=function(e,r){var i=this;if(0===a)return 0;if(r)return this.cacheResult().__iterate(e,r);var s=0,u=!0,c=0;return t.__iterate((function(t,r){if(!u||!(u=s++<o))return c++,!1!==e(t,n?r:c-1,i)&&c!==a})),c},c.__iteratorUncached=function(e,r){if(0!==a&&r)return this.cacheResult().__iterator(e,r);var i=0!==a&&t.__iterator(e,r),s=0,u=0;return new k((function(){for(;s++<o;)i.next();if(++u>a)return{value:void 0,done:!0};var t=i.next();return n||1===e?t:j(e,u-1,0===e?void 0:t.value[1],t)}))},c}function je(t,e,r,n){var i=We(t);return i.__iterateUncached=function(i,o){var s=this;if(o)return this.cacheResult().__iterate(i,o);var a=!0,u=0;return t.__iterate((function(t,o,c){if(!a||!(a=e.call(r,t,o,c)))return u++,i(t,n?o:u-1,s)})),u},i.__iteratorUncached=function(i,o){var s=this;if(o)return this.cacheResult().__iterator(i,o);var a=t.__iterator(2,o),u=!0,c=0;return new k((function(){var t,o,l;do{if((t=a.next()).done)return n||1===i?t:j(i,c++,0===i?void 0:t.value[1],t);var h=t.value;o=h[0],l=h[1],u&&(u=e.call(r,l,o,s))}while(u);return 2===i?t:j(i,o,l,t)}))},i}function Le(t,e){var r=a(t),i=[t].concat(e).map((function(t){return s(t)?r&&(t=n(t)):t=r?Q(t):Z(Array.isArray(t)?t:[t]),t})).filter((function(t){return 0!==t.size}));if(0===i.length)return t;if(1===i.length){var o=i[0];if(o===t||r&&a(o)||u(t)&&u(o))return o}var c=new W(i);return r?c=c.toKeyedSeq():u(t)||(c=c.toSetSeq()),(c=c.flatten(!0)).size=i.reduce((function(t,e){if(void 0!==t){var r=e.size;if(void 0!==r)return t+r}}),0),c}function Me(t,e,r){var n=We(t);return n.__iterateUncached=function(n,i){var o=0,a=!1;return function t(u,c){var l=this;u.__iterate((function(i,u){return(!e||c<e)&&s(i)?t(i,c+1):!1===n(i,r?u:o++,l)&&(a=!0),!a}),i)}(t,0),o},n.__iteratorUncached=function(n,i){var o=t.__iterator(n,i),a=[],u=0;return new k((function(){for(;o;){var t=o.next();if(!1===t.done){var c=t.value;if(2===n&&(c=c[1]),e&&!(a.length<e)||!s(c))return r?t:j(n,u++,c,t);a.push(o),o=c.__iterator(n,i)}else o=a.pop()}return{value:void 0,done:!0}}))},n}function Fe(t,e,r){e||(e=Ke);var n=a(t),i=0,o=t.toSeq().map((function(e,n){return[n,e,i++,r?r(e,n,t):e]})).toArray();return o.sort((function(t,r){return e(t[3],r[3])||t[2]-r[2]})).forEach(n?function(t,e){o[e].length=2}:function(t,e){o[e]=t[1]}),n?z(o):u(t)?G(o):H(o)}function qe(t,e,r){if(e||(e=Ke),r){var n=t.toSeq().map((function(e,n){return[e,r(e,n,t)]})).reduce((function(t,r){return Be(e,t[1],r[1])?r:t}));return n&&n[0]}return t.reduce((function(t,r){return Be(e,t,r)?r:t}))}function Be(t,e,r){var n=t(r,e);return 0===n&&r!==e&&(null==r||r!=r)||n>0}function Ue(t,e,n){var i=We(t);return i.size=new W(n).map((function(t){return t.size})).min(),i.__iterate=function(t,e){for(var r,n=this.__iterator(1,e),i=0;!(r=n.next()).done&&!1!==t(r.value,i++,this););return i},i.__iteratorUncached=function(t,i){var o=n.map((function(t){return t=r(t),q(i?t.reverse():t)})),s=0,a=!1;return new k((function(){var r;return a||(r=o.map((function(t){return t.next()})),a=r.some((function(t){return t.done}))),a?{value:void 0,done:!0}:j(t,s++,e.apply(null,r.map((function(t){return t.value}))))}))},i}function Ve(t,e){return Y(t)?e:t.constructor(e)}function ze(t){if(t!==Object(t))throw new TypeError("Expected [K, V] tuple: "+t)}function Ge(t){return Ot(t.size),x(t)}function He(t){return a(t)?n:u(t)?i:o}function We(t){return Object.create((a(t)?z:u(t)?G:H).prototype)}function $e(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):V.prototype.cacheResult.call(this)}function Ke(t,e){return t>e?1:t<e?-1:0}function Je(t){var e=q(t);if(!e){if(!U(t))throw new TypeError("Expected iterable or array-like: "+t);e=q(r(t))}return e}function Ye(t,e){var r,n=function(o){if(o instanceof n)return o;if(!(this instanceof n))return new n(o);if(!r){r=!0;var s=Object.keys(t);!function(t,e){try{e.forEach(tr.bind(void 0,t))}catch(t){}}(i,s),i.size=s.length,i._name=e,i._keys=s,i._defaultValues=t}this._map=At(o)},i=n.prototype=Object.create(Xe);return i.constructor=n,n}e(we,At),we.of=function(){return this(arguments)},we.prototype.toString=function(){return this.__toString("OrderedMap {","}")},we.prototype.get=function(t,e){var r=this._map.get(t);return void 0!==r?this._list.get(r)[1]:e},we.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Se()},we.prototype.set=function(t,e){return Te(this,t,e)},we.prototype.remove=function(t){return Te(this,t,_)},we.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},we.prototype.__iterate=function(t,e){var r=this;return this._list.__iterate((function(e){return e&&t(e[1],e[0],r)}),e)},we.prototype.__iterator=function(t,e){return this._list.fromEntrySeq().__iterator(t,e)},we.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t),r=this._list.__ensureOwner(t);return t?Ee(e,r,t,this.__hash):(this.__ownerID=t,this._map=e,this._list=r,this)},we.isOrderedMap=xe,we.prototype[p]=!0,we.prototype.delete=we.prototype.remove,e(Ie,z),Ie.prototype.get=function(t,e){return this._iter.get(t,e)},Ie.prototype.has=function(t){return this._iter.has(t)},Ie.prototype.valueSeq=function(){return this._iter.valueSeq()},Ie.prototype.reverse=function(){var t=this,e=Ne(this,!0);return this._useKeys||(e.valueSeq=function(){return t._iter.toSeq().reverse()}),e},Ie.prototype.map=function(t,e){var r=this,n=Pe(this,t,e);return this._useKeys||(n.valueSeq=function(){return r._iter.toSeq().map(t,e)}),n},Ie.prototype.__iterate=function(t,e){var r,n=this;return this._iter.__iterate(this._useKeys?function(e,r){return t(e,r,n)}:(r=e?Ge(this):0,function(i){return t(i,e?--r:r++,n)}),e)},Ie.prototype.__iterator=function(t,e){if(this._useKeys)return this._iter.__iterator(t,e);var r=this._iter.__iterator(1,e),n=e?Ge(this):0;return new k((function(){var i=r.next();return i.done?i:j(t,e?--n:n++,i.value,i)}))},Ie.prototype[p]=!0,e(Re,G),Re.prototype.includes=function(t){return this._iter.includes(t)},Re.prototype.__iterate=function(t,e){var r=this,n=0;return this._iter.__iterate((function(e){return t(e,n++,r)}),e)},Re.prototype.__iterator=function(t,e){var r=this._iter.__iterator(1,e),n=0;return new k((function(){var e=r.next();return e.done?e:j(t,n++,e.value,e)}))},e(Ce,H),Ce.prototype.has=function(t){return this._iter.includes(t)},Ce.prototype.__iterate=function(t,e){var r=this;return this._iter.__iterate((function(e){return t(e,e,r)}),e)},Ce.prototype.__iterator=function(t,e){var r=this._iter.__iterator(1,e);return new k((function(){var e=r.next();return e.done?e:j(t,e.value,e.value,e)}))},e(Oe,z),Oe.prototype.entrySeq=function(){return this._iter.toSeq()},Oe.prototype.__iterate=function(t,e){var r=this;return this._iter.__iterate((function(e){if(e){ze(e);var n=s(e);return t(n?e.get(1):e[1],n?e.get(0):e[0],r)}}),e)},Oe.prototype.__iterator=function(t,e){var r=this._iter.__iterator(1,e);return new k((function(){for(;;){var e=r.next();if(e.done)return e;var n=e.value;if(n){ze(n);var i=s(n);return j(t,i?n.get(0):n[0],i?n.get(1):n[1],e)}}}))},Re.prototype.cacheResult=Ie.prototype.cacheResult=Ce.prototype.cacheResult=Oe.prototype.cacheResult=$e,e(Ye,ft),Ye.prototype.toString=function(){return this.__toString(Ze(this)+" {","}")},Ye.prototype.has=function(t){return this._defaultValues.hasOwnProperty(t)},Ye.prototype.get=function(t,e){if(!this.has(t))return e;var r=this._defaultValues[t];return this._map?this._map.get(t,r):r},Ye.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var t=this.constructor;return t._empty||(t._empty=Qe(this,Gt()))},Ye.prototype.set=function(t,e){if(!this.has(t))throw new Error('Cannot set unknown key "'+t+'" on '+Ze(this));if(this._map&&!this._map.has(t)&&e===this._defaultValues[t])return this;var r=this._map&&this._map.set(t,e);return this.__ownerID||r===this._map?this:Qe(this,r)},Ye.prototype.remove=function(t){if(!this.has(t))return this;var e=this._map&&this._map.remove(t);return this.__ownerID||e===this._map?this:Qe(this,e)},Ye.prototype.wasAltered=function(){return this._map.wasAltered()},Ye.prototype.__iterator=function(t,e){var r=this;return n(this._defaultValues).map((function(t,e){return r.get(e)})).__iterator(t,e)},Ye.prototype.__iterate=function(t,e){var r=this;return n(this._defaultValues).map((function(t,e){return r.get(e)})).__iterate(t,e)},Ye.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map&&this._map.__ensureOwner(t);return t?Qe(this,e,t):(this.__ownerID=t,this._map=e,this)};var Xe=Ye.prototype;function Qe(t,e,r){var n=Object.create(Object.getPrototypeOf(t));return n._map=e,n.__ownerID=r,n}function Ze(t){return t._name||t.constructor.name||"Record"}function tr(t,e){Object.defineProperty(t,e,{get:function(){return this.get(e)},set:function(t){ct(this.__ownerID,"Cannot set on an immutable record."),this.set(e,t)}})}function er(t){return null==t?ur():rr(t)&&!l(t)?t:ur().withMutations((function(e){var r=o(t);Ot(r.size),r.forEach((function(t){return e.add(t)}))}))}function rr(t){return!(!t||!t[ir])}Xe.delete=Xe.remove,Xe.deleteIn=Xe.removeIn=kt.removeIn,Xe.merge=kt.merge,Xe.mergeWith=kt.mergeWith,Xe.mergeIn=kt.mergeIn,Xe.mergeDeep=kt.mergeDeep,Xe.mergeDeepWith=kt.mergeDeepWith,Xe.mergeDeepIn=kt.mergeDeepIn,Xe.setIn=kt.setIn,Xe.update=kt.update,Xe.updateIn=kt.updateIn,Xe.withMutations=kt.withMutations,Xe.asMutable=kt.asMutable,Xe.asImmutable=kt.asImmutable,e(er,pt),er.of=function(){return this(arguments)},er.fromKeys=function(t){return this(n(t).keySeq())},er.prototype.toString=function(){return this.__toString("Set {","}")},er.prototype.has=function(t){return this._map.has(t)},er.prototype.add=function(t){return sr(this,this._map.set(t,!0))},er.prototype.remove=function(t){return sr(this,this._map.remove(t))},er.prototype.clear=function(){return sr(this,this._map.clear())},er.prototype.union=function(){var e=t.call(arguments,0);return 0===(e=e.filter((function(t){return 0!==t.size}))).length?this:0!==this.size||this.__ownerID||1!==e.length?this.withMutations((function(t){for(var r=0;r<e.length;r++)o(e[r]).forEach((function(e){return t.add(e)}))})):this.constructor(e[0])},er.prototype.intersect=function(){var e=t.call(arguments,0);if(0===e.length)return this;e=e.map((function(t){return o(t)}));var r=this;return this.withMutations((function(t){r.forEach((function(r){e.every((function(t){return t.includes(r)}))||t.remove(r)}))}))},er.prototype.subtract=function(){var e=t.call(arguments,0);if(0===e.length)return this;e=e.map((function(t){return o(t)}));var r=this;return this.withMutations((function(t){r.forEach((function(r){e.some((function(t){return t.includes(r)}))&&t.remove(r)}))}))},er.prototype.merge=function(){return this.union.apply(this,arguments)},er.prototype.mergeWith=function(e){var r=t.call(arguments,1);return this.union.apply(this,r)},er.prototype.sort=function(t){return cr(Fe(this,t))},er.prototype.sortBy=function(t,e){return cr(Fe(this,e,t))},er.prototype.wasAltered=function(){return this._map.wasAltered()},er.prototype.__iterate=function(t,e){var r=this;return this._map.__iterate((function(e,n){return t(n,n,r)}),e)},er.prototype.__iterator=function(t,e){return this._map.map((function(t,e){return e})).__iterator(t,e)},er.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t);return t?this.__make(e,t):(this.__ownerID=t,this._map=e,this)},er.isSet=rr;var nr,ir="@@__IMMUTABLE_SET__@@",or=er.prototype;function sr(t,e){return t.__ownerID?(t.size=e.size,t._map=e,t):e===t._map?t:0===e.size?t.__empty():t.__make(e)}function ar(t,e){var r=Object.create(or);return r.size=t?t.size:0,r._map=t,r.__ownerID=e,r}function ur(){return nr||(nr=ar(Gt()))}function cr(t){return null==t?pr():lr(t)?t:pr().withMutations((function(e){var r=o(t);Ot(r.size),r.forEach((function(t){return e.add(t)}))}))}function lr(t){return rr(t)&&l(t)}or[ir]=!0,or.delete=or.remove,or.mergeDeep=or.merge,or.mergeDeepWith=or.mergeWith,or.withMutations=kt.withMutations,or.asMutable=kt.asMutable,or.asImmutable=kt.asImmutable,or.__empty=ur,or.__make=ar,e(cr,er),cr.of=function(){return this(arguments)},cr.fromKeys=function(t){return this(n(t).keySeq())},cr.prototype.toString=function(){return this.__toString("OrderedSet {","}")},cr.isOrderedSet=lr;var hr,fr=cr.prototype;function dr(t,e){var r=Object.create(fr);return r.size=t?t.size:0,r._map=t,r.__ownerID=e,r}function pr(){return hr||(hr=dr(Se()))}function _r(t){return null==t?wr():gr(t)?t:wr().unshiftAll(t)}function gr(t){return!(!t||!t[mr])}fr[p]=!0,fr.__empty=pr,fr.__make=dr,e(_r,dt),_r.of=function(){return this(arguments)},_r.prototype.toString=function(){return this.__toString("Stack [","]")},_r.prototype.get=function(t,e){var r=this._head;for(t=E(this,t);r&&t--;)r=r.next;return r?r.value:e},_r.prototype.peek=function(){return this._head&&this._head.value},_r.prototype.push=function(){if(0===arguments.length)return this;for(var t=this.size+arguments.length,e=this._head,r=arguments.length-1;r>=0;r--)e={value:arguments[r],next:e};return this.__ownerID?(this.size=t,this._head=e,this.__hash=void 0,this.__altered=!0,this):vr(t,e)},_r.prototype.pushAll=function(t){if(0===(t=i(t)).size)return this;Ot(t.size);var e=this.size,r=this._head;return t.reverse().forEach((function(t){e++,r={value:t,next:r}})),this.__ownerID?(this.size=e,this._head=r,this.__hash=void 0,this.__altered=!0,this):vr(e,r)},_r.prototype.pop=function(){return this.slice(1)},_r.prototype.unshift=function(){return this.push.apply(this,arguments)},_r.prototype.unshiftAll=function(t){return this.pushAll(t)},_r.prototype.shift=function(){return this.pop.apply(this,arguments)},_r.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):wr()},_r.prototype.slice=function(t,e){if(T(t,e,this.size))return this;var r=I(t,this.size);if(R(e,this.size)!==this.size)return dt.prototype.slice.call(this,t,e);for(var n=this.size-r,i=this._head;r--;)i=i.next;return this.__ownerID?(this.size=n,this._head=i,this.__hash=void 0,this.__altered=!0,this):vr(n,i)},_r.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?vr(this.size,this._head,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},_r.prototype.__iterate=function(t,e){if(e)return this.reverse().__iterate(t);for(var r=0,n=this._head;n&&!1!==t(n.value,r++,this);)n=n.next;return r},_r.prototype.__iterator=function(t,e){if(e)return this.reverse().__iterator(t);var r=0,n=this._head;return new k((function(){if(n){var e=n.value;return n=n.next,j(t,r++,e)}return{value:void 0,done:!0}}))},_r.isStack=gr;var yr,mr="@@__IMMUTABLE_STACK__@@",br=_r.prototype;function vr(t,e,r,n){var i=Object.create(br);return i.size=t,i._head=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function wr(){return yr||(yr=vr(0))}function xr(t,e){var r=function(r){t.prototype[r]=e[r]};return Object.keys(e).forEach(r),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach(r),t}br[mr]=!0,br.withMutations=kt.withMutations,br.asMutable=kt.asMutable,br.asImmutable=kt.asImmutable,br.wasAltered=kt.wasAltered,r.Iterator=k,xr(r,{toArray:function(){Ot(this.size);var t=new Array(this.size||0);return this.valueSeq().__iterate((function(e,r){t[r]=e})),t},toIndexedSeq:function(){return new Re(this)},toJS:function(){return this.toSeq().map((function(t){return t&&"function"==typeof t.toJS?t.toJS():t})).__toJS()},toJSON:function(){return this.toSeq().map((function(t){return t&&"function"==typeof t.toJSON?t.toJSON():t})).__toJS()},toKeyedSeq:function(){return new Ie(this,!0)},toMap:function(){return At(this.toKeyedSeq())},toObject:function(){Ot(this.size);var t={};return this.__iterate((function(e,r){t[r]=e})),t},toOrderedMap:function(){return we(this.toKeyedSeq())},toOrderedSet:function(){return cr(a(this)?this.valueSeq():this)},toSet:function(){return er(a(this)?this.valueSeq():this)},toSetSeq:function(){return new Ce(this)},toSeq:function(){return u(this)?this.toIndexedSeq():a(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return _r(a(this)?this.valueSeq():this)},toList:function(){return ie(a(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(t,e){return 0===this.size?t+e:t+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+e},concat:function(){var e=t.call(arguments,0);return Ve(this,Le(this,e))},includes:function(t){return this.some((function(e){return st(e,t)}))},entries:function(){return this.__iterator(2)},every:function(t,e){Ot(this.size);var r=!0;return this.__iterate((function(n,i,o){if(!t.call(e,n,i,o))return r=!1,!1})),r},filter:function(t,e){return Ve(this,De(this,t,e,!0))},find:function(t,e,r){var n=this.findEntry(t,e);return n?n[1]:r},forEach:function(t,e){return Ot(this.size),this.__iterate(e?t.bind(e):t)},join:function(t){Ot(this.size),t=void 0!==t?""+t:",";var e="",r=!0;return this.__iterate((function(n){r?r=!1:e+=t,e+=null!=n?n.toString():""})),e},keys:function(){return this.__iterator(0)},map:function(t,e){return Ve(this,Pe(this,t,e))},reduce:function(t,e,r){var n,i;return Ot(this.size),arguments.length<2?i=!0:n=e,this.__iterate((function(e,o,s){i?(i=!1,n=e):n=t.call(r,n,e,o,s)})),n},reduceRight:function(t,e,r){var n=this.toKeyedSeq().reverse();return n.reduce.apply(n,arguments)},reverse:function(){return Ve(this,Ne(this,!0))},slice:function(t,e){return Ve(this,ke(this,t,e,!0))},some:function(t,e){return!this.every(Rr(t),e)},sort:function(t){return Ve(this,Fe(this,t))},values:function(){return this.__iterator(1)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some((function(){return!0}))},count:function(t,e){return x(t?this.toSeq().filter(t,e):this)},countBy:function(t,e){return function(t,e,r){var n=At().asMutable();return t.__iterate((function(i,o){n.update(e.call(r,i,o,t),0,(function(t){return t+1}))})),n.asImmutable()}(this,t,e)},equals:function(t){return at(this,t)},entrySeq:function(){var t=this;if(t._cache)return new W(t._cache);var e=t.toSeq().map(Ir).toIndexedSeq();return e.fromEntrySeq=function(){return t.toSeq()},e},filterNot:function(t,e){return this.filter(Rr(t),e)},findEntry:function(t,e,r){var n=r;return this.__iterate((function(r,i,o){if(t.call(e,r,i,o))return n=[i,r],!1})),n},findKey:function(t,e){var r=this.findEntry(t,e);return r&&r[0]},findLast:function(t,e,r){return this.toKeyedSeq().reverse().find(t,e,r)},findLastEntry:function(t,e,r){return this.toKeyedSeq().reverse().findEntry(t,e,r)},findLastKey:function(t,e){return this.toKeyedSeq().reverse().findKey(t,e)},first:function(){return this.find(S)},flatMap:function(t,e){return Ve(this,function(t,e,r){var n=He(t);return t.toSeq().map((function(i,o){return n(e.call(r,i,o,t))})).flatten(!0)}(this,t,e))},flatten:function(t){return Ve(this,Me(this,t,!0))},fromEntrySeq:function(){return new Oe(this)},get:function(t,e){return this.find((function(e,r){return st(r,t)}),void 0,e)},getIn:function(t,e){for(var r,n=this,i=Je(t);!(r=i.next()).done;){var o=r.value;if((n=n&&n.get?n.get(o,_):_)===_)return e}return n},groupBy:function(t,e){return function(t,e,r){var n=a(t),i=(l(t)?we():At()).asMutable();t.__iterate((function(o,s){i.update(e.call(r,o,s,t),(function(t){return(t=t||[]).push(n?[s,o]:o),t}))}));var o=He(t);return i.map((function(e){return Ve(t,o(e))}))}(this,t,e)},has:function(t){return this.get(t,_)!==_},hasIn:function(t){return this.getIn(t,_)!==_},isSubset:function(t){return t="function"==typeof t.includes?t:r(t),this.every((function(e){return t.includes(e)}))},isSuperset:function(t){return(t="function"==typeof t.isSubset?t:r(t)).isSubset(this)},keyOf:function(t){return this.findKey((function(e){return st(e,t)}))},keySeq:function(){return this.toSeq().map(Tr).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},lastKeyOf:function(t){return this.toKeyedSeq().reverse().keyOf(t)},max:function(t){return qe(this,t)},maxBy:function(t,e){return qe(this,e,t)},min:function(t){return qe(this,t?Cr(t):Pr)},minBy:function(t,e){return qe(this,e?Cr(e):Pr,t)},rest:function(){return this.slice(1)},skip:function(t){return this.slice(Math.max(0,t))},skipLast:function(t){return Ve(this,this.toSeq().reverse().skip(t).reverse())},skipWhile:function(t,e){return Ve(this,je(this,t,e,!0))},skipUntil:function(t,e){return this.skipWhile(Rr(t),e)},sortBy:function(t,e){return Ve(this,Fe(this,e,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return Ve(this,this.toSeq().reverse().take(t).reverse())},takeWhile:function(t,e){return Ve(this,function(t,e,r){var n=We(t);return n.__iterateUncached=function(n,i){var o=this;if(i)return this.cacheResult().__iterate(n,i);var s=0;return t.__iterate((function(t,i,a){return e.call(r,t,i,a)&&++s&&n(t,i,o)})),s},n.__iteratorUncached=function(n,i){var o=this;if(i)return this.cacheResult().__iterator(n,i);var s=t.__iterator(2,i),a=!0;return new k((function(){if(!a)return{value:void 0,done:!0};var t=s.next();if(t.done)return t;var i=t.value,u=i[0],c=i[1];return e.call(r,c,u,o)?2===n?t:j(n,u,c,t):(a=!1,{value:void 0,done:!0})}))},n}(this,t,e))},takeUntil:function(t,e){return this.takeWhile(Rr(t),e)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(t){if(t.size===1/0)return 0;var e=l(t),r=a(t),n=e?1:0;return function(t,e){return e=_t(e,3432918353),e=_t(e<<15|e>>>-15,461845907),e=_t(e<<13|e>>>-13,5),e=_t((e=(e+3864292196|0)^t)^e>>>16,2246822507),e=gt((e=_t(e^e>>>13,3266489909))^e>>>16)}(t.__iterate(r?e?function(t,e){n=31*n+Nr(yt(t),yt(e))|0}:function(t,e){n=n+Nr(yt(t),yt(e))|0}:e?function(t){n=31*n+yt(t)|0}:function(t){n=n+yt(t)|0}),n)}(this))}});var Er=r.prototype;Er[h]=!0,Er[D]=Er.values,Er.__toJS=Er.toArray,Er.__toStringMapper=Or,Er.inspect=Er.toSource=function(){return this.toString()},Er.chain=Er.flatMap,Er.contains=Er.includes,xr(n,{flip:function(){return Ve(this,Ae(this))},mapEntries:function(t,e){var r=this,n=0;return Ve(this,this.toSeq().map((function(i,o){return t.call(e,[o,i],n++,r)})).fromEntrySeq())},mapKeys:function(t,e){var r=this;return Ve(this,this.toSeq().flip().map((function(n,i){return t.call(e,n,i,r)})).flip())}});var Sr=n.prototype;function Tr(t,e){return e}function Ir(t,e){return[e,t]}function Rr(t){return function(){return!t.apply(this,arguments)}}function Cr(t){return function(){return-t.apply(this,arguments)}}function Or(t){return"string"==typeof t?JSON.stringify(t):String(t)}function Ar(){return w(arguments)}function Pr(t,e){return t<e?1:t>e?-1:0}function Nr(t,e){return t^e+2654435769+(t<<6)+(t>>2)|0}return Sr[f]=!0,Sr[D]=Er.entries,Sr.__toJS=Er.toObject,Sr.__toStringMapper=function(t,e){return JSON.stringify(e)+": "+Or(t)},xr(i,{toKeyedSeq:function(){return new Ie(this,!1)},filter:function(t,e){return Ve(this,De(this,t,e,!1))},findIndex:function(t,e){var r=this.findEntry(t,e);return r?r[0]:-1},indexOf:function(t){var e=this.keyOf(t);return void 0===e?-1:e},lastIndexOf:function(t){var e=this.lastKeyOf(t);return void 0===e?-1:e},reverse:function(){return Ve(this,Ne(this,!1))},slice:function(t,e){return Ve(this,ke(this,t,e,!1))},splice:function(t,e){var r=arguments.length;if(e=Math.max(0|e,0),0===r||2===r&&!e)return this;t=I(t,t<0?this.count():this.size);var n=this.slice(0,t);return Ve(this,1===r?n:n.concat(w(arguments,2),this.slice(t+e)))},findLastIndex:function(t,e){var r=this.findLastEntry(t,e);return r?r[0]:-1},first:function(){return this.get(0)},flatten:function(t){return Ve(this,Me(this,t,!1))},get:function(t,e){return(t=E(this,t))<0||this.size===1/0||void 0!==this.size&&t>this.size?e:this.find((function(e,r){return r===t}),void 0,e)},has:function(t){return(t=E(this,t))>=0&&(void 0!==this.size?this.size===1/0||t<this.size:-1!==this.indexOf(t))},interpose:function(t){return Ve(this,function(t,e){var r=We(t);return r.size=t.size&&2*t.size-1,r.__iterateUncached=function(r,n){var i=this,o=0;return t.__iterate((function(t,n){return(!o||!1!==r(e,o++,i))&&!1!==r(t,o++,i)}),n),o},r.__iteratorUncached=function(r,n){var i,o=t.__iterator(1,n),s=0;return new k((function(){return(!i||s%2)&&(i=o.next()).done?i:s%2?j(r,s++,e):j(r,s++,i.value,i)}))},r}(this,t))},interleave:function(){var t=[this].concat(w(arguments)),e=Ue(this.toSeq(),G.of,t),r=e.flatten(!0);return e.size&&(r.size=e.size*t.length),Ve(this,r)},keySeq:function(){return lt(0,this.size)},last:function(){return this.get(-1)},skipWhile:function(t,e){return Ve(this,je(this,t,e,!1))},zip:function(){var t=[this].concat(w(arguments));return Ve(this,Ue(this,Ar,t))},zipWith:function(t){var e=w(arguments);return e[0]=this,Ve(this,Ue(this,t,e))}}),i.prototype[d]=!0,i.prototype[p]=!0,xr(o,{get:function(t,e){return this.has(t)?t:e},includes:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}}),o.prototype.has=Er.includes,o.prototype.contains=o.prototype.includes,xr(z,n.prototype),xr(G,i.prototype),xr(H,o.prototype),xr(ft,n.prototype),xr(dt,i.prototype),xr(pt,o.prototype),{Iterable:r,Seq:V,Collection:ht,Map:At,OrderedMap:we,List:ie,Stack:_r,Set:er,OrderedSet:cr,Record:Ye,Range:lt,Repeat:ut,is:st,fromJS:nt}}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Mediator=class{constructor(t){r(17)(this,t)}publish(t){const e=this.bus.publish(t);if(!e.length)throw new Error("No actors are able to reply to a message in the bus "+this.bus.name);return e}async mediateActor(t){return await this.mediateWith(t,this.publish(t))}async mediate(t){return(await this.mediateActor(t)).runObservable(t)}}},function(t,e,r){"use strict";const n=t=>null!==t&&"object"==typeof t&&"function"==typeof t.pipe;n.writable=t=>n(t)&&!1!==t.writable&&"function"==typeof t._write&&"object"==typeof t._writableState,n.readable=t=>n(t)&&!1!==t.readable&&"function"==typeof t._read&&"object"==typeof t._readableState,n.duplex=t=>n.writable(t)&&n.readable(t),n.transform=t=>n.duplex(t)&&"function"==typeof t._transform&&"object"==typeof t._transformState,t.exports=n},function(t,e,r){"use strict";(function(e){r(1);const n=r(99),i=r(100);t.exports=r(42),t.exports.toNodeReadable=function(e){if(e instanceof t.exports.ReadableStream||e&&"function"==typeof e.getReader)return i.readable.webToNode(e);throw new TypeError("Expected a ReadableStream.")},t.exports.toWebReadableStream=function(t){if(n(t)&&t.readable)return i.readable.nodeToWeb(t);if(Array.isArray(t))return i.readable.arrayToWeb(t);if(e.isBuffer(t)||"string"==typeof t)return i.readable.arrayToWeb([t]);throw new TypeError("Expected a Node streams.Readable, an Array, Buffer or String.")}}).call(this,r(5).Buffer)},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=c(t),s=n[0],a=n[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),l=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[l++]=255&e);1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],s=0,a=r-i;s<a;s+=16383)o.push(l(t,s,s+16383>a?a:s+16383));1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],i[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,r){for(var i,o,s=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?i-1:0,f=r?-1:1,d=t[e+h];for(h+=f,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+t[e+h],h+=f,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+t[e+h],h+=f,l-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=c}return(d?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,c=8*o-i-1,l=(1<<c)-1,h=l>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,_=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(e*u-1)*Math.pow(2,i),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[r+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[r+d]=255&s,d+=p,s/=256,c-=8);t[r+d-p]|=128*_}},function(t,e){},function(t,e,r){"use strict";var n=r(24).Buffer,i=r(90);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var e,r,i,o=n.allocUnsafe(t>>>0),s=this.head,a=0;s;)e=s.data,r=o,i=a,e.copy(r,i),a+=s.data.length,s=s.next;return o},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,i,o,s,a,u=1,c={},l=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},n=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,n=function(t){var e=h.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):n=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),n=function(e){t.postMessage(s+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var i={callback:t,args:e};return c[u]=i,n(u),u++},f.clearImmediate=d}function d(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(void 0,r)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(4),r(9))},function(t,e,r){(function(e){function r(t){try{if(!e.localStorage)return!1}catch(t){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this,r(4))},function(t,e,r){var n=r(5),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){"use strict";t.exports=o;var n=r(41),i=Object.create(r(13));function o(t){if(!(this instanceof o))return new o(t);n.call(this,t)}i.inherits=r(10),i.inherits(o,n),o.prototype._transform=function(t,e,r){r(null,t)}},function(t,e,r){t.exports=r(25)},function(t,e,r){t.exports=r(6)},function(t,e,r){t.exports=r(23).Transform},function(t,e,r){t.exports=r(23).PassThrough},function(t,e,r){"use strict";var n=t.exports=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.pipe};n.writable=function(t){return n(t)&&!1!==t.writable&&"function"==typeof t._write&&"object"==typeof t._writableState},n.readable=function(t){return n(t)&&!1!==t.readable&&"function"==typeof t._read&&"object"==typeof t._readableState},n.duplex=function(t){return n.writable(t)&&n.readable(t)},n.transform=function(t){return n.duplex(t)&&"function"==typeof t._transform&&"object"==typeof t._transformState}},function(t,e,r){"use strict";(function(e){const n=r(1).Readable,i=r(42).ReadableStream;e.ReadableStream=e.ReadableStream||i;const o=r(101);class s extends n{constructor(t,e){super(e),this._webStream=t,this._reader=t.getReader(),this._reading=!1}_read(t){if(this._reading)return;this._reading=!0;const e=()=>{this._reader.read().then(r=>(this._doneReading&&(this._reading=!1,this._reader.releaseLock(),this._doneReading()),r.done?(this.push(null),this._reading=!1,void this._reader.releaseLock()):this.push(r.value)?e(t):(this._reading=!1,void this._reader.releaseLock())))};e()}_destroy(t,e){if(this._reading){new Promise(t=>{this._doneReading=t}).then(()=>this._handleDestroy(t,e))}else this._handleDestroy(t,e)}_handleDestroy(t,e){this._webStream.cancel(),super._destroy(t,e)}}t.exports={readable:{nodeToWeb:o,arrayToWeb:function(t){return new i({start(e){for(var r=0;r<t.length;r++)e.enqueue(t[r]);e.close()}})},webToNode:function(t){return new s(t)}}}}).call(this,r(4))},function(t,e){t.exports=function(e){if(!t.exports.WEBSTREAM_SUPPORT)throw new Error("No web ReadableStream support");var r=!1,n={};return new ReadableStream({start:function(t){for(var i in n.data=o,n.end=o,n.end=s,n.close=s,n.error=s,n)e.on(i,n[i]);function o(n){r||(t.enqueue(n),e.pause())}function s(i){if(!r){for(var o in r=!0,n)e.removeListener(o,n[o]);i?t.error(i):t.close()}}e.pause()},pull:function(){r||e.resume()},cancel:function(){for(var t in r=!0,n)e.removeListener(t,n[t]);e.push(null),e.pause(),e.destroy?e.destroy():e.close&&e.close()}})},t.exports.WEBSTREAM_SUPPORT="undefined"!=typeof ReadableStream},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ProxyHandlerStatic=class{constructor(t){this.prefixUrl=t}async getProxy(t){return{init:t.init,input:this.modifyInput(t.input)}}modifyInput(t){return"string"==typeof t?this.prefixUrl+t:new Request(this.prefixUrl+t.url,t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);e.RdfDereferencerBase=class{constructor(t){this.mediatorRdfDereference=t.mediatorRdfDereference}dereference(t,e={}){return this.mediatorRdfDereference.mediate({context:n.ActionContext(e),headers:e.headers,method:e.method,url:t})}}},function(t,e,r){const n=new(r(2).Bus)({name:"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-dereference/Bus/RdfDereference"}),i=new(r(2).Bus)({name:"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-parse/Bus/RdfParse"}),o=new(r(2).Bus)({name:"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-http/Bus/Http"}),s=new(r(2).Bus)({name:"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/bus-rdf-parse-html/Bus/RdfParseHtml"}),a=new(r(44).MediatorRace)({name:"config-sets:config-default.json#mediatorRdfDereference",bus:n}),u=new(r(106).ActorRdfParseN3)({mediaTypes:{"application/n-quads":"1.0","application/trig":"0.95","application/n-triples":"0.8","text/turtle":"0.5","text/n3":"0.35"},mediaTypeFormats:{"application/n-quads":"http://www.w3.org/ns/formats/N-Quads","application/trig":"http://www.w3.org/ns/formats/TriG","application/n-triples":"http://www.w3.org/ns/formats/N-Triples","text/turtle":"http://www.w3.org/ns/formats/Turtle","text/n3":"http://www.w3.org/ns/formats/N3"},priorityScale:"1",name:"config-sets:config-default.json#myRdfParserN3",bus:i}),c=new(r(112).ActorRdfParseRdfXml)({mediaTypes:{"application/rdf+xml":"1.0"},mediaTypeFormats:{"application/rdf+xml":"http://www.w3.org/ns/formats/RDF_XML"},priorityScale:"5.0E-1",name:"config-sets:config-default.json#myRdfParserRdfXml",bus:i}),l=new(r(124).ActorRdfParseXmlRdfa)({mediaTypes:{"application/xml":"1.0","text/xml":"1.0","image/svg+xml":"1.0"},mediaTypeFormats:{"application/xml":"http://www.w3.org/ns/formats/RDFa","text/xml":"http://www.w3.org/ns/formats/RDFa","image/svg+xml":"http://www.w3.org/ns/formats/RDFa"},priorityScale:"5.0E-1",name:"config-sets:config-default.json#myRdfParserXmlRdfa",bus:i}),h=new(r(142).MediatorCombineUnion)({field:"mediaTypes",name:"config-sets:config-default.json#mediatorRdfParseMediatypes",bus:i}),f=new(r(44).MediatorRace)({name:"config-sets:config-default.json#mediatorRdfParseHandle",bus:i}),d=new(r(145).MediatorNumber)({field:"time",type:"https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/Mediator/Number/type/TypeMin",ignoreErrors:!0,name:"config-sets:config-default.json#mediatorHttp",bus:o}),p=new(r(147).ActorHttpNative)({agentOptions:'{ "keepAlive": true, "maxSockets": 5 }',name:"config-sets:http.json#myHttpFetcher",bus:o}),_=new(r(158).ActorRdfParseHtml)({busRdfParseHtml:s,mediaTypes:{"text/html":"1.0","application/xhtml+xml":"0.9"},mediaTypeFormats:{"text/html":"http://www.w3.org/ns/formats/HTML","application/xhtml+xml":"http://www.w3.org/ns/formats/HTML"},priorityScale:"8.0E-1",name:"config-sets:config-default.json#myRdfParserHtml",bus:i}),g=new(r(160).ActorRdfParseHtmlRdfa)({name:"config-sets:config-default.json#myRdfParserHtmlRdfa",bus:s}),y=new(r(163).ActorRdfParseHtmlScript)({mediatorRdfParseMediatypes:h,mediatorRdfParseHandle:f,name:"config-sets:config-default.json#myRdfParserHtmlScript",bus:s}),m=new(r(166).ActorRdfParseJsonLd)({mediatorHttp:d,mediaTypes:{"application/ld+json":"1.0","application/json":"0.5"},mediaTypeFormats:{"application/ld+json":"http://www.w3.org/ns/formats/JSON-LD","application/json":"http://www.w3.org/ns/formats/JSON-LD"},priorityScale:"9.0E-1",name:"config-sets:config-default.json#myRdfParserJsonLd",bus:i}),b=new(r(190).ActorRdfDereferenceHttpParse)({mediatorHttp:d,mediatorRdfParseMediatypes:h,mediatorRdfParseHandle:f,maxAcceptHeaderLength:1024,maxAcceptHeaderLengthBrowser:128,mediaMappings:{ttl:"text/turtle",turtle:"text/turtle",nt:"application/n-triples",ntriples:"application/n-triples",nq:"application/n-quads",nquads:"application/n-quads",rdf:"application/rdf+xml",rdfxml:"application/rdf+xml",owl:"application/rdf+xml",n3:"text/n3",trig:"application/trig",jsonld:"application/ld+json",json:"application/json",html:"text/html",htm:"text/html",xhtml:"application/xhtml+xml",xht:"application/xhtml+xml",xml:"application/xml",svg:"image/svg+xml",svgz:"image/svg+xml"},name:"config-sets:config-default.json#myRdfDereferencerHttp",bus:n}),v=new(r(34).ActorHttpProxy)({mediatorHttp:d,name:"config-sets:http.json#myHttpProxy",bus:o,beforeActors:[p]}),w=new(r(43).RdfDereferencer)({mediatorRdfDereference:a,actors:[u,m,_,c,l,g,y,v,p,b]});t.exports=w},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);class i extends n.Mediator{constructor(t){super(t)}mediateWith(t,e){return new Promise((t,r)=>{const n=[];for(const i of e)i.reply.then(()=>{t(i.actor)}).catch(t=>{n.push(t),n.length===e.length&&r(new Error(this.name+" mediated over all rejecting actors:\n"+n.map(t=>t.toString()).join("\n")))})})}}e.MediatorRace=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(107))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(14),i=r(195);class o extends n.ActorRdfParseFixedMediaTypes{constructor(t){super(t)}async runHandle(t,e,r){t.input.on("error",t=>n.emit("error",t));const n=t.input.pipe(new i.StreamParser({baseIRI:t.baseIRI}));return{quads:n,triples:"text/turtle"===e||"application/n-triples"===e||"text/n3"===e}}}e.ActorRdfParseN3=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(45);class i extends n.ActorAbstractMediaTyped{constructor(t){super(t)}}e.ActorRdfParse=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(46);class i extends n.ActorAbstractMediaTyped{constructor(t){super(t);const e=this.priorityScale||0===this.priorityScale?this.priorityScale:1;this.mediaTypes=r(110)(this.mediaTypes,t=>t*e),this.mediaTypes=Object.freeze(this.mediaTypes),this.mediaTypeFormats=Object.freeze(this.mediaTypeFormats)}async testHandle(t,e,r){if(!(e in this.mediaTypes))throw new Error("Unrecognized media type: "+e);return await this.testHandleChecked(t,r)}async testMediaType(t){return!0}async getMediaTypes(t){return this.mediaTypes}async testMediaTypeFormats(t){return!0}async getMediaTypeFormats(t){return this.mediaTypeFormats}}e.ActorAbstractMediaTypedFixed=i},function(t,e,r){(function(t,r){var n="[object Arguments]",i="[object Map]",o="[object Object]",s="[object Set]",a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/,c=/^\./,l=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,h=/\\(\\)?/g,f=/^\[object .+?Constructor\]$/,d=/^(?:0|[1-9]\d*)$/,p={};p["[object Float32Array]"]=p["[object Float64Array]"]=p["[object Int8Array]"]=p["[object Int16Array]"]=p["[object Int32Array]"]=p["[object Uint8Array]"]=p["[object Uint8ClampedArray]"]=p["[object Uint16Array]"]=p["[object Uint32Array]"]=!0,p[n]=p["[object Array]"]=p["[object ArrayBuffer]"]=p["[object Boolean]"]=p["[object DataView]"]=p["[object Date]"]=p["[object Error]"]=p["[object Function]"]=p[i]=p["[object Number]"]=p[o]=p["[object RegExp]"]=p[s]=p["[object String]"]=p["[object WeakMap]"]=!1;var _="object"==typeof t&&t&&t.Object===Object&&t,g="object"==typeof self&&self&&self.Object===Object&&self,y=_||g||Function("return this")(),m=e&&!e.nodeType&&e,b=m&&"object"==typeof r&&r&&!r.nodeType&&r,v=b&&b.exports===m&&_.process,w=function(){try{return v&&v.binding("util")}catch(t){}}(),x=w&&w.isTypedArray;function E(t,e){for(var r=-1,n=t?t.length:0;++r<n;)if(e(t[r],r,t))return!0;return!1}function S(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function T(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function I(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var R,C,O,A=Array.prototype,P=Function.prototype,N=Object.prototype,D=y["__core-js_shared__"],k=(R=/[^.]+$/.exec(D&&D.keys&&D.keys.IE_PROTO||""))?"Symbol(src)_1."+R:"",j=P.toString,L=N.hasOwnProperty,M=N.toString,F=RegExp("^"+j.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),q=y.Symbol,B=y.Uint8Array,U=N.propertyIsEnumerable,V=A.splice,z=(C=Object.keys,O=Object,function(t){return C(O(t))}),G=xt(y,"DataView"),H=xt(y,"Map"),W=xt(y,"Promise"),$=xt(y,"Set"),K=xt(y,"WeakMap"),J=xt(Object,"create"),Y=At(G),X=At(H),Q=At(W),Z=At($),tt=At(K),et=q?q.prototype:void 0,rt=et?et.valueOf:void 0,nt=et?et.toString:void 0;function it(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function ot(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function st(t){var e=-1,r=t?t.length:0;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function at(t){var e=-1,r=t?t.length:0;for(this.__data__=new st;++e<r;)this.add(t[e])}function ut(t){this.__data__=new ot(t)}function ct(t,e){var r=kt(t)||Dt(t)?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],n=r.length,i=!!n;for(var o in t)!e&&!L.call(t,o)||i&&("length"==o||St(o,n))||r.push(o);return r}function lt(t,e){for(var r=t.length;r--;)if(Nt(t[r][0],e))return r;return-1}it.prototype.clear=function(){this.__data__=J?J(null):{}},it.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},it.prototype.get=function(t){var e=this.__data__;if(J){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return L.call(e,t)?e[t]:void 0},it.prototype.has=function(t){var e=this.__data__;return J?void 0!==e[t]:L.call(e,t)},it.prototype.set=function(t,e){return this.__data__[t]=J&&void 0===e?"__lodash_hash_undefined__":e,this},ot.prototype.clear=function(){this.__data__=[]},ot.prototype.delete=function(t){var e=this.__data__,r=lt(e,t);return!(r<0)&&(r==e.length-1?e.pop():V.call(e,r,1),!0)},ot.prototype.get=function(t){var e=this.__data__,r=lt(e,t);return r<0?void 0:e[r][1]},ot.prototype.has=function(t){return lt(this.__data__,t)>-1},ot.prototype.set=function(t,e){var r=this.__data__,n=lt(r,t);return n<0?r.push([t,e]):r[n][1]=e,this},st.prototype.clear=function(){this.__data__={hash:new it,map:new(H||ot),string:new it}},st.prototype.delete=function(t){return wt(this,t).delete(t)},st.prototype.get=function(t){return wt(this,t).get(t)},st.prototype.has=function(t){return wt(this,t).has(t)},st.prototype.set=function(t,e){return wt(this,t).set(t,e),this},at.prototype.add=at.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},at.prototype.has=function(t){return this.__data__.has(t)},ut.prototype.clear=function(){this.__data__=new ot},ut.prototype.delete=function(t){return this.__data__.delete(t)},ut.prototype.get=function(t){return this.__data__.get(t)},ut.prototype.has=function(t){return this.__data__.has(t)},ut.prototype.set=function(t,e){var r=this.__data__;if(r instanceof ot){var n=r.__data__;if(!H||n.length<199)return n.push([t,e]),this;r=this.__data__=new st(n)}return r.set(t,e),this};var ht,ft=function(t,e,r){for(var n=-1,i=Object(t),o=r(t),s=o.length;s--;){var a=o[ht?s:++n];if(!1===e(i[a],a,i))break}return t};function dt(t,e){for(var r=0,n=(e=Tt(e,t)?[e]:bt(e)).length;null!=t&&r<n;)t=t[Ot(e[r++])];return r&&r==n?t:void 0}function pt(t,e){return null!=t&&e in Object(t)}function _t(t,e,r,a,u){return t===e||(null==t||null==e||!Ft(t)&&!qt(e)?t!=t&&e!=e:function(t,e,r,a,u,c){var l=kt(t),h=kt(e),f="[object Array]",d="[object Array]";l||(f=(f=Et(t))==n?o:f);h||(d=(d=Et(e))==n?o:d);var p=f==o&&!S(t),_=d==o&&!S(e),g=f==d;if(g&&!p)return c||(c=new ut),l||Ut(t)?vt(t,e,r,a,u,c):function(t,e,r,n,o,a,u){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!n(new B(t),new B(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return Nt(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case i:var c=T;case s:var l=2&a;if(c||(c=I),t.size!=e.size&&!l)return!1;var h=u.get(t);if(h)return h==e;a|=1,u.set(t,e);var f=vt(c(t),c(e),n,o,a,u);return u.delete(t),f;case"[object Symbol]":if(rt)return rt.call(t)==rt.call(e)}return!1}(t,e,f,r,a,u,c);if(!(2&u)){var y=p&&L.call(t,"__wrapped__"),m=_&&L.call(e,"__wrapped__");if(y||m){var b=y?t.value():t,v=m?e.value():e;return c||(c=new ut),r(b,v,a,u,c)}}if(!g)return!1;return c||(c=new ut),function(t,e,r,n,i,o){var s=2&i,a=Vt(t),u=a.length,c=Vt(e).length;if(u!=c&&!s)return!1;var l=u;for(;l--;){var h=a[l];if(!(s?h in e:L.call(e,h)))return!1}var f=o.get(t);if(f&&o.get(e))return f==e;var d=!0;o.set(t,e),o.set(e,t);var p=s;for(;++l<u;){h=a[l];var _=t[h],g=e[h];if(n)var y=s?n(g,_,h,e,t,o):n(_,g,h,t,e,o);if(!(void 0===y?_===g||r(_,g,n,i,o):y)){d=!1;break}p||(p="constructor"==h)}if(d&&!p){var m=t.constructor,b=e.constructor;m!=b&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b)&&(d=!1)}return o.delete(t),o.delete(e),d}(t,e,r,a,u,c)}(t,e,_t,r,a,u))}function gt(t){return!(!Ft(t)||function(t){return!!k&&k in t}(t))&&(Lt(t)||S(t)?F:f).test(At(t))}function yt(t){return"function"==typeof t?t:null==t?zt:"object"==typeof t?kt(t)?function(t,e){if(Tt(t)&&It(e))return Rt(Ot(t),e);return function(r){var n=function(t,e,r){var n=null==t?void 0:dt(t,e);return void 0===n?r:n}(r,t);return void 0===n&&n===e?function(t,e){return null!=t&&function(t,e,r){e=Tt(e,t)?[e]:bt(e);var n,i=-1,o=e.length;for(;++i<o;){var s=Ot(e[i]);if(!(n=null!=t&&r(t,s)))break;t=t[s]}if(n)return n;return!!(o=t?t.length:0)&&Mt(o)&&St(s,o)&&(kt(t)||Dt(t))}(t,e,pt)}(r,t):_t(e,n,void 0,3)}}(t[0],t[1]):function(t){var e=function(t){var e=Vt(t),r=e.length;for(;r--;){var n=e[r],i=t[n];e[r]=[n,i,It(i)]}return e}(t);if(1==e.length&&e[0][2])return Rt(e[0][0],e[0][1]);return function(r){return r===t||function(t,e,r,n){var i=r.length,o=i,s=!n;if(null==t)return!o;for(t=Object(t);i--;){var a=r[i];if(s&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var u=(a=r[i])[0],c=t[u],l=a[1];if(s&&a[2]){if(void 0===c&&!(u in t))return!1}else{var h=new ut;if(n)var f=n(c,l,u,t,e,h);if(!(void 0===f?_t(l,c,n,3,h):f))return!1}}return!0}(r,t,e)}}(t):Tt(e=t)?(r=Ot(e),function(t){return null==t?void 0:t[r]}):function(t){return function(e){return dt(e,t)}}(e);var e,r}function mt(t){if(r=(e=t)&&e.constructor,n="function"==typeof r&&r.prototype||N,e!==n)return z(t);var e,r,n,i=[];for(var o in Object(t))L.call(t,o)&&"constructor"!=o&&i.push(o);return i}function bt(t){return kt(t)?t:Ct(t)}function vt(t,e,r,n,i,o){var s=2&i,a=t.length,u=e.length;if(a!=u&&!(s&&u>a))return!1;var c=o.get(t);if(c&&o.get(e))return c==e;var l=-1,h=!0,f=1&i?new at:void 0;for(o.set(t,e),o.set(e,t);++l<a;){var d=t[l],p=e[l];if(n)var _=s?n(p,d,l,e,t,o):n(d,p,l,t,e,o);if(void 0!==_){if(_)continue;h=!1;break}if(f){if(!E(e,(function(t,e){if(!f.has(e)&&(d===t||r(d,t,n,i,o)))return f.add(e)}))){h=!1;break}}else if(d!==p&&!r(d,p,n,i,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function wt(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function xt(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return gt(r)?r:void 0}var Et=function(t){return M.call(t)};function St(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||d.test(t))&&t>-1&&t%1==0&&t<e}function Tt(t,e){if(kt(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Bt(t))||(u.test(t)||!a.test(t)||null!=e&&t in Object(e))}function It(t){return t==t&&!Ft(t)}function Rt(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}(G&&"[object DataView]"!=Et(new G(new ArrayBuffer(1)))||H&&Et(new H)!=i||W&&"[object Promise]"!=Et(W.resolve())||$&&Et(new $)!=s||K&&"[object WeakMap]"!=Et(new K))&&(Et=function(t){var e=M.call(t),r=e==o?t.constructor:void 0,n=r?At(r):void 0;if(n)switch(n){case Y:return"[object DataView]";case X:return i;case Q:return"[object Promise]";case Z:return s;case tt:return"[object WeakMap]"}return e});var Ct=Pt((function(t){var e;t=null==(e=t)?"":function(t){if("string"==typeof t)return t;if(Bt(t))return nt?nt.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(e);var r=[];return c.test(t)&&r.push(""),t.replace(l,(function(t,e,n,i){r.push(n?i.replace(h,"$1"):e||t)})),r}));function Ot(t){if("string"==typeof t||Bt(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function At(t){if(null!=t){try{return j.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Pt(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=e?e.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var s=t.apply(this,n);return r.cache=o.set(i,s),s};return r.cache=new(Pt.Cache||st),r}function Nt(t,e){return t===e||t!=t&&e!=e}function Dt(t){return function(t){return qt(t)&&jt(t)}(t)&&L.call(t,"callee")&&(!U.call(t,"callee")||M.call(t)==n)}Pt.Cache=st;var kt=Array.isArray;function jt(t){return null!=t&&Mt(t.length)&&!Lt(t)}function Lt(t){var e=Ft(t)?M.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}function Mt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Ft(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function qt(t){return!!t&&"object"==typeof t}function Bt(t){return"symbol"==typeof t||qt(t)&&"[object Symbol]"==M.call(t)}var Ut=x?function(t){return function(e){return t(e)}}(x):function(t){return qt(t)&&Mt(t.length)&&!!p[M.call(t)]};function Vt(t){return jt(t)?ct(t):mt(t)}function zt(t){return t}r.exports=function(t,e){var r={};return e=yt(e),function(t,e){t&&ft(t,e,Vt)}(t,(function(t,n,i){r[n]=e(t,n,i)})),r}}).call(this,r(4),r(47)(t))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(45);class i extends n.ActorAbstractMediaTypedFixed{constructor(t){super(t)}async testHandleChecked(t){return!0}}e.ActorRdfParseFixedMediaTypes=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(113))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(14),i=r(114);class o extends n.ActorRdfParseFixedMediaTypes{constructor(t){super(t)}async runHandle(t,e,r){t.input.on("error",t=>n.emit("error",t));const n=t.input.pipe(new i.RdfXmlParser({baseIRI:t.baseIRI}));return{quads:n,triples:!0}}}e.ActorRdfParseRdfXml=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(115))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(11),i=r(117),o=r(1),s=r(118);class a extends o.Transform{constructor(t){super({objectMode:!0}),this.activeTagStack=[],this.nodeIds={},t&&(Object.assign(this,t),this.options=t),this.dataFactory||(this.dataFactory=r(19)),this.baseIRI||(this.baseIRI=""),this.defaultGraph||(this.defaultGraph=this.dataFactory.defaultGraph()),this.saxStream=i.createStream(this.strict,{xmlns:!1,position:this.trackPosition}),this.strict||(this.saxStream._parser.looseCase="toString"),this.attachSaxListeners()}static parseNamespace(t,e){const r={};let n=!1;for(const e in t.attributes)e.startsWith("xmlns")&&(5===e.length?(n=!0,r[""]=t.attributes[e]):":"===e.charAt(5)&&(n=!0,r[e.substr(6)]=t.attributes[e]));const i=e&&e.ns?e.ns:[a.DEFAULT_NS];return n?i.concat([r]):i}static expandPrefixedTerm(t,e,r){const n=t.indexOf(":");let i,o;n>=0?(i=t.substr(0,n),o=t.substr(n+1)):(i="",o=t);let a=null,u=null;for(let t=e.length-1;t>=0;t--){const r=e[t][i];if(r){a=r;break}u||(u=e[t][""])}if(!a){if(i&&"xmlns"!==i)throw new s.ParseError(r,`The prefix '${i}' in term '${t}' was not bound.`);a=u||""}return{prefix:i,local:o,uri:a}}static isValidIri(t){return a.IRI_REGEX.test(t)}import(t){const e=new o.PassThrough({objectMode:!0});t.on("error",t=>r.emit("error",t)),t.on("data",t=>e.write(t)),t.on("end",()=>e.emit("end"));const r=e.pipe(new a(this.options));return r}_transform(t,e,r){try{this.saxStream.write(t,e)}catch(t){return r(t)}r()}newParseError(t){return new s.ParseError(this,t)}valueToUri(t,e){return this.uriToNamedNode(n.resolve(t,e.baseIRI))}uriToNamedNode(t){if(!a.isValidIri(t))throw this.newParseError(`Invalid URI: ${t}`);return this.dataFactory.namedNode(t)}validateNcname(t){if(!a.NCNAME_MATCHER.test(t))throw this.newParseError(`Not a valid NCName: ${t}`)}attachSaxListeners(){this.saxStream.on("error",t=>this.emit("error",t)),this.saxStream.on("opentag",this.onTag.bind(this)),this.saxStream.on("text",this.onText.bind(this)),this.saxStream.on("closetag",this.onCloseTag.bind(this)),this.saxStream.on("doctype",this.onDoctype.bind(this))}onTag(t){const e=this.activeTagStack.length?this.activeTagStack[this.activeTagStack.length-1]:null;let r=u.RESOURCE;if(e&&(e.hadChildren=!0,r=e.childrenParseType),e&&e.childrenStringTags){const r=t.name;let n="";for(const e in t.attributes)n+=` ${e}="${t.attributes[e]}"`;const i=`<${`${r}${n}`}>`;e.childrenStringTags.push(i);const o={childrenStringTags:e.childrenStringTags};return o.childrenStringEmitClosingTag=`</${r}>`,void this.activeTagStack.push(o)}const n={};e?(n.language=e.language,n.baseIRI=e.baseIRI):n.baseIRI=this.baseIRI,this.activeTagStack.push(n),n.ns=a.parseNamespace(t,e),r===u.RESOURCE?this.onTagResource(t,n,e,!e):this.onTagProperty(t,n,e)}onTagResource(t,e,r,n){const i=a.expandPrefixedTerm(t.name,e.ns,this);e.childrenParseType=u.PROPERTY;let o=!0;if(i.uri===a.RDF){if(!n&&a.FORBIDDEN_NODE_ELEMENTS.indexOf(i.local)>=0)throw this.newParseError(`Illegal node element name: ${i.local}`);switch(i.local){case"RDF":e.childrenParseType=u.RESOURCE;case"Description":o=!1}}const s=[],c=[];let l=null,h=!1,f=!1,d=null;for(const n in t.attributes){const i=t.attributes[n],o=a.expandPrefixedTerm(n,e.ns,this);if(r&&o.uri===a.RDF)switch(o.local){case"about":if(l)throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${i} and ${l} where found.`);l=i;continue;case"ID":if(l)throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${i} and ${l} where found.`);this.validateNcname(i),l="#"+i,h=!0;continue;case"nodeID":if(l)throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, while ${i} and ${l} where found.`);this.validateNcname(i),l=i,f=!0;continue;case"bagID":throw this.newParseError("rdf:bagID is not supported.");case"type":d=i;continue;case"aboutEach":throw this.newParseError("rdf:aboutEach is not supported.");case"aboutEachPrefix":throw this.newParseError("rdf:aboutEachPrefix is not supported.");case"li":throw this.newParseError("rdf:li on node elements are not supported.")}else if(o.uri===a.XML){if("lang"===o.local){e.language=""===i?null:i.toLowerCase();continue}if("base"===o.local){e.baseIRI=i;continue}}"xml"!==o.prefix&&o.uri&&(s.push(this.uriToNamedNode(o.uri+o.local)),c.push(i))}if(null!==l&&(e.subject=f?this.dataFactory.blankNode(l):this.valueToUri(l,e),h&&this.claimNodeId(e.subject)),e.subject||(e.subject=this.dataFactory.blankNode()),o){const t=this.uriToNamedNode(i.uri+i.local);this.emitTriple(e.subject,this.dataFactory.namedNode(a.RDF+"type"),t,r?r.reifiedStatementId:null)}if(r){if(r.predicate)if(r.childrenCollectionSubject){const t=this.dataFactory.blankNode();this.emitTriple(r.childrenCollectionSubject,r.childrenCollectionPredicate,t,r.reifiedStatementId),this.emitTriple(t,this.dataFactory.namedNode(a.RDF+"first"),e.subject,e.reifiedStatementId),r.childrenCollectionSubject=t,r.childrenCollectionPredicate=this.dataFactory.namedNode(a.RDF+"rest")}else{this.emitTriple(r.subject,r.predicate,e.subject,r.reifiedStatementId);for(let t=0;t<r.predicateSubPredicates.length;t++)this.emitTriple(e.subject,r.predicateSubPredicates[t],r.predicateSubObjects[t],null);r.predicateSubPredicates=[],r.predicateSubObjects=[],r.predicateEmitted=!0}for(let t=0;t<s.length;t++){const n=this.dataFactory.literal(c[t],e.datatype||e.language);this.emitTriple(e.subject,s[t],n,r.reifiedStatementId)}d&&this.emitTriple(e.subject,this.dataFactory.namedNode(a.RDF+"type"),this.uriToNamedNode(d),null)}}onTagProperty(t,e,r){const n=a.expandPrefixedTerm(t.name,e.ns,this);if(e.childrenParseType=u.RESOURCE,e.subject=r.subject,n.uri===a.RDF&&"li"===n.local?(r.listItemCounter||(r.listItemCounter=1),e.predicate=this.uriToNamedNode(n.uri+"_"+r.listItemCounter++)):e.predicate=this.uriToNamedNode(n.uri+n.local),n.uri===a.RDF&&a.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(n.local)>=0)throw this.newParseError(`Illegal property element name: ${n.local}`);e.predicateSubPredicates=[],e.predicateSubObjects=[];let i=!1,o=!1,s=null,c=!0;const l=[],h=[];for(const r in t.attributes){const n=t.attributes[r],f=a.expandPrefixedTerm(r,e.ns,this);if(f.uri===a.RDF)switch(f.local){case"resource":if(s)throw this.newParseError(`Found both rdf:resource (${n}) and rdf:nodeID (${s}).`);if(i)throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${n})`);e.hadChildren=!0,s=n,c=!1;continue;case"datatype":if(o)throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${n}).`);if(i)throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${n})`);e.datatype=this.valueToUri(n,e);continue;case"nodeID":if(o)throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${n}).`);if(e.hadChildren)throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${n}).`);if(i)throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${n})`);this.validateNcname(n),e.hadChildren=!0,s=n,c=!0;continue;case"bagID":throw this.newParseError("rdf:bagID is not supported.");case"parseType":if(o)throw this.newParseError("rdf:parseType is not allowed when non-rdf:* property attributes are present");if(e.datatype)throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${e.datatype.value})`);if(s)throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${s})`);if("Resource"===n){i=!0,e.childrenParseType=u.PROPERTY;const t=this.dataFactory.blankNode();this.emitTriple(e.subject,e.predicate,t,e.reifiedStatementId),e.subject=t,e.predicate=null}else"Collection"===n?(i=!0,e.hadChildren=!0,e.childrenCollectionSubject=e.subject,e.childrenCollectionPredicate=e.predicate,c=!1):"Literal"===n&&(i=!0,e.childrenTagsToString=!0,e.childrenStringTags=[]);continue;case"ID":this.validateNcname(n),e.reifiedStatementId=this.valueToUri("#"+n,e),this.claimNodeId(e.reifiedStatementId);continue}else if(f.uri===a.XML&&"lang"===f.local){e.language=""===n?null:n.toLowerCase();continue}if("xml"!==f.prefix&&f.uri){if(i||e.datatype)throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${n}`);e.hadChildren=!0,o=!0,l.push(this.uriToNamedNode(f.uri+f.local)),h.push(this.dataFactory.literal(n,e.datatype||e.language))}}if(null!==s){const t=e.subject;e.subject=c?this.dataFactory.blankNode(s):this.valueToUri(s,e),this.emitTriple(t,e.predicate,e.subject,e.reifiedStatementId);for(let t=0;t<l.length;t++)this.emitTriple(e.subject,l[t],h[t],null);e.predicateEmitted=!0}else c&&(e.predicateSubPredicates=l,e.predicateSubObjects=h,e.predicateEmitted=!1)}emitTriple(t,e,r,n){this.push(this.dataFactory.quad(t,e,r,this.defaultGraph)),n&&(this.push(this.dataFactory.quad(n,this.dataFactory.namedNode(a.RDF+"type"),this.dataFactory.namedNode(a.RDF+"Statement"),this.defaultGraph)),this.push(this.dataFactory.quad(n,this.dataFactory.namedNode(a.RDF+"subject"),t,this.defaultGraph)),this.push(this.dataFactory.quad(n,this.dataFactory.namedNode(a.RDF+"predicate"),e,this.defaultGraph)),this.push(this.dataFactory.quad(n,this.dataFactory.namedNode(a.RDF+"object"),r,this.defaultGraph)))}claimNodeId(t){if(!this.allowDuplicateRdfIds){if(this.nodeIds[t.value])throw this.newParseError(`Found multiple occurrences of rdf:ID='${t.value}'.`);this.nodeIds[t.value]=!0}}onText(t){const e=this.activeTagStack.length?this.activeTagStack[this.activeTagStack.length-1]:null;e&&(e.childrenStringTags?e.childrenStringTags.push(t):e.predicate&&(e.text=t))}onCloseTag(){const t=this.activeTagStack.pop();if(t.childrenStringEmitClosingTag&&t.childrenStringTags.push(t.childrenStringEmitClosingTag),t.childrenTagsToString&&(t.datatype=this.dataFactory.namedNode(a.RDF+"XMLLiteral"),t.text=t.childrenStringTags.join(""),t.hadChildren=!1),t.childrenCollectionSubject)this.emitTriple(t.childrenCollectionSubject,t.childrenCollectionPredicate,this.dataFactory.namedNode(a.RDF+"nil"),t.reifiedStatementId);else if(t.predicate)if(t.hadChildren||t.childrenParseType===u.PROPERTY){if(!t.predicateEmitted){const e=this.dataFactory.blankNode();this.emitTriple(t.subject,t.predicate,e,t.reifiedStatementId);for(let r=0;r<t.predicateSubPredicates.length;r++)this.emitTriple(e,t.predicateSubPredicates[r],t.predicateSubObjects[r],null)}}else this.emitTriple(t.subject,t.predicate,this.dataFactory.literal(t.text||"",t.datatype||t.language),t.reifiedStatementId)}onDoctype(t){t.replace(/<!ENTITY\s+([^\s]+)\s+["']([^"']+)["']\s*>/g,(t,e,r)=>(this.saxStream._parser.ENTITIES[e]=r,""))}}var u;a.IRI_REGEX=/^([A-Za-z][A-Za-z0-9+-.]*):[^ "<>{}|\\\[\]`]*$/,a.MIME_TYPE="application/rdf+xml",a.RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#",a.XML="http://www.w3.org/XML/1998/namespace",a.XMLNS="http://www.w3.org/2000/xmlns/",a.DEFAULT_NS={xml:a.XML},a.FORBIDDEN_NODE_ELEMENTS=["RDF","ID","about","bagID","parseType","resource","nodeID","li","aboutEach","aboutEachPrefix"],a.FORBIDDEN_PROPERTY_ELEMENTS=["Description","RDF","ID","about","bagID","parseType","resource","nodeID","aboutEach","aboutEachPrefix"],a.NCNAME_MATCHER=/^([A-Za-z\xC0-\xD6\xD8-\xF6\u{F8}-\u{2FF}\u{370}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}_])([A-Za-z\xC0-\xD6\xD8-\xF6\u{F8}-\u{2FF}\u{370}-\u{37D}\u{37F}-\u{1FFF}\u{200C}-\u{200D}\u{2070}-\u{218F}\u{2C00}-\u{2FEF}\u{3001}-\u{D7FF}\u{F900}-\u{FDCF}\u{FDF0}-\u{FFFD}\u{10000}-\u{EFFFF}_\-.0-9#xB7\u{0300}-\u{036F}\u{203F}-\u{2040}])*$/u,e.RdfXmlParser=a,function(t){t[t.RESOURCE=0]="RESOURCE",t[t.PROPERTY=1]="PROPERTY"}(u=e.ParseType||(e.ParseType={}))},function(t,e,r){"use strict";function n(t){const e=[];let r=0;for(;r<t.length;)switch(t[r]){case"/":if("."===t[r+1])if("."===t[r+2]){if(!o(t[r+3])){e.push([]),r++;break}e.pop(),t[r+3]||e.push([]),r+=3}else{if(!o(t[r+2])){e.push([]),r++;break}t[r+2]||e.push([]),r+=2}else e.push([]),r++;break;case"#":case"?":e.length||e.push([]),e[e.length-1].push(t.substr(r)),r=t.length;break;default:e.length||e.push([]),e[e.length-1].push(t[r]),r++}return"/"+e.map(t=>t.join("")).join("/")}function i(t,e){let r=e+1;e>=0?"/"===t[e+1]&&"/"===t[e+2]&&(r=e+3):"/"===t[0]&&"/"===t[1]&&(r=2);const i=t.indexOf("/",r);return i<0?t:t.substr(0,i)+n(t.substr(i))}function o(t){return!t||"#"===t||"?"===t||"/"===t}Object.defineProperty(e,"__esModule",{value:!0}),e.resolve=function(t,e){const r=(e=e||"").indexOf("#");if(r>0&&(e=e.substr(0,r)),!t.length)return e;if(t.startsWith("?")){const r=e.indexOf("?");return r>0&&(e=e.substr(0,r)),e+t}if(t.startsWith("#"))return e+t;if(!e.length)return i(t,t.indexOf(":"));const o=t.indexOf(":");if(o>=0)return i(t,o);const s=e.indexOf(":");if(s<0)throw new Error(`Found invalid baseIRI '${e}' for value '${t}'`);const a=e.substr(0,s+1);if(0===t.indexOf("//"))return a+i(t,o);let u;if(e.indexOf("//",s)===s+1){if(u=e.indexOf("/",s+3),u<0)return e.length>s+3?e+"/"+i(t,o):a+i(t,o)}else if(u=e.indexOf("/",s+1),u<0)return a+i(t,o);if(0===t.indexOf("/"))return e.substr(0,u)+n(t);let c=e.substr(u);const l=c.lastIndexOf("/");return l>=0&&l<c.length-1&&(c=c.substr(0,l+1),"."===t[0]&&"."!==t[1]&&"/"!==t[1]&&t[2]&&(t=t.substr(1))),t=n(t=c+t),e.substr(0,u)+t},e.removeDotSegments=n,e.removeDotSegmentsOfPath=i},function(t,e,r){(function(t){!function(e){e.parser=function(t,e){return new o(t,e)},e.SAXParser=o,e.SAXStream=a,e.createStream=function(t,e){return new a(t,e)},e.MAX_BUFFER_LENGTH=65536;var n,i=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function o(t,r){if(!(this instanceof o))return new o(t,r);!function(t){for(var e=0,r=i.length;e<r;e++)t[i[e]]=""}(this),this.q=this.c="",this.bufferCheckPosition=e.MAX_BUFFER_LENGTH,this.opt=r||{},this.opt.lowercase=this.opt.lowercase||this.opt.lowercasetags,this.looseCase=this.opt.lowercase?"toLowerCase":"toUpperCase",this.tags=[],this.closed=this.closedRoot=this.sawRoot=!1,this.tag=this.error=null,this.strict=!!t,this.noscript=!(!t&&!this.opt.noscript),this.state=x.BEGIN,this.strictEntities=this.opt.strictEntities,this.ENTITIES=this.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),this.attribList=[],this.opt.xmlns&&(this.ns=Object.create(c)),this.trackPosition=!1!==this.opt.position,this.trackPosition&&(this.position=this.line=this.column=0),S(this,"onready")}e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(t){function e(){}return e.prototype=t,new e}),Object.keys||(Object.keys=function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(r);return e}),o.prototype={end:function(){O(this)},write:function(t){if(this.error)throw this.error;if(this.closed)return C(this,"Cannot write after close. Assign an onready handler.");if(null===t)return O(this);"object"==typeof t&&(t=t.toString());var r=0,n="";for(;n=F(t,r++),this.c=n,n;)switch(this.trackPosition&&(this.position++,"\n"===n?(this.line++,this.column=0):this.column++),this.state){case x.BEGIN:if(this.state=x.BEGIN_WHITESPACE,"\ufeff"===n)continue;M(this,n);continue;case x.BEGIN_WHITESPACE:M(this,n);continue;case x.TEXT:if(this.sawRoot&&!this.closedRoot){for(var o=r-1;n&&"<"!==n&&"&"!==n;)(n=F(t,r++))&&this.trackPosition&&(this.position++,"\n"===n?(this.line++,this.column=0):this.column++);this.textNode+=t.substring(o,r-1)}"<"!==n||this.sawRoot&&this.closedRoot&&!this.strict?(p(n)||this.sawRoot&&!this.closedRoot||A(this,"Text data outside of root node."),"&"===n?this.state=x.TEXT_ENTITY:this.textNode+=n):(this.state=x.OPEN_WAKA,this.startTagPosition=this.position);continue;case x.SCRIPT:"<"===n?this.state=x.SCRIPT_ENDING:this.script+=n;continue;case x.SCRIPT_ENDING:"/"===n?this.state=x.CLOSE_TAG:(this.script+="<"+n,this.state=x.SCRIPT);continue;case x.OPEN_WAKA:if("!"===n)this.state=x.SGML_DECL,this.sgmlDecl="";else if(p(n));else if(y(l,n))this.state=x.OPEN_TAG,this.tagName=n;else if("/"===n)this.state=x.CLOSE_TAG,this.tagName="";else if("?"===n)this.state=x.PROC_INST,this.procInstName=this.procInstBody="";else{if(A(this,"Unencoded <"),this.startTagPosition+1<this.position){var s=this.position-this.startTagPosition;n=new Array(s).join(" ")+n}this.textNode+="<"+n,this.state=x.TEXT}continue;case x.SGML_DECL:"[CDATA["===(this.sgmlDecl+n).toUpperCase()?(T(this,"onopencdata"),this.state=x.CDATA,this.sgmlDecl="",this.cdata=""):this.sgmlDecl+n==="--"?(this.state=x.COMMENT,this.comment="",this.sgmlDecl=""):"DOCTYPE"===(this.sgmlDecl+n).toUpperCase()?(this.state=x.DOCTYPE,(this.doctype||this.sawRoot)&&A(this,"Inappropriately located doctype declaration"),this.doctype="",this.sgmlDecl=""):">"===n?(T(this,"onsgmldeclaration",this.sgmlDecl),this.sgmlDecl="",this.state=x.TEXT):_(n)?(this.state=x.SGML_DECL_QUOTED,this.sgmlDecl+=n):this.sgmlDecl+=n;continue;case x.SGML_DECL_QUOTED:n===this.q&&(this.state=x.SGML_DECL,this.q=""),this.sgmlDecl+=n;continue;case x.DOCTYPE:">"===n?(this.state=x.TEXT,T(this,"ondoctype",this.doctype),this.doctype=!0):(this.doctype+=n,"["===n?this.state=x.DOCTYPE_DTD:_(n)&&(this.state=x.DOCTYPE_QUOTED,this.q=n));continue;case x.DOCTYPE_QUOTED:this.doctype+=n,n===this.q&&(this.q="",this.state=x.DOCTYPE);continue;case x.DOCTYPE_DTD:this.doctype+=n,"]"===n?this.state=x.DOCTYPE:_(n)&&(this.state=x.DOCTYPE_DTD_QUOTED,this.q=n);continue;case x.DOCTYPE_DTD_QUOTED:this.doctype+=n,n===this.q&&(this.state=x.DOCTYPE_DTD,this.q="");continue;case x.COMMENT:"-"===n?this.state=x.COMMENT_ENDING:this.comment+=n;continue;case x.COMMENT_ENDING:"-"===n?(this.state=x.COMMENT_ENDED,this.comment=R(this.opt,this.comment),this.comment&&T(this,"oncomment",this.comment),this.comment=""):(this.comment+="-"+n,this.state=x.COMMENT);continue;case x.COMMENT_ENDED:">"!==n?(A(this,"Malformed comment"),this.comment+="--"+n,this.state=x.COMMENT):this.state=x.TEXT;continue;case x.CDATA:"]"===n?this.state=x.CDATA_ENDING:this.cdata+=n;continue;case x.CDATA_ENDING:"]"===n?this.state=x.CDATA_ENDING_2:(this.cdata+="]"+n,this.state=x.CDATA);continue;case x.CDATA_ENDING_2:">"===n?(this.cdata&&T(this,"oncdata",this.cdata),T(this,"onclosecdata"),this.cdata="",this.state=x.TEXT):"]"===n?this.cdata+="]":(this.cdata+="]]"+n,this.state=x.CDATA);continue;case x.PROC_INST:"?"===n?this.state=x.PROC_INST_ENDING:p(n)?this.state=x.PROC_INST_BODY:this.procInstName+=n;continue;case x.PROC_INST_BODY:if(!this.procInstBody&&p(n))continue;"?"===n?this.state=x.PROC_INST_ENDING:this.procInstBody+=n;continue;case x.PROC_INST_ENDING:">"===n?(T(this,"onprocessinginstruction",{name:this.procInstName,body:this.procInstBody}),this.procInstName=this.procInstBody="",this.state=x.TEXT):(this.procInstBody+="?"+n,this.state=x.PROC_INST_BODY);continue;case x.OPEN_TAG:y(h,n)?this.tagName+=n:(P(this),">"===n?k(this):"/"===n?this.state=x.OPEN_TAG_SLASH:(p(n)||A(this,"Invalid character in tag name"),this.state=x.ATTRIB));continue;case x.OPEN_TAG_SLASH:">"===n?(k(this,!0),j(this)):(A(this,"Forward-slash in opening tag not followed by >"),this.state=x.ATTRIB);continue;case x.ATTRIB:if(p(n))continue;">"===n?k(this):"/"===n?this.state=x.OPEN_TAG_SLASH:y(l,n)?(this.attribName=n,this.attribValue="",this.state=x.ATTRIB_NAME):A(this,"Invalid attribute name");continue;case x.ATTRIB_NAME:"="===n?this.state=x.ATTRIB_VALUE:">"===n?(A(this,"Attribute without value"),this.attribValue=this.attribName,D(this),k(this)):p(n)?this.state=x.ATTRIB_NAME_SAW_WHITE:y(h,n)?this.attribName+=n:A(this,"Invalid attribute name");continue;case x.ATTRIB_NAME_SAW_WHITE:if("="===n)this.state=x.ATTRIB_VALUE;else{if(p(n))continue;A(this,"Attribute without value"),this.tag.attributes[this.attribName]="",this.attribValue="",T(this,"onattribute",{name:this.attribName,value:""}),this.attribName="",">"===n?k(this):y(l,n)?(this.attribName=n,this.state=x.ATTRIB_NAME):(A(this,"Invalid attribute name"),this.state=x.ATTRIB)}continue;case x.ATTRIB_VALUE:if(p(n))continue;_(n)?(this.q=n,this.state=x.ATTRIB_VALUE_QUOTED):(A(this,"Unquoted attribute value"),this.state=x.ATTRIB_VALUE_UNQUOTED,this.attribValue=n);continue;case x.ATTRIB_VALUE_QUOTED:if(n!==this.q){"&"===n?this.state=x.ATTRIB_VALUE_ENTITY_Q:this.attribValue+=n;continue}D(this),this.q="",this.state=x.ATTRIB_VALUE_CLOSED;continue;case x.ATTRIB_VALUE_CLOSED:p(n)?this.state=x.ATTRIB:">"===n?k(this):"/"===n?this.state=x.OPEN_TAG_SLASH:y(l,n)?(A(this,"No whitespace between attributes"),this.attribName=n,this.attribValue="",this.state=x.ATTRIB_NAME):A(this,"Invalid attribute name");continue;case x.ATTRIB_VALUE_UNQUOTED:if(!g(n)){"&"===n?this.state=x.ATTRIB_VALUE_ENTITY_U:this.attribValue+=n;continue}D(this),">"===n?k(this):this.state=x.ATTRIB;continue;case x.CLOSE_TAG:if(this.tagName)">"===n?j(this):y(h,n)?this.tagName+=n:this.script?(this.script+="</"+this.tagName,this.tagName="",this.state=x.SCRIPT):(p(n)||A(this,"Invalid tagname in closing tag"),this.state=x.CLOSE_TAG_SAW_WHITE);else{if(p(n))continue;m(l,n)?this.script?(this.script+="</"+n,this.state=x.SCRIPT):A(this,"Invalid tagname in closing tag."):this.tagName=n}continue;case x.CLOSE_TAG_SAW_WHITE:if(p(n))continue;">"===n?j(this):A(this,"Invalid characters in closing tag");continue;case x.TEXT_ENTITY:case x.ATTRIB_VALUE_ENTITY_Q:case x.ATTRIB_VALUE_ENTITY_U:var a,u;switch(this.state){case x.TEXT_ENTITY:a=x.TEXT,u="textNode";break;case x.ATTRIB_VALUE_ENTITY_Q:a=x.ATTRIB_VALUE_QUOTED,u="attribValue";break;case x.ATTRIB_VALUE_ENTITY_U:a=x.ATTRIB_VALUE_UNQUOTED,u="attribValue"}";"===n?(this[u]+=L(this),this.entity="",this.state=a):y(this.entity.length?d:f,n)?this.entity+=n:(A(this,"Invalid character in entity name"),this[u]+="&"+this.entity+n,this.entity="",this.state=a);continue;default:throw new Error(this,"Unknown state: "+this.state)}this.position>=this.bufferCheckPosition&&function(t){for(var r=Math.max(e.MAX_BUFFER_LENGTH,10),n=0,o=0,s=i.length;o<s;o++){var a=t[i[o]].length;if(a>r)switch(i[o]){case"textNode":I(t);break;case"cdata":T(t,"oncdata",t.cdata),t.cdata="";break;case"script":T(t,"onscript",t.script),t.script="";break;default:C(t,"Max buffer length exceeded: "+i[o])}n=Math.max(n,a)}var u=e.MAX_BUFFER_LENGTH-n;t.bufferCheckPosition=u+t.position}(this);return this}
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var t;I(t=this),""!==t.cdata&&(T(t,"oncdata",t.cdata),t.cdata=""),""!==t.script&&(T(t,"onscript",t.script),t.script="")}};try{n=r(1).Stream}catch(t){n=function(){}}var s=e.EVENTS.filter((function(t){return"error"!==t&&"end"!==t}));function a(t,e){if(!(this instanceof a))return new a(t,e);n.apply(this),this._parser=new o(t,e),this.writable=!0,this.readable=!0;var r=this;this._parser.onend=function(){r.emit("end")},this._parser.onerror=function(t){r.emit("error",t),r._parser.error=null},this._decoder=null,s.forEach((function(t){Object.defineProperty(r,"on"+t,{get:function(){return r._parser["on"+t]},set:function(e){if(!e)return r.removeAllListeners(t),r._parser["on"+t]=e,e;r.on(t,e)},enumerable:!0,configurable:!1})}))}a.prototype=Object.create(n.prototype,{constructor:{value:a}}),a.prototype.write=function(e){if("function"==typeof t&&"function"==typeof t.isBuffer&&t.isBuffer(e)){if(!this._decoder){var n=r(27).StringDecoder;this._decoder=new n("utf8")}e=this._decoder.write(e)}return this._parser.write(e.toString()),this.emit("data",e),!0},a.prototype.end=function(t){return t&&t.length&&this.write(t),this._parser.end(),!0},a.prototype.on=function(t,e){var r=this;return r._parser["on"+t]||-1===s.indexOf(t)||(r._parser["on"+t]=function(){var e=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);e.splice(0,0,t),r.emit.apply(r,e)}),n.prototype.on.call(r,t,e)};var u="http://www.w3.org/XML/1998/namespace",c={xml:u,xmlns:"http://www.w3.org/2000/xmlns/"},l=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function p(t){return" "===t||"\n"===t||"\r"===t||"\t"===t}function _(t){return'"'===t||"'"===t}function g(t){return">"===t||p(t)}function y(t,e){return t.test(e)}function m(t,e){return!y(t,e)}var b,v,w,x=0;for(var E in e.STATE={BEGIN:x++,BEGIN_WHITESPACE:x++,TEXT:x++,TEXT_ENTITY:x++,OPEN_WAKA:x++,SGML_DECL:x++,SGML_DECL_QUOTED:x++,DOCTYPE:x++,DOCTYPE_QUOTED:x++,DOCTYPE_DTD:x++,DOCTYPE_DTD_QUOTED:x++,COMMENT_STARTING:x++,COMMENT:x++,COMMENT_ENDING:x++,COMMENT_ENDED:x++,CDATA:x++,CDATA_ENDING:x++,CDATA_ENDING_2:x++,PROC_INST:x++,PROC_INST_BODY:x++,PROC_INST_ENDING:x++,OPEN_TAG:x++,OPEN_TAG_SLASH:x++,ATTRIB:x++,ATTRIB_NAME:x++,ATTRIB_NAME_SAW_WHITE:x++,ATTRIB_VALUE:x++,ATTRIB_VALUE_QUOTED:x++,ATTRIB_VALUE_CLOSED:x++,ATTRIB_VALUE_UNQUOTED:x++,ATTRIB_VALUE_ENTITY_Q:x++,ATTRIB_VALUE_ENTITY_U:x++,CLOSE_TAG:x++,CLOSE_TAG_SAW_WHITE:x++,SCRIPT:x++,SCRIPT_ENDING:x++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach((function(t){var r=e.ENTITIES[t],n="number"==typeof r?String.fromCharCode(r):r;e.ENTITIES[t]=n})),e.STATE)e.STATE[e.STATE[E]]=E;function S(t,e,r){t[e]&&t[e](r)}function T(t,e,r){t.textNode&&I(t),S(t,e,r)}function I(t){t.textNode=R(t.opt,t.textNode),t.textNode&&S(t,"ontext",t.textNode),t.textNode=""}function R(t,e){return t.trim&&(e=e.trim()),t.normalize&&(e=e.replace(/\s+/g," ")),e}function C(t,e){return I(t),t.trackPosition&&(e+="\nLine: "+t.line+"\nColumn: "+t.column+"\nChar: "+t.c),e=new Error(e),t.error=e,S(t,"onerror",e),t}function O(t){return t.sawRoot&&!t.closedRoot&&A(t,"Unclosed root tag"),t.state!==x.BEGIN&&t.state!==x.BEGIN_WHITESPACE&&t.state!==x.TEXT&&C(t,"Unexpected end"),I(t),t.c="",t.closed=!0,S(t,"onend"),o.call(t,t.strict,t.opt),t}function A(t,e){if("object"!=typeof t||!(t instanceof o))throw new Error("bad call to strictFail");t.strict&&C(t,e)}function P(t){t.strict||(t.tagName=t.tagName[t.looseCase]());var e=t.tags[t.tags.length-1]||t,r=t.tag={name:t.tagName,attributes:{}};t.opt.xmlns&&(r.ns=e.ns),t.attribList.length=0,T(t,"onopentagstart",r)}function N(t,e){var r=t.indexOf(":")<0?["",t]:t.split(":"),n=r[0],i=r[1];return e&&"xmlns"===t&&(n="xmlns",i=""),{prefix:n,local:i}}function D(t){if(t.strict||(t.attribName=t.attribName[t.looseCase]()),-1!==t.attribList.indexOf(t.attribName)||t.tag.attributes.hasOwnProperty(t.attribName))t.attribName=t.attribValue="";else{if(t.opt.xmlns){var e=N(t.attribName,!0),r=e.prefix,n=e.local;if("xmlns"===r)if("xml"===n&&t.attribValue!==u)A(t,"xml: prefix must be bound to "+u+"\nActual: "+t.attribValue);else if("xmlns"===n&&"http://www.w3.org/2000/xmlns/"!==t.attribValue)A(t,"xmlns: prefix must be bound to http://www.w3.org/2000/xmlns/\nActual: "+t.attribValue);else{var i=t.tag,o=t.tags[t.tags.length-1]||t;i.ns===o.ns&&(i.ns=Object.create(o.ns)),i.ns[n]=t.attribValue}t.attribList.push([t.attribName,t.attribValue])}else t.tag.attributes[t.attribName]=t.attribValue,T(t,"onattribute",{name:t.attribName,value:t.attribValue});t.attribName=t.attribValue=""}}function k(t,e){if(t.opt.xmlns){var r=t.tag,n=N(t.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(A(t,"Unbound namespace prefix: "+JSON.stringify(t.tagName)),r.uri=n.prefix);var i=t.tags[t.tags.length-1]||t;r.ns&&i.ns!==r.ns&&Object.keys(r.ns).forEach((function(e){T(t,"onopennamespace",{prefix:e,uri:r.ns[e]})}));for(var o=0,s=t.attribList.length;o<s;o++){var a=t.attribList[o],u=a[0],c=a[1],l=N(u,!0),h=l.prefix,f=l.local,d=""===h?"":r.ns[h]||"",p={name:u,value:c,prefix:h,local:f,uri:d};h&&"xmlns"!==h&&!d&&(A(t,"Unbound namespace prefix: "+JSON.stringify(h)),p.uri=h),t.tag.attributes[u]=p,T(t,"onattribute",p)}t.attribList.length=0}t.tag.isSelfClosing=!!e,t.sawRoot=!0,t.tags.push(t.tag),T(t,"onopentag",t.tag),e||(t.noscript||"script"!==t.tagName.toLowerCase()?t.state=x.TEXT:t.state=x.SCRIPT,t.tag=null,t.tagName=""),t.attribName=t.attribValue="",t.attribList.length=0}function j(t){if(!t.tagName)return A(t,"Weird empty close tag."),t.textNode+="</>",void(t.state=x.TEXT);if(t.script){if("script"!==t.tagName)return t.script+="</"+t.tagName+">",t.tagName="",void(t.state=x.SCRIPT);T(t,"onscript",t.script),t.script=""}var e=t.tags.length,r=t.tagName;t.strict||(r=r[t.looseCase]());for(var n=r;e--;){if(t.tags[e].name===n)break;A(t,"Unexpected close tag")}if(e<0)return A(t,"Unmatched closing tag: "+t.tagName),t.textNode+="</"+t.tagName+">",void(t.state=x.TEXT);t.tagName=r;for(var i=t.tags.length;i-- >e;){var o=t.tag=t.tags.pop();t.tagName=t.tag.name,T(t,"onclosetag",t.tagName);var s={};for(var a in o.ns)s[a]=o.ns[a];var u=t.tags[t.tags.length-1]||t;t.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach((function(e){var r=o.ns[e];T(t,"onclosenamespace",{prefix:e,uri:r})}))}0===e&&(t.closedRoot=!0),t.tagName=t.attribValue=t.attribName="",t.attribList.length=0,t.state=x.TEXT}function L(t){var e,r=t.entity,n=r.toLowerCase(),i="";return t.ENTITIES[r]?t.ENTITIES[r]:t.ENTITIES[n]?t.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),i=(e=parseInt(r,16)).toString(16)):(r=r.slice(1),i=(e=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(e)||i.toLowerCase()!==r?(A(t,"Invalid character entity"),"&"+t.entity+";"):String.fromCodePoint(e))}function M(t,e){"<"===e?(t.state=x.OPEN_WAKA,t.startTagPosition=t.position):p(e)||(A(t,"Non-whitespace before first tag."),t.textNode=e,t.state=x.TEXT)}function F(t,e){var r="";return e<t.length&&(r=t.charAt(e)),r}x=e.STATE,String.fromCodePoint||(b=String.fromCharCode,v=Math.floor,w=function(){var t,e,r=16384,n=[],i=-1,o=arguments.length;if(!o)return"";for(var s="";++i<o;){var a=Number(arguments[i]);if(!isFinite(a)||a<0||a>1114111||v(a)!==a)throw RangeError("Invalid code point: "+a);a<=65535?n.push(a):(t=55296+((a-=65536)>>10),e=a%1024+56320,n.push(t,e)),(i+1===o||n.length>r)&&(s+=b.apply(null,n),n.length=0)}return s},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:w,configurable:!0,writable:!0}):String.fromCodePoint=w)}(e)}).call(this,r(5).Buffer)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n extends Error{constructor(t,e){const r=t.saxStream._parser;super(t.trackPosition?`Line ${r.line+1} column ${r.column+1}: ${e}`:e)}}e.ParseError=n},function(t,e,r){var n=r(120),i=r(48),o=r(121),s=r(49),a=r(122),u=r(123);function c(){}c.namedNode=function(t){return new s(t)},c.blankNode=function(t){return new n(t)},c.literal=function(t,e){return"string"==typeof e?-1===e.indexOf(":")?new o(t,e):new o(t,null,c.namedNode(e)):new o(t,null,e)},c.defaultGraph=function(){return c.defaultGraphInstance},c.variable=function(t){return new u(t)},c.triple=function(t,e,r){return c.quad(t,e,r)},c.quad=function(t,e,r,n){return new a(t,e,r,n||c.defaultGraphInstance)},c.defaultGraphInstance=new i,t.exports=c},function(t,e){function r(t){this.value=t||"b"+ ++r.nextId}r.prototype.equals=function(t){return!!t&&t.termType===this.termType&&t.value===this.value},r.prototype.termType="BlankNode",r.nextId=0,t.exports=r},function(t,e,r){var n=r(49);function i(t,e,r){this.value=t,this.datatype=i.stringDatatype,this.language="",e?(this.language=e,this.datatype=i.langStringDatatype):r&&(this.datatype=r)}i.prototype.equals=function(t){return!!t&&t.termType===this.termType&&t.value===this.value&&t.language===this.language&&t.datatype.equals(this.datatype)},i.prototype.termType="Literal",i.langStringDatatype=new n("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"),i.stringDatatype=new n("http://www.w3.org/2001/XMLSchema#string"),t.exports=i},function(t,e,r){var n=r(48);function i(t,e,r,i){this.subject=t,this.predicate=e,this.object=r,this.graph=i||new n}i.prototype.equals=function(t){return!!t&&t.subject.equals(this.subject)&&t.predicate.equals(this.predicate)&&t.object.equals(this.object)&&t.graph.equals(this.graph)},t.exports=i},function(t,e){function r(t){this.value=t}r.prototype.equals=function(t){return!!t&&t.termType===this.termType&&t.value===this.value},r.prototype.termType="Variable",t.exports=r},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(125))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(14),i=r(50);class o extends n.ActorRdfParseFixedMediaTypes{constructor(t){super(t)}async runHandle(t,e,r){const n=t.headers?t.headers.get("content-language"):null;t.input.on("error",t=>o.emit("error",t));const o=t.input.pipe(new i.RdfaParser({baseIRI:t.baseIRI,profile:"xml",language:n}));return{quads:o,triples:!0}}}e.ActorRdfParseXmlRdfa=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(51),i=r(1),o=r(140),s=r(141),a=r(31),u=r(62);class c extends i.Transform{constructor(t){super({objectMode:!0}),this.activeTagStack=[],t=t||{},this.options=t,this.util=new u.Util(t.dataFactory,t.baseIRI),this.defaultGraph=t.defaultGraph||this.util.dataFactory.defaultGraph();const e=t.contentType?u.Util.contentTypeToProfile(t.contentType):t.profile||"";this.features=t.features||a.RDFA_FEATURES[e],this.htmlParseListener=t.htmlParseListener,this.rdfaPatterns=this.features.copyRdfaPatterns?{}:null,this.pendingRdfaPatternCopies=this.features.copyRdfaPatterns?{}:null,this.parser=this.initializeParser("xml"===e),this.activeTagStack.push({incompleteTriples:[],inlist:!1,language:t.language,listMapping:{},listMappingLocal:{},name:"",prefixesAll:Object.assign({},s["@context"],this.features.xhtmlInitialContext?o["@context"]:{}),prefixesCustom:{},skipElement:!1,vocab:t.vocab})}import(t){const e=new i.PassThrough({objectMode:!0});t.on("error",t=>r.emit("error",t)),t.on("data",t=>e.write(t)),t.on("end",()=>e.emit("end"));const r=e.pipe(new c(this.options));return r}_transform(t,e,r){this.parser.write(t),r()}_flush(t){this.parser.end(),t()}onTagOpen(t,e){let r=this.activeTagStack.length-1;for(;r>0&&this.activeTagStack[r].skipElement;)r--;let n=this.activeTagStack[r];r!==this.activeTagStack.length-1&&(n=Object.assign({},n,{language:this.activeTagStack[this.activeTagStack.length-1].language,prefixesAll:this.activeTagStack[this.activeTagStack.length-1].prefixesAll,prefixesCustom:this.activeTagStack[this.activeTagStack.length-1].prefixesCustom,vocab:this.activeTagStack[this.activeTagStack.length-1].vocab}));const i={collectChildTags:n.collectChildTags,incompleteTriples:[],inlist:"inlist"in e,listMapping:[],listMappingLocal:n.listMapping,localBaseIRI:n.localBaseIRI,name:t,prefixesAll:null,prefixesCustom:null,skipElement:!1};if(this.activeTagStack.push(i),i.collectChildTags){for(const t of Object.keys(n.prefixesCustom).sort()){const r=n.prefixesCustom[t],i=""===t?"xmlns":"xmlns:"+t;i in e||(e[i]=r)}const r=Object.keys(e).map(t=>`${t}="${e[t]}"`).join(" ");if(i.text=[`<${t}${r?" "+r:""}>`],this.features.skipHandlingXmlLiteralChildren)return}let o,s,a,c=!0,l=!0;if(this.features.onlyAllowUriRelRevIfProperty&&("property"in e&&"rel"in e&&(c=!1,e.rel.indexOf(":")<0&&delete e.rel),"property"in e&&"rev"in e&&(l=!1,e.rev.indexOf(":")<0&&delete e.rev)),this.features.copyRdfaPatterns){if(n.collectedPatternTag){const r={attributes:e,children:[],name:t,referenced:!1,rootPattern:!1,text:[]};return n.collectedPatternTag.children.push(r),void(i.collectedPatternTag=r)}if("rdfa:Pattern"===e.typeof)return void(i.collectedPatternTag={attributes:e,children:[],name:t,parentTag:n,referenced:!1,rootPattern:!0,text:[]});if("rdfa:copy"===e.property){const t=e.resource||e.href||e.src;return void(this.rdfaPatterns[t]?this.emitPatternCopy(n,this.rdfaPatterns[t],t):(this.pendingRdfaPatternCopies[t]||(this.pendingRdfaPatternCopies[t]=[]),this.pendingRdfaPatternCopies[t].push(n)))}}if(this.features.baseTag&&"base"===t&&e.href&&(this.util.baseIRI=this.util.getBaseIRI(e.href)),this.features.xmlBase&&e["xml:base"]&&(i.localBaseIRI=this.util.getBaseIRI(e["xml:base"])),this.features.timeTag&&"time"===t&&!e.datatype&&(i.interpretObjectAsTime=!0),"vocab"in e?e.vocab?(i.vocab=e.vocab,this.emitTriple(this.util.getBaseIriTerm(i),this.util.dataFactory.namedNode(u.Util.RDFA+"usesVocabulary"),this.util.dataFactory.namedNode(i.vocab))):i.vocab=this.activeTagStack[0].vocab:i.vocab=n.vocab,i.prefixesCustom=u.Util.parsePrefixes(e,n.prefixesCustom,this.features.xmlnsPrefixMappings),i.prefixesAll=Object.keys(i.prefixesCustom).length>0?Object.assign({},n.prefixesAll,i.prefixesCustom):n.prefixesAll,this.features.roleAttribute&&e.role){const t=e.id?this.util.createIri("#"+e.id,i,!1,!1,!1):this.util.createBlankNode(),r=i.vocab;i.vocab="http://www.w3.org/1999/xhtml/vocab#";for(const r of this.util.createVocabIris(e.role,i,!0,!1))this.emitTriple(t,this.util.dataFactory.namedNode("http://www.w3.org/1999/xhtml/vocab#role"),r);i.vocab=r}"xml:lang"in e||this.features.langAttribute&&"lang"in e?i.language=e["xml:lang"]||e.lang:i.language=n.language;const h=2===this.activeTagStack.length;if("rel"in e||"rev"in e?("about"in e?(o=this.util.createIri(e.about,i,!1,!0,!0),i.explicitNewSubject=!!o,"typeof"in e&&(a=o)):h?o=!0:n.object&&(o=n.object),"resource"in e&&(s=this.util.createIri(e.resource,i,!1,!0,!0)),s||("href"in e||"src"in e?s=this.util.createIri(e.href||e.src,i,!1,!1,!0):!("typeof"in e)||"about"in e||this.isInheritSubjectInHeadBody(t)||(s=this.util.createBlankNode())),"typeof"in e&&!("about"in e)&&(a=this.isInheritSubjectInHeadBody(t)?o:s)):!("property"in e)||"content"in e||"datatype"in e?(("about"in e||"resource"in e)&&(o=this.util.createIri(e.about||e.resource,i,!1,!0,!0),i.explicitNewSubject=!!o),!o&&("href"in e||"src"in e)&&(o=this.util.createIri(e.href||e.src,i,!1,!1,!0),i.explicitNewSubject=!!o),o||(h?o=!0:this.isInheritSubjectInHeadBody(t)?o=n.object:"typeof"in e?(o=this.util.createBlankNode(),i.explicitNewSubject=!0):n.object&&(o=n.object,"property"in e||(i.skipElement=!0))),"typeof"in e&&(a=o)):("about"in e?(o=this.util.createIri(e.about,i,!1,!0,!0),i.explicitNewSubject=!!o):h?o=!0:n.object&&(o=n.object),"typeof"in e&&("about"in e&&(a=this.util.createIri(e.about,i,!1,!0,!0)),!a&&h&&(a=!0),!a&&"resource"in e&&(a=this.util.createIri(e.resource,i,!1,!0,!0)),!a&&("href"in e||"src"in e)&&(a=this.util.createIri(e.href||e.src,i,!1,!1,!0)),!a&&this.isInheritSubjectInHeadBody(t)&&(a=o),a||(a=this.util.createBlankNode()),s=a)),a)for(const t of this.util.createVocabIris(e.typeof,i,!0,!0))this.emitTriple(this.util.getResourceOrBaseIri(a,i),this.util.dataFactory.namedNode(u.Util.RDF+"type"),t);if(o&&(i.listMapping={}),s){if("rel"in e&&"inlist"in e)for(const t of this.util.createVocabIris(e.rel,i,c,!1))this.addListMapping(i,o,t,s);if(!("rel"in e&&"inlist"in e)){if("rel"in e)for(const t of this.util.createVocabIris(e.rel,i,c,!1))this.emitTriple(this.util.getResourceOrBaseIri(o,i),t,this.util.getResourceOrBaseIri(s,i));if("rev"in e)for(const t of this.util.createVocabIris(e.rev,i,l,!1))this.emitTriple(this.util.getResourceOrBaseIri(s,i),t,this.util.getResourceOrBaseIri(o,i))}}if(!s){if("rel"in e)if("inlist"in e)for(const t of this.util.createVocabIris(e.rel,i,c,!1))this.addListMapping(i,o,t,null),i.incompleteTriples.push({predicate:t,reverse:!1,list:!0});else for(const t of this.util.createVocabIris(e.rel,i,c,!1))i.incompleteTriples.push({predicate:t,reverse:!1});if("rev"in e)for(const t of this.util.createVocabIris(e.rev,i,l,!1))i.incompleteTriples.push({predicate:t,reverse:!0});i.incompleteTriples.length>0&&(s=this.util.createBlankNode())}if("property"in e){let t;if(i.predicates=this.util.createVocabIris(e.property,i,!0,!1),"datatype"in e?(i.datatype=this.util.createIri(e.datatype,i,!0,!0,!1),i.datatype&&(i.datatype.value===u.Util.RDF+"XMLLiteral"||this.features.htmlDatatype&&i.datatype.value===u.Util.RDF+"HTML")&&(i.collectChildTags=!0)):("rev"in e||"rel"in e||"content"in e||("resource"in e&&(t=this.util.createIri(e.resource,i,!1,!0,!0)),!t&&"href"in e&&(t=this.util.createIri(e.href,i,!1,!1,!0)),!t&&"src"in e&&(t=this.util.createIri(e.src,i,!1,!1,!0))),"typeof"in e&&!("about"in e)&&(t=a)),"content"in e){const t=this.util.createLiteral(e.content,i);if("inlist"in e)for(const e of i.predicates)this.addListMapping(i,o,e,t);else{const e=this.util.getResourceOrBaseIri(o,i);for(const r of i.predicates)this.emitTriple(e,r,t)}i.predicates=null}else if(this.features.datetimeAttribute&&"datetime"in e){i.interpretObjectAsTime=!0;const t=this.util.createLiteral(e.datetime,i);if("inlist"in e)for(const e of i.predicates)this.addListMapping(i,o,e,t);else{const e=this.util.getResourceOrBaseIri(o,i);for(const r of i.predicates)this.emitTriple(e,r,t)}i.predicates=null}else if(t){const r=this.util.getResourceOrBaseIri(t,i);if("inlist"in e)for(const t of i.predicates)this.addListMapping(i,o,t,r);else{const t=this.util.getResourceOrBaseIri(o,i);for(const e of i.predicates)this.emitTriple(t,e,r)}i.predicates=null}}let f=!1;if(!i.skipElement&&o&&n.incompleteTriples.length>0){f=!0;const t=this.util.getResourceOrBaseIri(n.subject,i),e=this.util.getResourceOrBaseIri(o,i);for(const r of n.incompleteTriples)if(r.reverse)this.emitTriple(e,r.predicate,t);else if(r.list){let t=null;for(let e=this.activeTagStack.length-1;e>=0;e--)if(this.activeTagStack[e].inlist){t=this.activeTagStack[e];break}this.addListMapping(t,o,r.predicate,e)}else this.emitTriple(t,r.predicate,e)}!f&&n.incompleteTriples.length>0&&(i.incompleteTriples=i.incompleteTriples.concat(n.incompleteTriples)),i.subject=o||n.subject,i.object=s||o}onText(t){const e=this.activeTagStack[this.activeTagStack.length-1];this.features.copyRdfaPatterns&&e.collectedPatternTag?e.collectedPatternTag.text.push(t):(e.text||(e.text=[]),e.text.push(t))}onTagClose(){const t=this.activeTagStack[this.activeTagStack.length-1],e=this.activeTagStack[this.activeTagStack.length-2];if(!(t.collectChildTags&&e.collectChildTags&&this.features.skipHandlingXmlLiteralChildren)){if(this.features.copyRdfaPatterns&&t.collectedPatternTag&&t.collectedPatternTag.rootPattern){const e=t.collectedPatternTag.attributes.resource;if(delete t.collectedPatternTag.attributes.resource,delete t.collectedPatternTag.attributes.typeof,this.rdfaPatterns[e]=t.collectedPatternTag,this.pendingRdfaPatternCopies[e]){for(const r of this.pendingRdfaPatternCopies[e])this.emitPatternCopy(r,t.collectedPatternTag,e);delete this.pendingRdfaPatternCopies[e]}return void this.activeTagStack.pop()}if(t.predicates){const r=this.util.getResourceOrBaseIri(t.subject,t);let n=t.text||[];t.collectChildTags&&e.collectChildTags&&(n=n.slice(1));const i=this.util.createLiteral(n.join(""),t);if(t.inlist)for(const e of t.predicates)this.addListMapping(t,r,e,i);else for(const e of t.predicates)this.emitTriple(r,e,i);e.predicates||(t.text=null)}if(t.object&&Object.keys(t.listMapping).length>0){const e=this.util.getResourceOrBaseIri(t.object,t);for(const r in t.listMapping){const n=this.util.dataFactory.namedNode(r),i=t.listMapping[r];if(i.length>0){const r=i.map(()=>this.util.createBlankNode());for(let e=0;e<i.length;e++){const n=this.util.getResourceOrBaseIri(i[e],t);this.emitTriple(r[e],this.util.dataFactory.namedNode(u.Util.RDF+"first"),n),this.emitTriple(r[e],this.util.dataFactory.namedNode(u.Util.RDF+"rest"),e<i.length-1?r[e+1]:this.util.dataFactory.namedNode(u.Util.RDF+"nil"))}this.emitTriple(e,n,r[0])}else this.emitTriple(e,n,this.util.dataFactory.namedNode(u.Util.RDF+"nil"))}}}this.activeTagStack.pop(),t.collectChildTags&&t.text&&t.text.push(`</${t.name}>`),t.text&&e&&(e.text?e.text=e.text.concat(t.text):e.text=t.text)}onEnd(){if(this.features.copyRdfaPatterns){this.features.copyRdfaPatterns=!1;for(const t in this.rdfaPatterns){const e=this.rdfaPatterns[t];e.referenced||(e.attributes.typeof="rdfa:Pattern",e.attributes.resource=t,this.emitPatternCopy(e.parentTag,e,t),e.referenced=!1,delete e.attributes.typeof,delete e.attributes.resource)}for(const t in this.pendingRdfaPatternCopies)for(const e of this.pendingRdfaPatternCopies[t])this.activeTagStack.push(e),this.onTagOpen("link",{property:"rdfa:copy",href:t}),this.onTagClose(),this.activeTagStack.pop();this.features.copyRdfaPatterns=!0}}isInheritSubjectInHeadBody(t){return this.features.inheritSubjectInHeadBody&&("head"===t||"body"===t)}addListMapping(t,e,r,n){if(t.explicitNewSubject){const i=this.util.createBlankNode();this.emitTriple(this.util.getResourceOrBaseIri(e,t),r,i),this.emitTriple(i,this.util.dataFactory.namedNode(u.Util.RDF+"first"),this.util.getResourceOrBaseIri(n,t)),this.emitTriple(i,this.util.dataFactory.namedNode(u.Util.RDF+"rest"),this.util.dataFactory.namedNode(u.Util.RDF+"nil"))}else{let e=t.listMappingLocal[r.value];e||(t.listMappingLocal[r.value]=e=[]),n&&e.push(n)}}emitTriple(t,e,r){"NamedNode"===t.termType&&t.value.indexOf(":")<0||"NamedNode"===e.termType&&e.value.indexOf(":")<0||"NamedNode"===r.termType&&r.value.indexOf(":")<0||this.push(this.util.dataFactory.quad(t,e,r,this.defaultGraph))}emitPatternCopy(t,e,r){if(this.activeTagStack.push(t),e.referenced=!0,e.constructedBlankNodes){let t=0;this.util.blankNodeFactory=()=>e.constructedBlankNodes[t++]}else e.constructedBlankNodes=[],this.util.blankNodeFactory=()=>{const t=this.util.dataFactory.blankNode();return e.constructedBlankNodes.push(t),t};this.emitPatternCopyAbsolute(e,!0,r),this.util.blankNodeFactory=null,this.activeTagStack.pop()}emitPatternCopyAbsolute(t,e,r){if(e||"rdfa:copy"!==t.attributes.property||t.attributes.href!==r){this.onTagOpen(t.name,t.attributes);for(const e of t.text)this.onText(e);for(const e of t.children)this.emitPatternCopyAbsolute(e,!1,r);this.onTagClose()}}initializeParser(t){return new n.Parser({onclosetag:()=>{try{this.onTagClose()}catch(t){this.emit("error",t)}this.htmlParseListener&&this.htmlParseListener.onTagClose()},onend:()=>{try{this.onEnd()}catch(t){this.emit("error",t)}this.htmlParseListener&&this.htmlParseListener.onEnd()},onopentag:(t,e)=>{try{this.onTagOpen(t,e)}catch(t){this.emit("error",t)}this.htmlParseListener&&this.htmlParseListener.onTagOpen(t,e)},ontext:t=>{try{this.onText(t)}catch(t){this.emit("error",t)}this.htmlParseListener&&this.htmlParseListener.onText(t)}},{decodeEntities:!0,recognizeSelfClosing:!0,xmlMode:t})}}e.RdfaParser=c},function(t){t.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var o=new Map([["tag",1],["script",1],["style",1],["directive",1],["text",3],["cdata",4],["comment",8]]),s=function(){function t(t){this.type=t,this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return o.get(this.type)||1},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentNode",{get:function(){return this.parent||null},set:function(t){this.parent=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"previousSibling",{get:function(){return this.prev||null},set:function(t){this.prev=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nextSibling",{get:function(){return this.next||null},set:function(t){this.next=t},enumerable:!0,configurable:!0}),t}();e.Node=s;var a=function(t){function e(e,r){var n=t.call(this,e)||this;return n.data=r,n}return i(e,t),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.data},set:function(t){this.data=t},enumerable:!0,configurable:!0}),e}(s);e.DataNode=a;var u=function(t){function e(e,r){var n=t.call(this,"directive",r)||this;return n.name=e,n}return i(e,t),e}(a);e.ProcessingInstruction=u;var c=function(t){function e(e,r){var n=t.call(this,e)||this;return n.children=r,n}return i(e,t),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.children},set:function(t){this.children=t},enumerable:!0,configurable:!0}),e}(s);e.NodeWithChildren=c;var l=function(t){function e(e,r){var n=t.call(this,"script"===e?"script":"style"===e?"style":"tag",[])||this;return n.name=e,n.attribs=r,n.attribs=r,n}return i(e,t),Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name},set:function(t){this.name=t},enumerable:!0,configurable:!0}),e}(c);e.Element=l},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(15),o=n(r(130));e.getOuterHTML=o.default,e.getInnerHTML=function(t,r){return i.hasChildren(t)?t.children.map((function(t){return e.getOuterHTML(t,r)})).join(""):""},e.getText=function t(e){return Array.isArray(e)?e.map(t).join(""):i.isTag(e)?"br"===e.name?"\n":t(e.children):i.isCDATA(e)?t(e.children):i.isText(e)?e.data:""}},function(t,e,r){var n=r(30),i=r(131),o=r(132);o.elementNames.__proto__=null,o.attributeNames.__proto__=null;var s={__proto__:null,style:!0,script:!0,xmp:!0,iframe:!0,noembed:!0,noframes:!0,plaintext:!0,noscript:!0};var a={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},u=t.exports=function(t,e){Array.isArray(t)||t.cheerio||(t=[t]),e=e||{};for(var r="",i=0;i<t.length;i++){var o=t[i];"root"===o.type?r+=u(o.children,e):n.isTag(o)?r+=l(o,e):o.type===n.Directive?r+=h(o):o.type===n.Comment?r+=p(o):o.type===n.CDATA?r+=d(o):r+=f(o,e)}return r},c=["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"];function l(t,e){"foreign"===e.xmlMode&&(t.name=o.elementNames[t.name]||t.name,t.parent&&c.indexOf(t.parent.name)>=0&&(e=Object.assign({},e,{xmlMode:!1}))),!e.xmlMode&&["svg","math"].indexOf(t.name)>=0&&(e=Object.assign({},e,{xmlMode:"foreign"}));var r="<"+t.name,n=function(t,e){if(t){var r,n="";for(var s in t)r=t[s],n&&(n+=" "),"foreign"===e.xmlMode&&(s=o.attributeNames[s]||s),n+=s,(null!==r&&""!==r||e.xmlMode)&&(n+='="'+(e.decodeEntities?i.encodeXML(r):r.replace(/\"/g,"&quot;"))+'"');return n}}(t.attribs,e);return n&&(r+=" "+n),!e.xmlMode||t.children&&0!==t.children.length?(r+=">",t.children&&(r+=u(t.children,e)),a[t.name]&&!e.xmlMode||(r+="</"+t.name+">")):r+="/>",r}function h(t){return"<"+t.data+">"}function f(t,e){var r=t.data||"";return!e.decodeEntities||t.parent&&t.parent.name in s||(r=i.encodeXML(r)),r}function d(t){return"<![CDATA["+t.children[0].data+"]]>"}function p(t){return"\x3c!--"+t.data+"--\x3e"}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(59),i=r(60);e.decode=function(t,e){return(!e||e<=0?n.decodeXML:n.decodeHTML)(t)},e.decodeStrict=function(t,e){return(!e||e<=0?n.decodeXML:n.decodeHTMLStrict)(t)},e.encode=function(t,e){return(!e||e<=0?i.encodeXML:i.encodeHTML)(t)};var o=r(60);e.encodeXML=o.encodeXML,e.encodeHTML=o.encodeHTML,e.escape=o.escape,e.encodeHTML4=o.encodeHTML,e.encodeHTML5=o.encodeHTML;var s=r(59);e.decodeXML=s.decodeXML,e.decodeHTML=s.decodeHTML,e.decodeHTMLStrict=s.decodeHTMLStrict,e.decodeHTML4=s.decodeHTML,e.decodeHTML5=s.decodeHTML,e.decodeHTML4Strict=s.decodeHTMLStrict,e.decodeHTML5Strict=s.decodeHTMLStrict,e.decodeXMLStrict=s.decodeXML},function(t){t.exports=JSON.parse('{"elementNames":{"altglyph":"altGlyph","altglyphdef":"altGlyphDef","altglyphitem":"altGlyphItem","animatecolor":"animateColor","animatemotion":"animateMotion","animatetransform":"animateTransform","clippath":"clipPath","feblend":"feBlend","fecolormatrix":"feColorMatrix","fecomponenttransfer":"feComponentTransfer","fecomposite":"feComposite","feconvolvematrix":"feConvolveMatrix","fediffuselighting":"feDiffuseLighting","fedisplacementmap":"feDisplacementMap","fedistantlight":"feDistantLight","fedropshadow":"feDropShadow","feflood":"feFlood","fefunca":"feFuncA","fefuncb":"feFuncB","fefuncg":"feFuncG","fefuncr":"feFuncR","fegaussianblur":"feGaussianBlur","feimage":"feImage","femerge":"feMerge","femergenode":"feMergeNode","femorphology":"feMorphology","feoffset":"feOffset","fepointlight":"fePointLight","fespecularlighting":"feSpecularLighting","fespotlight":"feSpotLight","fetile":"feTile","feturbulence":"feTurbulence","foreignobject":"foreignObject","glyphref":"glyphRef","lineargradient":"linearGradient","radialgradient":"radialGradient","textpath":"textPath"},"attributeNames":{"definitionurl":"definitionURL","attributename":"attributeName","attributetype":"attributeType","basefrequency":"baseFrequency","baseprofile":"baseProfile","calcmode":"calcMode","clippathunits":"clipPathUnits","diffuseconstant":"diffuseConstant","edgemode":"edgeMode","filterunits":"filterUnits","glyphref":"glyphRef","gradienttransform":"gradientTransform","gradientunits":"gradientUnits","kernelmatrix":"kernelMatrix","kernelunitlength":"kernelUnitLength","keypoints":"keyPoints","keysplines":"keySplines","keytimes":"keyTimes","lengthadjust":"lengthAdjust","limitingconeangle":"limitingConeAngle","markerheight":"markerHeight","markerunits":"markerUnits","markerwidth":"markerWidth","maskcontentunits":"maskContentUnits","maskunits":"maskUnits","numoctaves":"numOctaves","pathlength":"pathLength","patterncontentunits":"patternContentUnits","patterntransform":"patternTransform","patternunits":"patternUnits","pointsatx":"pointsAtX","pointsaty":"pointsAtY","pointsatz":"pointsAtZ","preservealpha":"preserveAlpha","preserveaspectratio":"preserveAspectRatio","primitiveunits":"primitiveUnits","refx":"refX","refy":"refY","repeatcount":"repeatCount","repeatdur":"repeatDur","requiredextensions":"requiredExtensions","requiredfeatures":"requiredFeatures","specularconstant":"specularConstant","specularexponent":"specularExponent","spreadmethod":"spreadMethod","startoffset":"startOffset","stddeviation":"stdDeviation","stitchtiles":"stitchTiles","surfacescale":"surfaceScale","systemlanguage":"systemLanguage","tablevalues":"tableValues","targetx":"targetX","targety":"targetY","textlength":"textLength","viewbox":"viewBox","viewtarget":"viewTarget","xchannelselector":"xChannelSelector","ychannelselector":"yChannelSelector","zoomandpan":"zoomAndPan"}}')},function(t,e,r){"use strict";function n(t){return t.children||null}function i(t){return t.parent||null}function o(t,e){return t.attribs&&t.attribs[e]}Object.defineProperty(e,"__esModule",{value:!0}),e.getChildren=n,e.getParent=i,e.getSiblings=function(t){var e=i(t);return e?n(e):[t]},e.getAttributeValue=o,e.hasAttrib=function(t,e){return!!o(t,e)},e.getName=function(t){return t.name}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.removeElement=function(t){if(t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t.parent){var e=t.parent.children;e.splice(e.lastIndexOf(t),1)}},e.replaceElement=function(t,e){var r=e.prev=t.prev;r&&(r.next=e);var n=e.next=t.next;n&&(n.prev=e);var i=e.parent=t.parent;if(i){var o=i.children;o[o.lastIndexOf(t)]=e}},e.appendChild=function(t,e){if(e.parent=t,1!==t.children.push(e)){var r=t.children[t.children.length-2];r.next=e,e.prev=r,e.next=null}},e.append=function(t,e){var r=t.parent,n=t.next;if(e.next=n,e.prev=t,t.next=e,e.parent=r,n){if(n.prev=e,r){var i=r.children;i.splice(i.lastIndexOf(n),0,e)}}else r&&r.children.push(e)},e.prepend=function(t,e){var r=t.parent;if(r){var n=r.children;n.splice(n.lastIndexOf(t),0,e)}t.prev&&(t.prev.next=e),e.parent=r,e.prev=t.prev,e.next=t,t.prev=e}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(61),i=r(15);function o(t){return"text"===t.type}var s={tag_name:function(t){return"function"==typeof t?function(e){return i.isTag(e)&&t(e.name)}:"*"===t?i.isTag:function(e){return i.isTag(e)&&e.name===t}},tag_type:function(t){return"function"==typeof t?function(e){return t(e.type)}:function(e){return e.type===t}},tag_contains:function(t){return"function"==typeof t?function(e){return o(e)&&t(e.data)}:function(e){return o(e)&&e.data===t}}};function a(t,e){return"function"==typeof e?function(r){return i.isTag(r)&&e(r.attribs[t])}:function(r){return i.isTag(r)&&r.attribs[t]===e}}function u(t,e){return function(r){return t(r)||e(r)}}function c(t){var e=Object.keys(t).map((function(e){var r=t[e];return e in s?s[e](r):a(e,r)}));return 0===e.length?null:e.reduce(u)}e.testElement=function(t,e){var r=c(t);return!r||r(e)},e.getElements=function(t,e,r,i){void 0===i&&(i=1/0);var o=c(t);return o?n.filter(o,e,r,i):[]},e.getElementById=function(t,e,r){return void 0===r&&(r=!0),Array.isArray(e)||(e=[e]),n.findOne(a("id",t),e,r)},e.getElementsByTagName=function(t,e,r,i){return void 0===i&&(i=1/0),n.filter(s.tag_name(t),e,r,i)},e.getElementsByTagType=function(t,e,r,i){return void 0===r&&(r=!0),void 0===i&&(i=1/0),n.filter(s.tag_type(t),e,r,i)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(15);function i(t,e){var r=[],i=[];if(t===e)return 0;for(var o=n.hasChildren(t)?t:t.parent;o;)r.unshift(o),o=o.parent;for(o=n.hasChildren(e)?e:e.parent;o;)i.unshift(o),o=o.parent;for(var s=0;r[s]===i[s];)s++;if(0===s)return 1;var a=r[s-1],u=a.children,c=r[s],l=i[s];return u.indexOf(c)>u.indexOf(l)?a===e?20:4:a===t?10:2}e.removeSubsets=function(t){for(var e=t.length;--e>=0;){var r=t[e];if(e>0&&t.lastIndexOf(r,e-1)>=0)t.splice(e,1);else for(var n=r.parent;n;n=n.parent)if(t.indexOf(n)>-1){t.splice(e,1);break}}return t},e.compareDocumentPosition=i,e.uniqueSort=function(t){return(t=t.filter((function(t,e,r){return!r.includes(t,e+1)}))).sort((function(t,e){var r=i(t,e);return 2&r?-1:4&r?1:0})),t}},function(t,e){},function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e){void 0===e&&(e={});var r=t.call(this,(function(t){for(var e,n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];r.events.push([t].concat(n)),r._cbs[t]&&(e=r._cbs)[t].apply(e,n)}))||this;return r._cbs=e,r.events=[],r}return i(e,t),e.prototype.onreset=function(){this.events=[],this._cbs.onreset&&this._cbs.onreset()},e.prototype.restart=function(){var t;this._cbs.onreset&&this._cbs.onreset();for(var e=0;e<this.events.length;e++){var r=this.events[e],n=r[0],i=r.slice(1);this._cbs[n]&&(t=this._cbs)[n].apply(t,i)}},e}(o(r(139)).default);e.CollectingHandler=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this._func=t}return t.prototype.onattribute=function(t,e){this._func("onattribute",t,e)},t.prototype.oncdatastart=function(){this._func("oncdatastart")},t.prototype.oncdataend=function(){this._func("oncdataend")},t.prototype.ontext=function(t){this._func("ontext",t)},t.prototype.onprocessinginstruction=function(t,e){this._func("onprocessinginstruction",t,e)},t.prototype.oncomment=function(t){this._func("oncomment",t)},t.prototype.oncommentend=function(){this._func("oncommentend")},t.prototype.onclosetag=function(t){this._func("onclosetag",t)},t.prototype.onopentag=function(t,e){this._func("onopentag",t,e)},t.prototype.onopentagname=function(t){this._func("onopentagname",t)},t.prototype.onerror=function(t){this._func("onerror",t)},t.prototype.onend=function(){this._func("onend")},t.prototype.onparserinit=function(t){this._func("onparserinit",t)},t.prototype.onreset=function(){this._func("onreset")},t}();e.default=n},function(t){t.exports=JSON.parse('{"@context":{"alternate":"http://www.w3.org/1999/xhtml/vocab#alternate","appendix":"http://www.w3.org/1999/xhtml/vocab#appendix","cite":"http://www.w3.org/1999/xhtml/vocab#cite","bookmark":"http://www.w3.org/1999/xhtml/vocab#bookmark","contents":"http://www.w3.org/1999/xhtml/vocab#contents","chapter":"http://www.w3.org/1999/xhtml/vocab#chapter","copyright":"http://www.w3.org/1999/xhtml/vocab#copyright","first":"http://www.w3.org/1999/xhtml/vocab#first","glossary":"http://www.w3.org/1999/xhtml/vocab#glossary","help":"http://www.w3.org/1999/xhtml/vocab#help","icon":"http://www.w3.org/1999/xhtml/vocab#icon","index":"http://www.w3.org/1999/xhtml/vocab#index","last":"http://www.w3.org/1999/xhtml/vocab#last","license":"http://www.w3.org/1999/xhtml/vocab#license","meta":"http://www.w3.org/1999/xhtml/vocab#meta","next":"http://www.w3.org/1999/xhtml/vocab#next","prev":"http://www.w3.org/1999/xhtml/vocab#prev","previous":"http://www.w3.org/1999/xhtml/vocab#previous","section":"http://www.w3.org/1999/xhtml/vocab#section","start":"http://www.w3.org/1999/xhtml/vocab#start","stylesheet":"http://www.w3.org/1999/xhtml/vocab#stylesheet","subsection":"http://www.w3.org/1999/xhtml/vocab#subsection","top":"http://www.w3.org/1999/xhtml/vocab#top","up":"http://www.w3.org/1999/xhtml/vocab#up","p3pv1":"http://www.w3.org/1999/xhtml/vocab#p3pv1"}}')},function(t){t.exports=JSON.parse('{"@context":{"as":"https://www.w3.org/ns/activitystreams#","cat":"http://www.w3.org/ns/dcat#","cc":"http://creativecommons.org/ns#","cnt":"http://www.w3.org/2008/content#","csvw":"http://www.w3.org/ns/csvw#","ctag":"http://commontag.org/ns#","dc":"http://purl.org/dc/terms/","dc11":"http://purl.org/dc/elements/1.1/","dcat":"http://www.w3.org/ns/dcat#","dcterms":"http://purl.org/dc/terms/","dqv":"http://www.w3.org/ns/dqv#","duv":"https://www.w3.org/TR/vocab-duv#","earl":"http://www.w3.org/ns/earl#","foaf":"http://xmlns.com/foaf/0.1/","gldp":"http://www.w3.org/ns/people#","gr":"http://purl.org/goodrelations/v1#","grddl":"http://www.w3.org/2003/g/data-view#","ht":"http://www.w3.org/2006/http#","ical":"http://www.w3.org/2002/12/cal/icaltzd#","ldp":"http://www.w3.org/ns/ldp#","ma":"http://www.w3.org/ns/ma-ont#","oa":"http://www.w3.org/ns/oa#","odrl":"http://www.w3.org/ns/odrl/2/","og":"http://ogp.me/ns#","org":"http://www.w3.org/ns/org#","owl":"http://www.w3.org/2002/07/owl#","prov":"http://www.w3.org/ns/prov#","ptr":"http://www.w3.org/2009/pointers#","qb":"http://purl.org/linked-data/cube#","rev":"http://purl.org/stuff/rev#","rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","rdfa":"http://www.w3.org/ns/rdfa#","rdfs":"http://www.w3.org/2000/01/rdf-schema#","rif":"http://www.w3.org/2007/rif#","rr":"http://www.w3.org/ns/r2rml#","schema":"http://schema.org/","sd":"http://www.w3.org/ns/sparql-service-description#","sioc":"http://rdfs.org/sioc/ns#","skos":"http://www.w3.org/2004/02/skos/core#","skosxl":"http://www.w3.org/2008/05/skos-xl#","ssn":"http://www.w3.org/ns/ssn/","sosa":"http://www.w3.org/ns/sosa/","time":"http://www.w3.org/2006/time#","v":"http://rdf.data-vocabulary.org/#","vcard":"http://www.w3.org/2006/vcard/ns#","void":"http://rdfs.org/ns/void#","wdr":"http://www.w3.org/2007/05/powder#","wdrs":"http://www.w3.org/2007/05/powder-s#","xhv":"http://www.w3.org/1999/xhtml/vocab#","xml":"http://www.w3.org/XML/1998/namespace","xsd":"http://www.w3.org/2001/XMLSchema#","describedby":"http://www.w3.org/2007/05/powder-s#describedby","license":"http://www.w3.org/1999/xhtml/vocab#license","role":"http://www.w3.org/1999/xhtml/vocab#role"}}')},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(143))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);class i extends n.Mediator{constructor(t){super(t),this.combiner=this.createCombiner()}async mediate(t){let e;try{e=this.publish(t)}catch(t){e=[]}await Promise.all(e.map(({reply:t})=>t));const r=await Promise.all(e.map(e=>e.actor.runObservable(t)));return this.combiner(r)}mediateWith(t,e){throw new Error("Method not supported.")}createCombiner(){return t=>{const e={};return e[this.field]=r(144).apply({},[{}].concat(t.map(t=>t[this.field]))),e}}}e.MediatorCombineUnion=i},function(t,e){var r=/^(?:0|[1-9]\d*)$/;function n(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}var i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=i.propertyIsEnumerable,u=Math.max;function c(t,e){var r=g(t)||function(t){return function(t){return function(t){return!!t&&"object"==typeof t}(t)&&y(t)}(t)&&o.call(t,"callee")&&(!a.call(t,"callee")||"[object Arguments]"==s.call(t))}(t)?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],n=r.length,i=!!n;for(var u in t)!e&&!o.call(t,u)||i&&("length"==u||p(u,n))||r.push(u);return r}function l(t,e,r,n){return void 0===t||_(t,i[r])&&!o.call(n,r)?e:t}function h(t,e,r){var n=t[e];o.call(t,e)&&_(n,r)&&(void 0!==r||e in t)||(t[e]=r)}function f(t){if(!m(t))return function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}(t);var e,r,n,s=(r=(e=t)&&e.constructor,n="function"==typeof r&&r.prototype||i,e===n),a=[];for(var u in t)("constructor"!=u||!s&&o.call(t,u))&&a.push(u);return a}function d(t,e){return e=u(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=u(r.length-e,0),s=Array(o);++i<o;)s[i]=r[e+i];i=-1;for(var a=Array(e+1);++i<e;)a[i]=r[i];return a[e]=s,n(t,this,a)}}function p(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||r.test(t))&&t>-1&&t%1==0&&t<e}function _(t,e){return t===e||t!=t&&e!=e}var g=Array.isArray;function y(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}(t.length)&&!function(t){var e=m(t)?s.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}(t)}function m(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}var b,v=(b=function(t,e,r,n){!function(t,e,r,n){r||(r={});for(var i=-1,o=e.length;++i<o;){var s=e[i],a=n?n(r[s],t[s],s,r,t):void 0;h(r,s,void 0===a?t[s]:a)}}(e,function(t){return y(t)?c(t,!0):f(t)}(e),t,n)},d((function(t,e){var r=-1,n=e.length,i=n>1?e[n-1]:void 0,o=n>2?e[2]:void 0;for(i=b.length>3&&"function"==typeof i?(n--,i):void 0,o&&function(t,e,r){if(!m(r))return!1;var n=typeof e;return!!("number"==n?y(r)&&p(e,r.length):"string"==n&&e in r)&&_(r[e],t)}(e[0],e[1],o)&&(i=n<3?void 0:i,n=1),t=Object(t);++r<n;){var s=e[r];s&&b(t,s,r,i)}return t}))),w=d((function(t){return t.push(void 0,l),n(v,void 0,t)}));t.exports=w},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(146))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);class i extends n.Mediator{constructor(t){super(t),this.indexPicker=this.createIndexPicker()}createIndexPicker(){switch(this.type){case i.MIN:return t=>t.reduce((t,e,r)=>{const n=this.getOrDefault(e[this.field],1/0);return null!==n&&(isNaN(t[0])||t[0]>n)?[n,r]:t},[NaN,-1])[1];case i.MAX:return t=>t.reduce((t,e,r)=>{const n=this.getOrDefault(e[this.field],-1/0);return null!==n&&(isNaN(t[0])||t[0]<n)?[n,r]:t},[NaN,-1])[1]}throw new Error('No valid "type" value was given, must be either '+i.MIN+" or "+i.MAX+", but got: "+this.type)}getOrDefault(t,e){return void 0===t?e:t}async mediateWith(t,e){let r=e.map(({reply:t})=>t);const n=[];if(this.ignoreErrors){const t={};t[this.field]=null,r=r.map(e=>e.catch(e=>(n.push(e),t)))}const i=await Promise.all(r),o=this.indexPicker(i);if(o<0)throw new Error("All actors rejected their test in "+this.name+"\n"+n.map(t=>t.toString()).join("\n"));return e[o].actor}}i.MIN="https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/Mediator/Number/type/TypeMin",i.MAX="https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/Mediator/Number/type/TypeMax",e.MediatorNumber=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(148))},function(t,e,r){"use strict";(function(t,n){Object.defineProperty(e,"__esModule",{value:!0});const i=r(16);r(32);const o=r(150);class s extends i.ActorHttp{constructor(t){super(t),this.userAgent=s.createUserAgent(),this.requester=new o.default(t.agentOptions?JSON.parse(t.agentOptions):void 0)}static createUserAgent(){return`Comunica/actor-http-native (${"undefined"==typeof window?"Node.js "+t.version+"; "+t.platform:"Browser-"+window.navigator.userAgent})`}async test(t){return{time:1/0}}async run(t){const e={};if(t.input.url?(e.url=t.input.url,Object.assign(e,t.input)):e.url=t.input,t.init&&Object.assign(e,t.init),e.headers){const t={};e.headers.forEach((e,r)=>{t[r]=e}),e.headers=t}else e.headers={};return e.headers["user-agent"]||(e.headers["user-agent"]=this.userAgent),e.method=e.method||"GET",this.logInfo(t.context,`Requesting ${e.url}`),new Promise((t,r)=>{const i=this.requester.createRequest(e);i.on("error",r),i.on("response",i=>{i.on("error",t=>{i=null,r(t)}),"HEAD"===e.method&&i.destroy(),n(()=>{if(i){i.cancel=()=>Promise.resolve(i.destroy());const r=new Headers(i.headers),n={body:i,headers:r,ok:i.statusCode<300,redirected:e.url!==i.responseUrl,status:i.statusCode,url:r.has("content-location")?r.get("content-location"):i.responseUrl};t(n)}})})})}}e.ActorHttpNative=s}).call(this,r(9),r(26).setImmediate)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",(function(){return d})),r.d(e,"Request",(function(){return v})),r.d(e,"Response",(function(){return x})),r.d(e,"DOMException",(function(){return S})),r.d(e,"fetch",(function(){return T}));var n="URLSearchParams"in self,i="Symbol"in self&&"iterator"in Symbol,o="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),s="FormData"in self,a="ArrayBuffer"in self;if(a)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(t){return t&&u.indexOf(Object.prototype.toString.call(t))>-1};function l(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function h(t){return"string"!=typeof t&&(t=String(t)),t}function f(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return i&&(e[Symbol.iterator]=function(){return e}),e}function d(t){this.map={},t instanceof d?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function p(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function _(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function g(t){var e=new FileReader,r=_(e);return e.readAsArrayBuffer(t),r}function y(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:o&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:s&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():a&&o&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):a&&(ArrayBuffer.prototype.isPrototypeOf(t)||c(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},o&&(this.blob=function(){var t=p(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?p(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(g)}),this.text=function(){var t,e,r,n=p(this);if(n)return n;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,r=_(e),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(w)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(t,e){t=l(t),e=h(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},d.prototype.delete=function(t){delete this.map[l(t)]},d.prototype.get=function(t){return t=l(t),this.has(t)?this.map[t]:null},d.prototype.has=function(t){return this.map.hasOwnProperty(l(t))},d.prototype.set=function(t,e){this.map[l(t)]=h(e)},d.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},d.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),f(t)},d.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),f(t)},d.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),f(t)},i&&(d.prototype[Symbol.iterator]=d.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(t,e){var r,n,i=(e=e||{}).body;if(t instanceof v){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new d(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new d(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),b.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function w(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),i=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(i))}})),e}function x(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new d(e.headers),this.url=e.url||"",this._initBody(t)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},m.call(v.prototype),m.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},x.error=function(){var t=new x(null,{status:0,statusText:""});return t.type="error",t};var E=[301,302,303,307,308];x.redirect=function(t,e){if(-1===E.indexOf(e))throw new RangeError("Invalid status code");return new x(null,{status:e,headers:{location:t}})};var S=self.DOMException;try{new S}catch(t){(S=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),S.prototype.constructor=S}function T(t,e){return new Promise((function(r,n){var i=new v(t,e);if(i.signal&&i.signal.aborted)return n(new S("Aborted","AbortError"));var s=new XMLHttpRequest;function a(){s.abort()}s.onload=function(){var t,e,n={status:s.status,statusText:s.statusText,headers:(t=s.getAllResponseHeaders()||"",e=new d,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var i=r.join(":").trim();e.append(n,i)}})),e)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var i="response"in s?s.response:s.responseText;r(new x(i,n))},s.onerror=function(){n(new TypeError("Network request failed"))},s.ontimeout=function(){n(new TypeError("Network request failed"))},s.onabort=function(){n(new S("Aborted","AbortError"))},s.open(i.method,i.url,!0),"include"===i.credentials?s.withCredentials=!0:"omit"===i.credentials&&(s.withCredentials=!1),"responseType"in s&&o&&(s.responseType="blob"),i.headers.forEach((function(t,e){s.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",a),s.onreadystatechange=function(){4===s.readyState&&i.signal.removeEventListener("abort",a)}),s.send(void 0===i._bodyInit?null:i._bodyInit)}))}T.polyfill=!0,self.fetch||(self.fetch=T,self.Headers=d,self.Request=v,self.Response=x)},function(t,e,r){"use strict";
/*! @license MIT ©2013-2016 Ruben Verborgh, Ghent University - imec */Object.defineProperty(e,"__esModule",{value:!0});const n=r(12),i=r(151),o=r(1),s={"accept-encoding":!0,"user-agent":!0,referer:!0};e.default=class{constructor(){this.negotiatedResources={}}createRequest(t){this.negotiatedResources[this.removeQuery(t.url)]&&delete t.headers["accept-datetime"];const e=new XMLHttpRequest,r=t.headers;e.open(t.method,t.url,!0),e.timeout=t.timeout;for(const t in r)t in s||!r[t]||e.setRequestHeader(t,r[t]);const a=new n.EventEmitter;return a.abort=()=>{e.abort()},e.onload=()=>{const n=new o.Readable;n.push(e.responseText||""),n.push(null),n.statusCode=e.status,n.responseUrl=e.responseURL,n.headers={};const s=n.headers,u=e.getAllResponseHeaders()||"",c=/^([^:\n\r]+):[ \t]*([^\r\n]*)$/gm;let l=c.exec(u);for(;l;)s[l[1].toLowerCase()]=l[2],l=c.exec(u);if(a.emit("response",n),r["accept-datetime"]&&s["memento-datetime"]){const e=this.removeQuery(s["content-location"]||t.url);if(!this.negotiatedResources[e]){const t=s.link&&i(s.link);e!==this.removeQuery(t&&t.timegate&&t.timegate.url)&&(this.negotiatedResources[e]=!0)}}},e.onerror=()=>{a.emit("error",new Error("Error requesting "+t.url))},e.ontimeout=()=>{a.emit("error",new Error("Timeout requesting "+t.url))},e.send(),a}removeQuery(t){return t?t.replace(/\?.*$/,""):""}}},function(t,e,r){"use strict";var n=r(63),i=r(154),o=r(157);function s(t){return t&&t.rel}function a(t,e){return e.rel.split(/\s+/).forEach((function(r){t[r]=o(e,{rel:r})})),t}function u(t,e){var r=e.match(/\s*(.+)\s*=\s*"?([^"]+)"?/);return r&&(t[r[1]]=r[2]),t}function c(t){try{var e=t.match(/<?([^>]*)>(.*)/),r=e[1],s=e[2].split(";"),a=i.parse(r),c=n.parse(a.query);s.shift();var l=s.reduce(u,{});return(l=o(c,l)).url=r,l}catch(t){return null}}t.exports=function(t){return t?t.split(/,\s*</).map(c).filter(s).reduce(a,{}):null}},function(t,e,r){"use strict";function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,r,o){e=e||"&",r=r||"=";var s={};if("string"!=typeof t||0===t.length)return s;var a=/\+/g;t=t.split(e);var u=1e3;o&&"number"==typeof o.maxKeys&&(u=o.maxKeys);var c=t.length;u>0&&c>u&&(c=u);for(var l=0;l<c;++l){var h,f,d,p,_=t[l].replace(a,"%20"),g=_.indexOf(r);g>=0?(h=_.substr(0,g),f=_.substr(g+1)):(h=_,f=""),d=decodeURIComponent(h),p=decodeURIComponent(f),n(s,d)?i(s[d])?s[d].push(p):s[d]=[s[d],p]:s[d]=p}return s};var i=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,r){"use strict";var n=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,r,a){return e=e||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?o(s(t),(function(s){var a=encodeURIComponent(n(s))+r;return i(t[s])?o(t[s],(function(t){return a+encodeURIComponent(n(t))})).join(e):a+encodeURIComponent(n(t[s]))})).join(e):a?encodeURIComponent(n(a))+r+encodeURIComponent(n(t)):""};var i=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function o(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var s=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}},function(t,e,r){"use strict";var n=r(155),i=r(156);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=b,e.resolve=function(t,e){return b(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?b(t,!1,!0).resolveObject(e):e},e.format=function(t){i.isString(t)&&(t=b(t));return t instanceof o?t.format():o.prototype.format.call(t)},e.Url=o;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(c),h=["%","/","?",";","#"].concat(l),f=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,_={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},m=r(63);function b(t,e,r){if(t&&i.isObject(t)&&t instanceof o)return t;var n=new o;return n.parse(t,e,r),n}o.prototype.parse=function(t,e,r){if(!i.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var o=t.indexOf("?"),a=-1!==o&&o<t.indexOf("#")?"?":"#",c=t.split(a);c[0]=c[0].replace(/\\/g,"/");var b=t=c.join(a);if(b=b.trim(),!r&&1===t.split("#").length){var v=u.exec(b);if(v)return this.path=b,this.href=b,this.pathname=v[1],v[2]?(this.search=v[2],this.query=e?m.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var w=s.exec(b);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,b=b.substr(w.length)}if(r||w||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var E="//"===b.substr(0,2);!E||w&&g[w]||(b=b.substr(2),this.slashes=!0)}if(!g[w]&&(E||w&&!y[w])){for(var S,T,I=-1,R=0;R<f.length;R++){-1!==(C=b.indexOf(f[R]))&&(-1===I||C<I)&&(I=C)}-1!==(T=-1===I?b.lastIndexOf("@"):b.lastIndexOf("@",I))&&(S=b.slice(0,T),b=b.slice(T+1),this.auth=decodeURIComponent(S)),I=-1;for(R=0;R<h.length;R++){var C;-1!==(C=b.indexOf(h[R]))&&(-1===I||C<I)&&(I=C)}-1===I&&(I=b.length),this.host=b.slice(0,I),b=b.slice(I),this.parseHost(),this.hostname=this.hostname||"";var O="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!O)for(var A=this.hostname.split(/\./),P=(R=0,A.length);R<P;R++){var N=A[R];if(N&&!N.match(d)){for(var D="",k=0,j=N.length;k<j;k++)N.charCodeAt(k)>127?D+="x":D+=N[k];if(!D.match(d)){var L=A.slice(0,R),M=A.slice(R+1),F=N.match(p);F&&(L.push(F[1]),M.unshift(F[2])),M.length&&(b="/"+M.join(".")+b),this.hostname=L.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),O||(this.hostname=n.toASCII(this.hostname));var q=this.port?":"+this.port:"",B=this.hostname||"";this.host=B+q,this.href+=this.host,O&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!_[x])for(R=0,P=l.length;R<P;R++){var U=l[R];if(-1!==b.indexOf(U)){var V=encodeURIComponent(U);V===U&&(V=escape(U)),b=b.split(U).join(V)}}var z=b.indexOf("#");-1!==z&&(this.hash=b.substr(z),b=b.slice(0,z));var G=b.indexOf("?");if(-1!==G?(this.search=b.substr(G),this.query=b.substr(G+1),e&&(this.query=m.parse(this.query)),b=b.slice(0,G)):e&&(this.search="",this.query={}),b&&(this.pathname=b),y[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){q=this.pathname||"";var H=this.search||"";this.path=q+H}return this.href=this.format(),this},o.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,s="";this.host?o=t+this.host:this.hostname&&(o=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(s=m.stringify(this.query));var a=this.search||s&&"?"+s||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||y[e])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),e+o+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+n},o.prototype.resolve=function(t){return this.resolveObject(b(t,!1,!0)).format()},o.prototype.resolveObject=function(t){if(i.isString(t)){var e=new o;e.parse(t,!1,!0),t=e}for(var r=new o,n=Object.keys(this),s=0;s<n.length;s++){var a=n[s];r[a]=this[a]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var u=Object.keys(t),c=0;c<u.length;c++){var l=u[c];"protocol"!==l&&(r[l]=t[l])}return y[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!y[t.protocol]){for(var h=Object.keys(t),f=0;f<h.length;f++){var d=h[f];r[d]=t[d]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||g[t.protocol])r.pathname=t.pathname;else{for(var p=(t.pathname||"").split("/");p.length&&!(t.host=p.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),r.pathname=p.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var _=r.pathname||"",m=r.search||"";r.path=_+m}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var b=r.pathname&&"/"===r.pathname.charAt(0),v=t.host||t.pathname&&"/"===t.pathname.charAt(0),w=v||b||r.host&&t.pathname,x=w,E=r.pathname&&r.pathname.split("/")||[],S=(p=t.pathname&&t.pathname.split("/")||[],r.protocol&&!y[r.protocol]);if(S&&(r.hostname="",r.port=null,r.host&&(""===E[0]?E[0]=r.host:E.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===p[0]?p[0]=t.host:p.unshift(t.host)),t.host=null),w=w&&(""===p[0]||""===E[0])),v)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,E=p;else if(p.length)E||(E=[]),E.pop(),E=E.concat(p),r.search=t.search,r.query=t.query;else if(!i.isNullOrUndefined(t.search)){if(S)r.hostname=r.host=E.shift(),(O=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=O.shift(),r.host=r.hostname=O.shift());return r.search=t.search,r.query=t.query,i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!E.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var T=E.slice(-1)[0],I=(r.host||t.host||E.length>1)&&("."===T||".."===T)||""===T,R=0,C=E.length;C>=0;C--)"."===(T=E[C])?E.splice(C,1):".."===T?(E.splice(C,1),R++):R&&(E.splice(C,1),R--);if(!w&&!x)for(;R--;R)E.unshift("..");!w||""===E[0]||E[0]&&"/"===E[0].charAt(0)||E.unshift(""),I&&"/"!==E.join("/").substr(-1)&&E.push("");var O,A=""===E[0]||E[0]&&"/"===E[0].charAt(0);S&&(r.hostname=r.host=A?"":E.length?E.shift():"",(O=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=O.shift(),r.host=r.hostname=O.shift()));return(w=w||r.host&&E.length)&&!A&&E.unshift(""),E.length?r.pathname=E.join("/"):(r.pathname=null,r.path=null),i.isNull(r.pathname)&&i.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e,r){(function(t,n){var i;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(o){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof n&&n;s.global!==s&&s.window!==s&&s.self;var a,u=2147483647,c=/^xn--/,l=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},d=Math.floor,p=String.fromCharCode;function _(t){throw new RangeError(f[t])}function g(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function y(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+g((t=t.replace(h,".")).split("."),e).join(".")}function m(t){for(var e,r,n=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(r=t.charCodeAt(i++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),i--):n.push(e);return n}function b(t){return g(t,(function(t){var e="";return t>65535&&(e+=p((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=p(t)})).join("")}function v(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function w(t,e,r){var n=0;for(t=r?d(t/700):t>>1,t+=d(t/e);t>455;n+=36)t=d(t/35);return d(n+36*t/(t+38))}function x(t){var e,r,n,i,o,s,a,c,l,h,f,p=[],g=t.length,y=0,m=128,v=72;for((r=t.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&_("not-basic"),p.push(t.charCodeAt(n));for(i=r>0?r+1:0;i<g;){for(o=y,s=1,a=36;i>=g&&_("invalid-input"),((c=(f=t.charCodeAt(i++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:36)>=36||c>d((u-y)/s))&&_("overflow"),y+=c*s,!(c<(l=a<=v?1:a>=v+26?26:a-v));a+=36)s>d(u/(h=36-l))&&_("overflow"),s*=h;v=w(y-o,e=p.length+1,0==o),d(y/e)>u-m&&_("overflow"),m+=d(y/e),y%=e,p.splice(y++,0,m)}return b(p)}function E(t){var e,r,n,i,o,s,a,c,l,h,f,g,y,b,x,E=[];for(g=(t=m(t)).length,e=128,r=0,o=72,s=0;s<g;++s)(f=t[s])<128&&E.push(p(f));for(n=i=E.length,i&&E.push("-");n<g;){for(a=u,s=0;s<g;++s)(f=t[s])>=e&&f<a&&(a=f);for(a-e>d((u-r)/(y=n+1))&&_("overflow"),r+=(a-e)*y,e=a,s=0;s<g;++s)if((f=t[s])<e&&++r>u&&_("overflow"),f==e){for(c=r,l=36;!(c<(h=l<=o?1:l>=o+26?26:l-o));l+=36)x=c-h,b=36-h,E.push(p(v(h+x%b,0))),c=d(x/b);E.push(p(v(c,0))),o=w(r,y,n==i),r=0,++n}++r,++e}return E.join("")}a={version:"1.4.1",ucs2:{decode:m,encode:b},decode:x,encode:E,toASCII:function(t){return y(t,(function(t){return l.test(t)?"xn--"+E(t):t}))},toUnicode:function(t){return y(t,(function(t){return c.test(t)?x(t.slice(4).toLowerCase()):t}))}},void 0===(i=function(){return a}.call(e,r,e,t))||(t.exports=i)}()}).call(this,r(47)(t),r(4))},function(t,e,r){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e){t.exports=function(){for(var t={},e=0;e<arguments.length;e++){var n=arguments[e];for(var i in n)r.call(n,i)&&(t[i]=n[i])}return t};var r=Object.prototype.hasOwnProperty},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(159))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(14),i=r(51),o=r(1);class s extends n.ActorRdfParseFixedMediaTypes{constructor(t){super(t)}async runHandle(t,e,r){const n=new o.Readable({objectMode:!0});return n._read=async()=>{n._read=null;let e=1;const o=t=>n.emit("error",t),s=()=>{0==--e&&n.push(null)},a={baseIRI:t.baseIRI,context:r,emit:t=>n.emit("data",t),end:s,error:o,headers:t.headers};Promise.all(this.busRdfParseHtml.publish(a)).then(async r=>{e+=r.length;const n=[];for(const t of r){const{htmlParseListener:e}=await t.actor.run(a);n.push(e)}const u=new i.Parser({onclosetag:()=>{try{for(const t of n)t.onTagClose()}catch(t){o(t)}},onend:()=>{try{for(const t of n)t.onEnd()}catch(t){o(t)}s()},onopentag:(t,e)=>{try{for(const r of n)r.onTagOpen(t,e)}catch(t){o(t)}},ontext:t=>{try{for(const e of n)e.onText(t)}catch(t){o(t)}}},{decodeEntities:!0,recognizeSelfClosing:!0,xmlMode:!1});t.input.on("error",o),t.input.pipe(u)})},{quads:n}}}e.ActorRdfParseHtml=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(161))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(64),i=r(50);class o extends n.ActorRdfParseHtml{constructor(t){super(t)}async test(t){return!0}async run(t){const e=t.headers?t.headers.get("content-type"):null,r=t.headers?t.headers.get("content-language"):null,n=e&&e.indexOf("xml")>=0?"xhtml":"html",o=new i.RdfaParser({baseIRI:t.baseIRI,profile:n,language:r});o.on("error",t.error),o.on("data",t.emit);const s=o.onEnd;return o.onEnd=()=>{s.call(o),t.end()},{htmlParseListener:o}}}e.ActorRdfParseHtmlRdfa=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);class i extends n.Actor{constructor(t){super(t)}}e.ActorRdfParseHtml=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(164))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(64),i=r(165);class o extends n.ActorRdfParseHtml{constructor(t){super(t)}async test(t){return!0}async run(t){const e=(await this.mediatorRdfParseMediatypes.mediate({context:t.context,mediaTypes:!0})).mediaTypes;return{htmlParseListener:new i.HtmlScriptListener(this.mediatorRdfParseHandle,t.emit,t.error,t.end,e,t.context,t.baseIRI,t.headers)}}}e.ActorRdfParseHtmlScript=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1),i=r(11);class o{constructor(t,e,r,n,i,o,s,a){this.handleMediaType=null,this.textChunks=null,this.textChunksJsonLd=[],this.endBarrier=1,this.passedScripts=0,this.isFinalJsonLdProcessing=!1,this.mediatorRdfParseHandle=t,this.cbQuad=e,this.cbError=r,this.cbEnd=n,this.supportedTypes=i,this.context=o,this.baseIRI=s,this.headers=a,this.onlyFirstScript=o&&!1===o.get("extractAllScripts");const u=this.baseIRI.indexOf("#");this.targetScriptId=u>0?this.baseIRI.substr(u+1,this.baseIRI.length):null}static newErrorCoded(t,e){const r=new Error(t);return r.code=e,r}onEnd(){0==--this.endBarrier&&(this.textChunksJsonLd.length>0?(this.handleMediaType="application/ld+json",this.textChunks=this.textChunksJsonLd,this.textChunks.push("]"),this.textChunksJsonLd=[],this.isFinalJsonLdProcessing=!0,this.endBarrier++,this.onTagClose()):(0===this.passedScripts&&this.targetScriptId&&this.cbError(o.newErrorCoded(`Failed to find targeted script id "${this.targetScriptId}"`,"loading document failed")),this.cbEnd()),this.isFinalJsonLdProcessing=!1)}onTagClose(){if(this.handleMediaType)if(this.requiresCustomJsonLdHandling(this.handleMediaType)&&!this.isFinalJsonLdProcessing)this.handleMediaType=null,this.textChunks=null,this.onEnd();else{const t=new n.Readable({objectMode:!0});t._read=()=>{};const e=this.textChunks,r={context:this.context,handle:{baseIRI:this.baseIRI,input:t,headers:this.headers},handleMediaType:this.handleMediaType};this.mediatorRdfParseHandle.mediate(r).then(({handle:r})=>{r.quads.on("error",t=>this.cbError(o.newErrorCoded(t.message,"invalid script element"))).on("data",this.cbQuad).on("end",()=>this.onEnd());for(const r of e)t.push(r);t.push(null)}).catch(this.cbError),this.handleMediaType=null,this.textChunks=null}}onTagOpen(t,e){"base"===t&&e.href&&(this.baseIRI=i.resolve(e.href,this.baseIRI)),"script"!==t||this.targetScriptId&&e.id!==this.targetScriptId?this.handleMediaType=null:this.supportedTypes[e.type]?this.onlyFirstScript&&this.passedScripts>0?this.handleMediaType=null:(this.passedScripts++,this.handleMediaType=e.type,this.endBarrier++,this.requiresCustomJsonLdHandling(this.handleMediaType)?(this.textChunks=this.textChunksJsonLd,this.textChunks.push(0===this.textChunks.length?"[":",")):this.textChunks=[]):this.targetScriptId&&this.cbError(o.newErrorCoded(`Targeted script "${this.targetScriptId}" does not have a supported type`,"loading document failed"))}onText(t){this.handleMediaType&&this.textChunks.push(t)}requiresCustomJsonLdHandling(t){return!this.onlyFirstScript&&!this.targetScriptId&&"application/ld+json"===t}}e.HtmlScriptListener=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(167))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(14),i=r(168),o=r(187);class s extends n.ActorRdfParseFixedMediaTypes{constructor(t){super(t)}async testHandle(t,e,r){if(!(e in this.mediaTypes||e.endsWith("+json")))throw new Error("Unrecognized media type: "+e);return await this.testHandleChecked(t)}async runHandle(t,e,r){return{quads:i.JsonLdParser.fromHttpResponse(t.baseIRI,e,t.headers,{documentLoader:new o.DocumentLoaderMediated(this.mediatorHttp,r)}).import(t.input)}}}e.ActorRdfParseJsonLd=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(65))},function(t,e,r){(function(e){var r={},n=r.LEFT_BRACE=1,i=r.RIGHT_BRACE=2,o=r.LEFT_BRACKET=3,s=r.RIGHT_BRACKET=4,a=r.COLON=5,u=r.COMMA=6,c=r.TRUE=7,l=r.FALSE=8,h=r.NULL=9,f=r.STRING=10,d=r.NUMBER=11,p=r.START=17,_=r.STOP=18,g=r.TRUE1=33,y=r.TRUE2=34,m=r.TRUE3=35,b=r.FALSE1=49,v=r.FALSE2=50,w=r.FALSE3=51,x=r.FALSE4=52,E=r.NULL1=65,S=r.NULL2=66,T=r.NULL3=67,I=r.NUMBER1=81,R=r.NUMBER3=83,C=r.STRING1=97,O=r.STRING2=98,A=r.STRING3=99,P=r.STRING4=100,N=r.STRING5=101,D=r.STRING6=102,k=r.VALUE=113,j=r.KEY=114,L=r.OBJECT=129,M=r.ARRAY=130,F="\\".charCodeAt(0),q="/".charCodeAt(0),B="\b".charCodeAt(0),U="\f".charCodeAt(0),V="\n".charCodeAt(0),z="\r".charCodeAt(0),G="\t".charCodeAt(0);function H(){this.tState=p,this.value=void 0,this.string=void 0,this.stringBuffer=e.alloc?e.alloc(65536):new e(65536),this.stringBufferOffset=0,this.unicode=void 0,this.highSurrogate=void 0,this.key=void 0,this.mode=void 0,this.stack=[],this.state=k,this.bytes_remaining=0,this.bytes_in_sequence=0,this.temp_buffs={2:new e(2),3:new e(3),4:new e(4)},this.offset=-1}H.toknam=function(t){for(var e=Object.keys(r),n=0,i=e.length;n<i;n++){var o=e[n];if(r[o]===t)return o}return t&&"0x"+t.toString(16)};var W=H.prototype;W.onError=function(t){throw t},W.charError=function(t,e){this.tState=_,this.onError(new Error("Unexpected "+JSON.stringify(String.fromCharCode(t[e]))+" at position "+e+" in state "+H.toknam(this.tState)))},W.appendStringChar=function(t){this.stringBufferOffset>=65536&&(this.string+=this.stringBuffer.toString("utf8"),this.stringBufferOffset=0),this.stringBuffer[this.stringBufferOffset++]=t},W.appendStringBuf=function(t,e,r){var n=t.length;"number"==typeof e&&(n="number"==typeof r?r<0?t.length-e+r:r-e:t.length-e),n<0&&(n=0),this.stringBufferOffset+n>65536&&(this.string+=this.stringBuffer.toString("utf8",0,this.stringBufferOffset),this.stringBufferOffset=0),t.copy(this.stringBuffer,this.stringBufferOffset,e,r),this.stringBufferOffset+=n},W.write=function(t){var r;"string"==typeof t&&(t=new e(t));for(var _=0,k=t.length;_<k;_++)if(this.tState===p){if(r=t[_],this.offset++,123===r)this.onToken(n,"{");else if(125===r)this.onToken(i,"}");else if(91===r)this.onToken(o,"[");else if(93===r)this.onToken(s,"]");else if(58===r)this.onToken(a,":");else if(44===r)this.onToken(u,",");else if(116===r)this.tState=g;else if(102===r)this.tState=b;else if(110===r)this.tState=E;else if(34===r)this.string="",this.stringBufferOffset=0,this.tState=C;else if(45===r)this.string="-",this.tState=I;else if(r>=48&&r<64)this.string=String.fromCharCode(r),this.tState=R;else if(32!==r&&9!==r&&10!==r&&13!==r)return this.charError(t,_)}else if(this.tState===C)if(r=t[_],this.bytes_remaining>0){for(var j=0;j<this.bytes_remaining;j++)this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence-this.bytes_remaining+j]=t[j];this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]),this.bytes_in_sequence=this.bytes_remaining=0,_=_+j-1}else if(0===this.bytes_remaining&&r>=128){if(r<=193||r>244)return this.onError(new Error("Invalid UTF-8 character at position "+_+" in state "+H.toknam(this.tState)));if(r>=194&&r<=223&&(this.bytes_in_sequence=2),r>=224&&r<=239&&(this.bytes_in_sequence=3),r>=240&&r<=244&&(this.bytes_in_sequence=4),this.bytes_in_sequence+_>t.length){for(var L=0;L<=t.length-1-_;L++)this.temp_buffs[this.bytes_in_sequence][L]=t[_+L];this.bytes_remaining=_+this.bytes_in_sequence-t.length,_=t.length-1}else this.appendStringBuf(t,_,_+this.bytes_in_sequence),_=_+this.bytes_in_sequence-1}else if(34===r)this.tState=p,this.string+=this.stringBuffer.toString("utf8",0,this.stringBufferOffset),this.stringBufferOffset=0,this.onToken(f,this.string),this.offset+=e.byteLength(this.string,"utf8")+1,this.string=void 0;else if(92===r)this.tState=O;else{if(!(r>=32))return this.charError(t,_);this.appendStringChar(r)}else if(this.tState===O)if(34===(r=t[_]))this.appendStringChar(r),this.tState=C;else if(92===r)this.appendStringChar(F),this.tState=C;else if(47===r)this.appendStringChar(q),this.tState=C;else if(98===r)this.appendStringChar(B),this.tState=C;else if(102===r)this.appendStringChar(U),this.tState=C;else if(110===r)this.appendStringChar(V),this.tState=C;else if(114===r)this.appendStringChar(z),this.tState=C;else if(116===r)this.appendStringChar(G),this.tState=C;else{if(117!==r)return this.charError(t,_);this.unicode="",this.tState=A}else if(this.tState===A||this.tState===P||this.tState===N||this.tState===D){if(!((r=t[_])>=48&&r<64||r>64&&r<=70||r>96&&r<=102))return this.charError(t,_);if(this.unicode+=String.fromCharCode(r),this.tState++===D){var M=parseInt(this.unicode,16);this.unicode=void 0,void 0!==this.highSurrogate&&M>=56320&&M<57344?(this.appendStringBuf(new e(String.fromCharCode(this.highSurrogate,M))),this.highSurrogate=void 0):void 0===this.highSurrogate&&M>=55296&&M<56320?this.highSurrogate=M:(void 0!==this.highSurrogate&&(this.appendStringBuf(new e(String.fromCharCode(this.highSurrogate))),this.highSurrogate=void 0),this.appendStringBuf(new e(String.fromCharCode(M)))),this.tState=C}}else if(this.tState===I||this.tState===R)switch(r=t[_]){case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 46:case 101:case 69:case 43:case 45:this.string+=String.fromCharCode(r),this.tState=R;break;default:this.tState=p;var W=Number(this.string);if(isNaN(W))return this.charError(t,_);this.string.match(/[0-9]+/)==this.string&&W.toString()!=this.string?this.onToken(f,this.string):this.onToken(d,W),this.offset+=this.string.length-1,this.string=void 0,_--}else if(this.tState===g){if(114!==t[_])return this.charError(t,_);this.tState=y}else if(this.tState===y){if(117!==t[_])return this.charError(t,_);this.tState=m}else if(this.tState===m){if(101!==t[_])return this.charError(t,_);this.tState=p,this.onToken(c,!0),this.offset+=3}else if(this.tState===b){if(97!==t[_])return this.charError(t,_);this.tState=v}else if(this.tState===v){if(108!==t[_])return this.charError(t,_);this.tState=w}else if(this.tState===w){if(115!==t[_])return this.charError(t,_);this.tState=x}else if(this.tState===x){if(101!==t[_])return this.charError(t,_);this.tState=p,this.onToken(l,!1),this.offset+=4}else if(this.tState===E){if(117!==t[_])return this.charError(t,_);this.tState=S}else if(this.tState===S){if(108!==t[_])return this.charError(t,_);this.tState=T}else if(this.tState===T){if(108!==t[_])return this.charError(t,_);this.tState=p,this.onToken(h,null),this.offset+=3}},W.onToken=function(t,e){},W.parseError=function(t,e){this.tState=_,this.onError(new Error("Unexpected "+H.toknam(t)+(e?"("+JSON.stringify(e)+")":"")+" in state "+H.toknam(this.state)))},W.push=function(){this.stack.push({value:this.value,key:this.key,mode:this.mode})},W.pop=function(){var t=this.value,e=this.stack.pop();this.value=e.value,this.key=e.key,this.mode=e.mode,this.emit(t),this.mode||(this.state=k)},W.emit=function(t){this.mode&&(this.state=u),this.onValue(t)},W.onValue=function(t){},W.onToken=function(t,e){if(this.state===k)if(t===f||t===d||t===c||t===l||t===h)this.value&&(this.value[this.key]=e),this.emit(e);else if(t===n)this.push(),this.value?this.value=this.value[this.key]={}:this.value={},this.key=void 0,this.state=j,this.mode=L;else if(t===o)this.push(),this.value?this.value=this.value[this.key]=[]:this.value=[],this.key=0,this.mode=M,this.state=k;else if(t===i){if(this.mode!==L)return this.parseError(t,e);this.pop()}else{if(t!==s)return this.parseError(t,e);if(this.mode!==M)return this.parseError(t,e);this.pop()}else if(this.state===j)if(t===f)this.key=e,this.state=a;else{if(t!==i)return this.parseError(t,e);this.pop()}else if(this.state===a){if(t!==a)return this.parseError(t,e);this.state=k}else{if(this.state!==u)return this.parseError(t,e);if(t===u)this.mode===M?(this.key++,this.state=k):this.mode===L&&(this.state=j);else{if(!(t===s&&this.mode===M||t===i&&this.mode===L))return this.parseError(t,e);this.pop()}}},H.C=r,t.exports=H}).call(this,r(5).Buffer)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(7);e.EntryHandlerArrayValue=class{isPropertyHandler(){return!1}isStackProcessor(){return!0}async validate(t,e,r,n,i){return this.test(t,e,null,r,n)}async test(t,e,r,n,i){return"number"==typeof n[i]}async handle(t,e,r,i,o,s){let a=await e.unaliasKeywordParent(i,s);if("@list"===a){let r=null,n=0;for(let t=s-2;t>0;t--){const e=i[t];if("string"==typeof e||"number"==typeof e){n=t,r=e;break}}if(null!==r){const a=await e.valueToTerm(await t.getContext(i),r,o,s,i);for(const r of a)await this.handleListElement(t,e,r,s,i.slice(0,n),n);0===a.length&&await this.handleListElement(t,e,null,s,i.slice(0,n),n)}}else if("@set"===a)await t.newOnValueJob(i.slice(0,-2),o,s-2,!1);else if(void 0!==a&&"@type"!==a){for(let t=s-1;t>0;t--)if("number"!=typeof i[t]){a=await e.unaliasKeyword(i[t],i,t);break}const r=await t.getContext(i.slice(0,-1));if("@list"in n.Util.getContextValueContainer(r,a)){const r=await e.valueToTerm(await t.getContext(i),a,o,s,i);for(const n of r)await this.handleListElement(t,e,n,s,i.slice(0,-1),s-1);0===r.length&&await this.handleListElement(t,e,null,s,i.slice(0,-1),s-1)}else t.shiftStack(s,1),await t.newOnValueJob(i.slice(0,-1),o,s-1,!1),t.contextTree.removeContext(i.slice(0,-1))}}async handleListElement(t,e,r,n,i,o){let s=t.listPointerStack[n];if(r){if(s&&s.value){const r=e.dataFactory.blankNode();t.emitQuad(n,e.dataFactory.quad(s.value,e.rdfRest,r,e.getDefaultGraph())),s.value=r}else{const t=e.dataFactory.blankNode();s={value:t,listRootDepth:o,listId:t}}t.emitQuad(n,e.dataFactory.quad(s.value,e.rdfFirst,r,e.getDefaultGraph()))}else s||(s={listRootDepth:o,listId:e.rdfNil});t.listPointerStack[n]=s}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ContainerHandlerIdentifier=class{canCombineWithGraph(){return!0}async handle(t,e,r,n,i,o){let s;if(e.emittedStack[o+1]&&e.idStack[o+1])s=e.idStack[o+1][0];else{const t=null!==await r.getContainerKey(n[o],n,o)?await r.resourceToTerm(await e.getContext(n),n[o]):r.dataFactory.blankNode();if(!t)return void(e.emittedStack[o]=!1);s=t,e.idStack[o+1]=[s]}let a=e.idStack[o];a||(a=e.idStack[o]=[]),a.some(t=>t.equals(s))||a.push(s),await e.handlePendingContainerFlushBuffers()||(e.emittedStack[o]=!1)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(21),o=r(7);e.ContainerHandlerIndex=class{canCombineWithGraph(){return!0}async handle(t,e,r,s,a,u){if(!Array.isArray(a)){const c="@graph"in t,l=await e.getContext(s),h=s[u-1],f=o.Util.getContextValueIndex(l,h);if(f){if(n.Util.isPotentialKeyword(f))throw new n.ErrorCoded(`Keywords can not be used as @index value, got: ${f}`,n.ERROR_CODES.INVALID_TERM_DEFINITION);if("string"!=typeof f)throw new n.ErrorCoded(`@index values must be strings, got: ${f}`,n.ERROR_CODES.INVALID_TERM_DEFINITION);if("object"!=typeof a){if("@id"!==o.Util.getContextValueType(l,h))throw new n.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${a}`,n.ERROR_CODES.INVALID_VALUE_OBJECT);const t=r.resourceToTerm(l,a);t&&(e.idStack[u+1]=[t])}const t=r.createVocabOrBaseTerm(l,f);if(t){const n=await r.valueToTerm(l,f,await r.getContainerKey(s[u],s,u),u,s);if(c){const i=await r.getGraphContainerValue(s,u+1);for(const o of n)e.emitQuad(u,r.dataFactory.quad(i,t,o,r.getDefaultGraph()))}else for(const o of n)await i.EntryHandlerPredicate.handlePredicateObject(e,r,s,u+1,t,o,!1)}}const d=c?2:1;await e.newOnValueJob(s.slice(0,s.length-d),a,u-d,!0),await e.handlePendingContainerFlushBuffers()}e.emittedStack[u]=!1}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3);e.ContainerHandlerLanguage=class{canCombineWithGraph(){return!1}async handle(t,e,r,i,o,s){const a=await r.getContainerKey(i[s],i,s);if(Array.isArray(o))o=o.map(t=>({"@value":t,"@language":a}));else{if("string"!=typeof o)throw new n.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(o)}', but expected string`,n.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);o={"@value":o,"@language":a}}await e.newOnValueJob(i.slice(0,i.length-1),o,s-1,!0),e.emittedStack[s]=!1}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(21),i=r(7);e.ContainerHandlerType=class{canCombineWithGraph(){return!1}async handle(t,e,r,o,s,a){if(!Array.isArray(s)){if("string"==typeof s){const t=await e.getContext(o),n="@vocab"===i.Util.getContextValueType(t,o[a-1])?await r.createVocabOrBaseTerm(t,s):await r.resourceToTerm(t,s);if(n){const t={"@id":"NamedNode"===n.termType?n.value:s};await e.newOnValueJob(o.slice(0,o.length-1),t,a-1,!0),e.idStack[a+1]=[n]}}else{const t=!!e.idStack[a+1];t||delete e.idStack[a],await e.newOnValueJob(o.slice(0,o.length-1),s,a-1,!0),t||(e.idStack[a+1]=e.idStack[a])}const t=await r.getContainerKey(o[a],o,a),u=null!==t?r.createVocabOrBaseTerm(await e.getContext(o),t):null;u&&await n.EntryHandlerPredicate.handlePredicateObject(e,r,o,a+1,r.rdfType,u,!1),await e.handlePendingContainerFlushBuffers()}e.emittedStack[a]=!1}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.EntryHandlerInvalidFallback=class{isPropertyHandler(){return!1}isStackProcessor(){return!0}async validate(t,e,r,n,i){return!1}async test(t,e,r,n,i){return!0}async handle(t,e,r,n,i,o){t.emittedStack[o]=!1}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(8);class o extends i.EntryHandlerKeyword{constructor(){super("@context")}isStackProcessor(){return!1}async handle(t,e,r,i,o,s){t.streamingProfile&&(t.processingStack[s]||void 0!==t.idStack[s])&&t.emitError(new n.ErrorCoded("Found an out-of-order context, while streaming is enabled.(disable `streamingProfile`)",n.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));const a=t.getContext(i),u=t.parseContext(o,(await a).getContextRaw());t.contextTree.setContext(i.slice(0,-1),u),t.emitContext(o),await t.validateContext(await u)}}e.EntryHandlerKeywordContext=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(8);class i extends n.EntryHandlerKeyword{constructor(){super("@graph")}async handle(t,e,r,n,i,o){t.graphStack[o+1]=!0}}e.EntryHandlerKeywordGraph=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(8);class o extends i.EntryHandlerKeyword{constructor(){super("@id")}isStackProcessor(){return!1}async handle(t,e,r,i,o,s){"string"!=typeof o&&t.emitError(new n.ErrorCoded(`Found illegal @id '${o}'`,n.ERROR_CODES.INVALID_ID_VALUE));const a=await e.getPropertiesDepth(i,s);void 0!==t.idStack[a]&&(t.idStack[a][0].listHead?t.emitError(new n.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${i[s-1]}'`,n.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT)):t.emitError(new n.ErrorCoded(`Found duplicate @ids '${t.idStack[a][0].value}' and '${o}'`,n.ERROR_CODES.COLLIDING_KEYWORDS))),t.idStack[a]=e.nullableTermToArray(await e.resourceToTerm(await t.getContext(i),o))}}e.EntryHandlerKeywordId=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(8);class o extends i.EntryHandlerKeyword{constructor(){super("@included")}async handle(t,e,r,i,o,s){"object"!=typeof o&&t.emitError(new n.ErrorCoded(`Found illegal @included '${o}'`,n.ERROR_CODES.INVALID_INCLUDED_VALUE));const a=await e.unaliasKeywords(o,i,s,await t.getContext(i));"@value"in a&&t.emitError(new n.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(o)}'`,n.ERROR_CODES.INVALID_INCLUDED_VALUE)),"@list"in a&&t.emitError(new n.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(o)}'`,n.ERROR_CODES.INVALID_INCLUDED_VALUE)),t.emittedStack[s]=!1}}e.EntryHandlerKeywordIncluded=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(8);class o extends i.EntryHandlerKeyword{constructor(){super("@nest")}async handle(t,e,r,i,o,s){"object"!=typeof o&&t.emitError(new n.ErrorCoded(`Found invalid @nest entry for '${r}': '${o}'`,n.ERROR_CODES.INVALID_NEST_VALUE)),"@value"in await e.unaliasKeywords(o,i,s,await t.getContext(i))&&t.emitError(new n.ErrorCoded(`Found an invalid @value node for '${r}'`,n.ERROR_CODES.INVALID_NEST_VALUE)),t.emittedStack[s]=!1}}e.EntryHandlerKeywordNest=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(7),o=r(21),s=r(8);class a extends s.EntryHandlerKeyword{constructor(){super("@type")}async handle(t,e,r,s,a,u){const c=s[u],l=await t.getContext(s),h=e.rdfType,f=i.Util.isPropertyReverse(l,c,await e.unaliasKeywordParent(s,u)),d=Array.isArray(a)?a:[a];for(const r of d){"string"!=typeof r&&t.emitError(new n.ErrorCoded(`Found illegal @type '${r}'`,n.ERROR_CODES.INVALID_TYPE_VALUE));const i=e.createVocabOrBaseTerm(l,r);i&&await o.EntryHandlerPredicate.handlePredicateObject(t,e,s,u,h,i,f)}let p=Promise.resolve(l),_=!1;for(const e of d.sort()){const r=i.Util.getContextValue(l,"@context",e,null);r&&(_=!0,p=p.then(e=>t.parseContext(r,e.getContextRaw())))}!t.streamingProfile||!_&&t.streamingProfileAllowOutOfOrderPlainType||!t.processingStack[u]&&!t.idStack[u]||t.emitError(new n.ErrorCoded("Found an out-of-order type-scoped context, while streaming is enabled.(disable `streamingProfile`)",n.ERROR_CODES.INVALID_STREAMING_KEY_ORDER)),_&&(p=p.then(t=>("@propagate"in t.getContextRaw()||(t.getContextRaw()["@propagate"]=!1),!1===t.getContextRaw()["@propagate"]&&(t.getContextRaw()["@__propagateFallback"]=l.getContextRaw()),t)),t.contextTree.setContext(s.slice(0,s.length-1),p))}}e.EntryHandlerKeywordType=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3);class i{isPropertyHandler(){return!1}isStackProcessor(){return!0}async validate(t,e,r,i,o){const s=await e.unaliasKeyword(r[i],r,i);return!!n.Util.isPotentialKeyword(s)&&!(!o&&"@list"===s)}async test(t,e,r,i,o){return n.Util.isPotentialKeyword(r)}async handle(t,e,r,o,s,a){const u=i.VALID_KEYWORDS_TYPES[r];void 0!==u?u&&typeof s!==u.type&&t.emitError(new n.ErrorCoded(`Invalid value type for '${r}' with value '${s}'`,u.errorCode)):t.strictValues&&t.emitError(new Error(`Unknown keyword '${r}' with value '${s}'`)),t.emittedStack[a]=!1}}i.VALID_KEYWORDS_TYPES={"@index":{type:"string",errorCode:n.ERROR_CODES.INVALID_INDEX_VALUE},"@list":null,"@reverse":{type:"object",errorCode:n.ERROR_CODES.INVALID_REVERSE_VALUE},"@set":null,"@value":null},e.EntryHandlerKeywordUnknownFallback=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(8);class i extends n.EntryHandlerKeyword{constructor(){super("@value")}async test(t,e,r,n,i){return"@value"===await e.unaliasKeyword(n[i],n.slice(0,n.length-1),i-1,!0)}async handle(t,e,r,n,i,o){t.literalStack[o]=!0,delete t.unidentifiedValuesBuffer[o],delete t.unidentifiedGraphsBuffer[o],t.emittedStack[o]=!1}}e.EntryHandlerKeywordValue=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(3),i=r(20),o=r(185),s=r(65);class a{constructor(t){this.contextParser=new n.ContextParser({documentLoader:t.documentLoader}),this.streamingProfile=!!t.streamingProfile,this.baseIRI=t.baseIRI,this.produceGeneralizedRdf=!!t.produceGeneralizedRdf,this.allowSubjectList=!!t.allowSubjectList,this.processingMode=t.processingMode||s.JsonLdParser.DEFAULT_PROCESSING_MODE,this.strictValues=!!t.strictValues,this.validateValueIndexes=!!t.validateValueIndexes,this.defaultGraph=t.defaultGraph,this.rdfDirection=t.rdfDirection,this.normalizeLanguageTags=t.normalizeLanguageTags,this.streamingProfileAllowOutOfOrderPlainType=t.streamingProfileAllowOutOfOrderPlainType,this.topLevelProperties=!1,this.activeProcessingMode=parseFloat(this.processingMode),this.processingStack=[],this.emittedStack=[],this.idStack=[],this.graphStack=[],this.graphContainerTermStack=[],this.listPointerStack=[],this.contextTree=new o.ContextTree,this.literalStack=[],this.validationStack=[],this.unaliasedKeywordCacheStack=[],this.jsonLiteralStack=[],this.unidentifiedValuesBuffer=[],this.unidentifiedGraphsBuffer=[],this.pendingContainerFlushBuffers=[],this.parser=t.parser,t.context?(this.rootContext=this.parseContext(t.context),this.rootContext.then(t=>this.validateContext(t))):this.rootContext=Promise.resolve(new n.JsonLdContextNormalized(this.baseIRI?{"@base":this.baseIRI,"@__baseDocument":!0}:{}))}async parseContext(t,e,r){return this.contextParser.parse(t,{baseIRI:this.baseIRI,ignoreProtection:r,normalizeLanguageTags:this.normalizeLanguageTags,parentContext:e,processingMode:this.activeProcessingMode})}validateContext(t){const e=t.getContextRaw()["@version"];if(e){if(this.activeProcessingMode&&e>this.activeProcessingMode)throw new i.ErrorCoded(`Unsupported JSON-LD version '${e}' under active processing mode ${this.activeProcessingMode}.`,i.ERROR_CODES.PROCESSING_MODE_CONFLICT);if(this.activeProcessingMode&&e<this.activeProcessingMode)throw new i.ErrorCoded(`Invalid JSON-LD version ${e} under active processing mode ${this.activeProcessingMode}.`,i.ERROR_CODES.INVALID_VERSION_VALUE);this.activeProcessingMode=e}}async getContext(t,e=1){const r=t;for(;"number"==typeof t[t.length-1];)t=t.slice(0,t.length-1);e&&(t=t.slice(0,-e));const i=await this.getContextPropagationAware(t);let o=i.context.getContextRaw();for(let t=i.depth;t<r.length-e;t++){const i=r[t],s=o[i];if(s&&"object"==typeof s&&"@context"in s){const a=(await this.parseContext(s,o,!0)).getContextRaw(),u=!(i in a)||a[i]["@context"]["@propagate"];!1===u&&t!==r.length-1-e||(o=a,delete o["@propagate"],o[i]=Object.assign({},o[i]),"@id"in s&&(o[i]["@id"]=s["@id"]),delete o[i]["@context"],!1!==u&&this.contextTree.setContext(r.slice(0,t+e),Promise.resolve(new n.JsonLdContextNormalized(o))))}}return new n.JsonLdContextNormalized(o)}async getContextPropagationAware(t){const e=t.length;let r,i=null;do{r=!1,i&&"@__propagateFallback"in i.context.getContextRaw()?i.context=new n.JsonLdContextNormalized(i.context.getContextRaw()["@__propagateFallback"]):(i&&(t=t.slice(0,i.depth-1)),i=await this.contextTree.getContext(t)||{context:await this.rootContext,depth:0});const e=t[t.length-1];if(e in i.context.getContextRaw()){const t=i.context.getContextRaw()[e];t&&"object"==typeof t&&"@context"in t&&(r=!0)}}while(i.depth>0&&!1===i.context.getContextRaw()["@propagate"]&&i.depth!==e&&!r);return 0===i.depth&&!1===i.context.getContextRaw()["@propagate"]&&i.depth!==e&&(i.context=new n.JsonLdContextNormalized({})),i}async newOnValueJob(t,e,r,n){await this.parser.newOnValueJob(t,e,r,n)}async handlePendingContainerFlushBuffers(){if(this.pendingContainerFlushBuffers.length>0){for(const t of this.pendingContainerFlushBuffers)await this.parser.flushBuffer(t.depth,t.keys),this.parser.flushStacks(t.depth);return this.pendingContainerFlushBuffers.splice(0,this.pendingContainerFlushBuffers.length),!0}return!1}emitQuad(t,e){1===t&&(this.topLevelProperties=!0),this.parser.push(e)}emitError(t){this.parser.emit("error",t)}emitContext(t){this.parser.emit("context",t)}getUnidentifiedValueBufferSafe(t){let e=this.unidentifiedValuesBuffer[t];return e||(e=[],this.unidentifiedValuesBuffer[t]=e),e}getUnidentifiedGraphBufferSafe(t){let e=this.unidentifiedGraphsBuffer[t];return e||(e=[],this.unidentifiedGraphsBuffer[t]=e),e}getExpandOptions(){return a.EXPAND_OPTIONS[this.activeProcessingMode]}shiftStack(t,e){const r=this.idStack[t+e];if(r&&(this.idStack[t]=r,this.emittedStack[t]=!0,delete this.idStack[t+e]),this.pendingContainerFlushBuffers.length)for(const r of this.pendingContainerFlushBuffers)r.depth>=t+e&&(r.depth-=e,r.keys.splice(t,e));this.unidentifiedValuesBuffer[t+e]&&(this.unidentifiedValuesBuffer[t]=this.unidentifiedValuesBuffer[t+e],delete this.unidentifiedValuesBuffer[t+e])}}a.EXPAND_OPTIONS={1:{allowPrefixForcing:!1,allowPrefixNonGenDelims:!1,allowVocabRelativeToBase:!1},1.1:{allowPrefixForcing:!0,allowPrefixNonGenDelims:!1,allowVocabRelativeToBase:!0}},e.ParsingContext=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(){this.subTrees={}}getContext(t){if(t.length>0){const[e,...r]=t,n=this.subTrees[e];if(n){const t=n.getContext(r);if(t)return t.then(({context:t,depth:e})=>({context:t,depth:e+1}))}}return this.context?this.context.then(t=>({context:t,depth:0})):null}setContext(t,e){if(0===t.length)this.context=e;else{const[r,...i]=t;let o=this.subTrees[r];o||(o=this.subTrees[r]=new n),o.setContext(i,e)}}removeContext(t){this.setContext(t,null)}}e.ContextTree=n},function(t,e,r){"use strict";(function(e){var r=/^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i,n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,i=/\s|\uFEFF|\xA0/,o=/\r?\n[\x20\x09]+/g,s=/[;,"]/,a=/[;,"]|\s/,u=1,c=2,l=4;function h(t){return t.replace(n,"")}function f(t){return i.test(t)}function d(t,e){for(;f(t[e]);)e++;return e}function p(t){return a.test(t)}class _{constructor(t){this.refs=[],t&&this.parse(t)}rel(t){for(var e=[],r=0;r<this.refs.length;r++)this.refs[r].rel===t&&e.push(this.refs[r]);return e}get(t,e){t=t.toLowerCase();for(var r=[],n=0;n<this.refs.length;n++)this.refs[n][t]===e&&r.push(this.refs[n]);return r}set(t){return this.refs.push(t),this}has(t,e){t=t.toLowerCase();for(var r=0;r<this.refs.length;r++)if(this.refs[r][t]===e)return!0;return!1}parse(t,e){t=h(t=(e=e||0)?t.slice(e):t).replace(o,"");for(var r=u,n=t.length,i=(e=0,null);e<n;)if(r===u){if(f(t[e])){e++;continue}if("<"!==t[e])throw new Error('Unexpected character "'+t[e]+'" at offset '+e);if(-1===(g=t.indexOf(">",e)))throw new Error("Expected end of URI delimiter at offset "+e);i={uri:t.slice(e+1,g)},this.refs.push(i),e=g,r=c,e++}else if(r===c){if(f(t[e])){e++;continue}if(";"===t[e])r=l,e++;else{if(","!==t[e])throw new Error('Unexpected character "'+t[e]+'" at offset '+e);r=u,e++}}else{if(r!==l)throw new Error('Unknown parser state "'+r+'"');if(";"===t[e]||f(t[e])){e++;continue}if(-1===(g=t.indexOf("=",e)))throw new Error("Expected attribute delimiter at offset "+e);var a=h(t.slice(e,g)).toLowerCase(),p="";if('"'===t[e=d(t,e=g+1)])for(e++;e<n;){if('"'===t[e]){e++;break}"\\"===t[e]&&e++,p+=t[e],e++}else{for(var g=e+1;!s.test(t[g])&&g<n;)g++;p=t.slice(e,g),e=g}switch(i[a]&&_.isSingleOccurenceAttr(a)||("*"===a[a.length-1]?i[a]=_.parseExtendedValue(p):(p="rel"===a||"type"===a?p.toLowerCase():p,null!=i[a]?Array.isArray(i[a])?i[a].push(p):i[a]=[i[a],p]:i[a]=p)),t[e]){case",":r=u;break;case";":r=l}e++}return i=null,this}toString(){for(var t=[],e="",r=null,n=0;n<this.refs.length;n++)r=this.refs[n],e=Object.keys(this.refs[n]).reduce((function(t,e){return"uri"===e?t:t+"; "+_.formatAttribute(e,r[e])}),"<"+r.uri+">"),t.push(e);return t.join(", ")}}_.isCompatibleEncoding=function(t){return r.test(t)},_.parse=function(t,e){return(new _).parse(t,e)},_.isSingleOccurenceAttr=function(t){return"rel"===t||"type"===t||"media"===t||"title"===t||"title*"===t},_.isTokenAttr=function(t){return"rel"===t||"type"===t||"anchor"===t},_.escapeQuotes=function(t){return t.replace(/"/g,'\\"')},_.parseExtendedValue=function(t){var e=/([^']+)?(?:'([^']+)')?(.+)/.exec(t);return{language:e[2].toLowerCase(),encoding:_.isCompatibleEncoding(e[1])?null:e[1].toLowerCase(),value:_.isCompatibleEncoding(e[1])?decodeURIComponent(e[3]):e[3]}},_.formatExtendedAttribute=function(t,r){var n=(r.encoding||"utf-8").toUpperCase();return t+"="+n+"'"+(r.language||"en")+"'"+(e.isBuffer(r.value)&&_.isCompatibleEncoding(n)?r.value.toString(n):e.isBuffer(r.value)?r.value.toString("hex").replace(/[0-9a-f]{2}/gi,"%$1"):encodeURIComponent(r.value))},_.formatAttribute=function(t,e){return Array.isArray(e)?e.map(e=>_.formatAttribute(t,e)).join("; "):"*"===t[t.length-1]||"string"!=typeof e?_.formatExtendedAttribute(t,e):(_.isTokenAttr(t)?e=p(e)?'"'+_.escapeQuotes(e)+'"':_.escapeQuotes(e):p(e)&&(e='"'+(e=(e=encodeURIComponent(e)).replace(/%20/g," ").replace(/%2C/g,",").replace(/%3B/g,";"))+'"'),t+"="+e)},t.exports=_}).call(this,r(5).Buffer)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(16),i=r(188);e.DocumentLoaderMediated=class{constructor(t,e){this.mediatorHttp=t,this.context=e}async load(t){const e=await this.mediatorHttp.mediate({input:t,init:{headers:new Headers({accept:"application/ld+json"})},context:this.context});if(e.ok)return JSON.parse(await i(n.ActorHttp.toNodeReadable(e.body)));throw new Error(`No valid context was found at ${t}: ${e.statusText}`)}}},function(t,e,r){var n=r(189);t.exports=function(t,e,r){"function"==typeof e&&(r=e,e=null),r=r||function(){};var i="";return new n((function(n,o){t.on("data",(function(t){i+="string"==typeof e?t.toString(e):t.toString()})),t.on("end",(function(){n(i),r(null,i)})),t.on("error",(function(t){o(t),r(t)}))}))}},function(t,e,r){(function(e){!function(){var r;r="object"==typeof window&&window?window:e,t.exports?t.exports=r.Promise?r.Promise:s:r.Promise||(r.Promise=s);var n=r.setImmediate||function(t){setTimeout(t,1)};function i(t,e){return function(){t.apply(e,arguments)}}var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function s(t){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=null,this._value=null,this._deferreds=[],f(t,i(u,this),i(c,this))}function a(t){var e=this;null!==this._state?n((function(){var r=e._state?t.onFulfilled:t.onRejected;if(null!==r){var n;try{n=r(e._value)}catch(e){return void t.reject(e)}t.resolve(n)}else(e._state?t.resolve:t.reject)(e._value)})):this._deferreds.push(t)}function u(t){try{if(t===this)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var e=t.then;if("function"==typeof e)return void f(i(e,t),i(u,this),i(c,this))}this._state=!0,this._value=t,l.call(this)}catch(t){c.call(this,t)}}function c(t){this._state=!1,this._value=t,l.call(this)}function l(){for(var t=0,e=this._deferreds.length;t<e;t++)a.call(this,this._deferreds[t]);this._deferreds=null}function h(t,e,r,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.resolve=r,this.reject=n}function f(t,e,r){var n=!1;try{t((function(t){n||(n=!0,e(t))}),(function(t){n||(n=!0,r(t))}))}catch(t){if(n)return;n=!0,r(t)}}s.prototype.catch=function(t){return this.then(null,t)},s.prototype.then=function(t,e){var r=this;return new s((function(n,i){a.call(r,new h(t,e,n,i))}))},s.all=function(){var t=Array.prototype.slice.call(1===arguments.length&&o(arguments[0])?arguments[0]:arguments);return new s((function(e,r){if(0===t.length)return e([]);var n=t.length;function i(o,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var a=s.then;if("function"==typeof a)return void a.call(s,(function(t){i(o,t)}),r)}t[o]=s,0==--n&&e(t)}catch(t){r(t)}}for(var o=0;o<t.length;o++)i(o,t[o])}))},s.resolve=function(t){return t&&"object"==typeof t&&t.constructor===s?t:new s((function(e){e(t)}))},s.reject=function(t){return new s((function(e,r){r(t)}))},s.race=function(t){return new s((function(e,r){for(var n=0,i=t.length;n<i;n++)t[n].then(e,r)}))}}()}).call(this,r(4))},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(71)),n(r(193))},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(72)),n(r(192))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(72);class i extends n.ActorRdfDereference{constructor(t){super(t)}getMediaTypeFromExtension(t){const e=t.lastIndexOf(".");if(e>=0){const r=t.substr(e);return this.mediaMappings[r.substring(1)]||""}return""}}e.ActorRdfDereferenceMediaMappings=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(71);class i extends n.ActorRdfDereferenceHttpParseBase{constructor(t){super(t)}getMaxAcceptHeaderLength(){return this.maxAcceptHeaderLengthBrowser}}e.ActorRdfDereferenceHttpParse=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(19);function i(t){if(!t)return null;switch(t.termType){case"NamedNode":return t.value;case"BlankNode":return"_:"+t.value;case"Literal":const e=t;return'"'+e.value+'"'+(e.datatype&&"http://www.w3.org/2001/XMLSchema#string"!==e.datatype.value&&"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"!==e.datatype.value?"^^"+e.datatype.value:"")+(e.language?"@"+e.language:"");case"Variable":return"?"+t.value;case"DefaultGraph":return t.value}}function o(t){const e=/^"([^]*)"/.exec(t);if(!e)throw new Error(t+" is not a literal");return e[1]}function s(t){const e=/^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(t);if(!e)throw new Error(t+" is not a literal");return e[1]||(e[2]?"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString":"http://www.w3.org/2001/XMLSchema#string")}function a(t){const e=/^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(t);if(!e)throw new Error(t+" is not a literal");return e[1]?e[1].toLowerCase():""}function u(t,e){if(e=e||n,!t||!t.length)return e.defaultGraph();switch(t[0]){case"_":return e.blankNode(t.substr(2));case"?":return e.variable(t.substr(1));case'"':const r=a(t),n=e.namedNode(s(t));return e.literal(o(t),r||n);default:return e.namedNode(t)}}e.termToString=i,e.getLiteralValue=o,e.getLiteralType=s,e.getLiteralLanguage=a,e.stringToTerm=u,e.quadToStringQuad=function(t){return{subject:i(t.subject),predicate:i(t.predicate),object:i(t.object),graph:i(t.graph)}},e.stringQuadToQuad=function(t,e){return(e=e||n).quad(u(t.subject,e),u(t.predicate,e),u(t.object,e),u(t.graph,e))}},function(t,e,r){"use strict";r.r(e);var n={};r.r(n),r.d(n,"isNamedNode",(function(){return U})),r.d(n,"isBlankNode",(function(){return V})),r.d(n,"isLiteral",(function(){return z})),r.d(n,"isVariable",(function(){return G})),r.d(n,"isDefaultGraph",(function(){return H})),r.d(n,"inDefaultGraph",(function(){return W})),r.d(n,"prefix",(function(){return $})),r.d(n,"prefixes",(function(){return K}));var i=r(0);const{rdf:o,xsd:s}=i.a;var a,u,c=0;class l{constructor(t){this.id=t}get value(){return this.id}equals(t){return t instanceof l?this.id===t.id:!!t&&this.termType===t.termType&&this.value===t.value}toJSON(){return{termType:this.termType,value:this.value}}}class h extends l{get termType(){return"NamedNode"}}class f extends l{get termType(){return"Literal"}get value(){return this.id.substring(1,this.id.lastIndexOf('"'))}get language(){var t=this.id,e=t.lastIndexOf('"')+1;return e<t.length&&"@"===t[e++]?t.substr(e).toLowerCase():""}get datatype(){return new h(this.datatypeString)}get datatypeString(){var t,e=this.id,r=e.lastIndexOf('"')+1;return r<e.length&&"^"===(t=e[r])?e.substr(r+2):"@"!==t?s.string:o.langString}equals(t){return t instanceof f?this.id===t.id:!!t&&!!t.datatype&&this.termType===t.termType&&this.value===t.value&&this.language===t.language&&this.datatype.value===t.datatype.value}toJSON(){return{termType:this.termType,value:this.value,language:this.language,datatype:{termType:"NamedNode",value:this.datatypeString}}}}class d extends l{constructor(t){super("_:"+t)}get termType(){return"BlankNode"}get value(){return this.id.substr(2)}}class p extends l{constructor(t){super("?"+t)}get termType(){return"Variable"}get value(){return this.id.substr(1)}}class _ extends l{constructor(){return super(""),u||this}get termType(){return"DefaultGraph"}equals(t){return this===t||!!t&&this.termType===t.termType}}u=new _;class g{constructor(t,e,r,n){this.subject=t,this.predicate=e,this.object=r,this.graph=n||u}toJSON(){return{subject:this.subject.toJSON(),predicate:this.predicate.toJSON(),object:this.object.toJSON(),graph:this.graph.toJSON()}}equals(t){return!!t&&this.subject.equals(t.subject)&&this.predicate.equals(t.predicate)&&this.object.equals(t.object)&&this.graph.equals(t.graph)}}var y=a={namedNode:function(t){return new h(t)},blankNode:function(t){t||(t="n3-"+c++);return new d(t)},variable:function(t){return new p(t)},literal:function(t,e){if("string"==typeof e)return new f('"'+t+'"@'+e.toLowerCase());let r=e?e.value:"";""===r&&("boolean"==typeof t?r=s.boolean:"number"==typeof t&&(Number.isFinite(t)?r=Number.isInteger(t)?s.integer:s.double:(r=s.double,Number.isNaN(t)||(t=t>0?"INF":"-INF"))));return""===r||r===s.string?new f('"'+t+'"'):new f('"'+t+'"^^'+r)},defaultGraph:function(){return u},quad:m,triple:m,internal:{Term:l,NamedNode:h,BlankNode:d,Variable:p,Literal:f,DefaultGraph:_,Quad:g,Triple:g,fromId:function(t,e){if(e=e||a,!t)return e.defaultGraph();switch(t[0]){case"_":return e.blankNode(t.substr(2));case"?":return e.variable(t.substr(1));case'"':if(e===a)return new f(t);if('"'===t[t.length-1])return e.literal(t.substr(1,t.length-2));var r=t.lastIndexOf('"',t.length-1);return e.literal(t.substr(1,r-1),"@"===t[r+1]?t.substr(r+2):e.namedNode(t.substr(r+3)));default:return e.namedNode(t)}},toId:function(t){if("string"==typeof t)return t;if(t instanceof l)return t.id;if(!t)return u.id;switch(t.termType){case"NamedNode":return t.value;case"BlankNode":return"_:"+t.value;case"Variable":return"?"+t.value;case"DefaultGraph":return"";case"Literal":return'"'+t.value+'"'+(t.language?"@"+t.language:t.datatype&&t.datatype.value!==s.string?"^^"+t.datatype.value:"");default:throw new Error("Unexpected termType: "+t.termType)}}}};function m(t,e,r,n){return new g(t,e,r,n)}var b=r(22),v=0,w=0;class x{constructor(t){this._contextStack=[],this._graph=null,t=t||{},this._setBase(t.baseIRI),t.factory&&S(this,t.factory);var e="string"==typeof t.format?t.format.match(/\w*$/)[0].toLowerCase():"",r="turtle"===e,n="trig"===e,i=/triple/.test(e),o=/quad/.test(e),s=this._n3Mode=/n3/.test(e),a=i||o;(this._supportsNamedGraphs=!(r||s))||(this._readPredicateOrNamedGraph=this._readPredicate),this._supportsQuads=!(r||n||i||s),a&&(this._resolveRelativeIRI=function(t){return null}),this._blankNodePrefix="string"!=typeof t.blankNodePrefix?"":t.blankNodePrefix.replace(/^(?!_:)/,"_:"),this._lexer=t.lexer||new b.a({lineMode:a,n3:s}),this._explicitQuantifiers=!!t.explicitQuantifiers}static _resetBlankNodeIds(){v=w=0}_blank(){return this._blankNode("b"+w++)}_setBase(t){if(t){var e=t.indexOf("#");e>=0&&(t=t.substr(0,e)),this._base=t,this._basePath=t.indexOf("/")<0?t:t.replace(/[^\/?]*(?:\?.*)?$/,""),t=t.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i),this._baseRoot=t[0],this._baseScheme=t[1]}else this._base="",this._basePath=""}_saveContext(t,e,r,n,i){var o=this._n3Mode;this._contextStack.push({subject:r,predicate:n,object:i,graph:e,type:t,inverse:!!o&&this._inversePredicate,blankPrefix:o?this._prefixes._:"",quantified:o?this._quantified:null}),o&&(this._inversePredicate=!1,this._prefixes._=this._graph?this._graph.id.substr(2)+".":".",this._quantified=Object.create(this._quantified))}_restoreContext(){var t=this._contextStack.pop(),e=this._n3Mode;this._subject=t.subject,this._predicate=t.predicate,this._object=t.object,this._graph=t.graph,e&&(this._inversePredicate=t.inverse,this._prefixes._=t.blankPrefix,this._quantified=t.quantified)}_readInTopContext(t){switch(t.type){case"eof":return null!==this._graph?this._error("Unclosed graph",t):(delete this._prefixes._,this._callback(null,null,this._prefixes));case"PREFIX":this._sparqlStyle=!0;case"@prefix":return this._readPrefix;case"BASE":this._sparqlStyle=!0;case"@base":return this._readBaseIRI;case"{":if(this._supportsNamedGraphs)return this._graph="",this._subject=null,this._readSubject;case"GRAPH":if(this._supportsNamedGraphs)return this._readNamedGraphLabel;default:return this._readSubject(t)}}_readEntity(t,e){var r;switch(t.type){case"IRI":case"typeIRI":var n=this._resolveIRI(t.value);if(null===n)return this._error("Invalid IRI",t);r=this._namedNode(n);break;case"type":case"prefixed":var i=this._prefixes[t.prefix];if(void 0===i)return this._error('Undefined prefix "'+t.prefix+':"',t);r=this._namedNode(i+t.value);break;case"blank":r=this._blankNode(this._prefixes[t.prefix]+t.value);break;case"var":r=this._variable(t.value.substr(1));break;default:return this._error("Expected entity but got "+t.type,t)}return!e&&this._n3Mode&&r.id in this._quantified&&(r=this._quantified[r.id]),r}_readSubject(t){switch(this._predicate=null,t.type){case"[":return this._saveContext("blank",this._graph,this._subject=this._blank(),null,null),this._readBlankNodeHead;case"(":return this._saveContext("list",this._graph,this.RDF_NIL,null,null),this._subject=null,this._readListItem;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._graph=this._blank(),null,null),this._readSubject):this._error("Unexpected graph",t);case"}":return this._readPunctuation(t);case"@forSome":return this._n3Mode?(this._subject=null,this._predicate=this.N3_FORSOME,this._quantifier=this._blankNode,this._readQuantifierList):this._error('Unexpected "@forSome"',t);case"@forAll":return this._n3Mode?(this._subject=null,this._predicate=this.N3_FORALL,this._quantifier=this._variable,this._readQuantifierList):this._error('Unexpected "@forAll"',t);default:if(void 0===(this._subject=this._readEntity(t)))return;if(this._n3Mode)return this._getPathReader(this._readPredicateOrNamedGraph)}return this._readPredicateOrNamedGraph}_readPredicate(t){var e=t.type;switch(e){case"inverse":this._inversePredicate=!0;case"abbreviation":this._predicate=this.ABBREVIATIONS[t.value];break;case".":case"]":case"}":return null===this._predicate?this._error("Unexpected "+e,t):(this._subject=null,"]"===e?this._readBlankNodeTail(t):this._readPunctuation(t));case";":return null!==this._predicate?this._readPredicate:this._error("Expected predicate but got ;",t);case"blank":if(!this._n3Mode)return this._error("Disallowed blank node as predicate",t);default:if(void 0===(this._predicate=this._readEntity(t)))return}return this._readObject}_readObject(t){switch(t.type){case"literal":if(0===t.prefix.length)return this._literalValue=t.value,this._readDataTypeOrLang;this._object=this._literal(t.value,this._namedNode(t.prefix));break;case"[":return this._saveContext("blank",this._graph,this._subject,this._predicate,this._subject=this._blank()),this._readBlankNodeHead;case"(":return this._saveContext("list",this._graph,this._subject,this._predicate,this.RDF_NIL),this._subject=null,this._readListItem;case"{":return this._n3Mode?(this._saveContext("formula",this._graph,this._subject,this._predicate,this._graph=this._blank()),this._readSubject):this._error("Unexpected graph",t);default:if(void 0===(this._object=this._readEntity(t)))return;if(this._n3Mode)return this._getPathReader(this._getContextEndReader())}return this._getContextEndReader()}_readPredicateOrNamedGraph(t){return"{"===t.type?this._readGraph(t):this._readPredicate(t)}_readGraph(t){return"{"!==t.type?this._error("Expected graph but got "+t.type,t):(this._graph=this._subject,this._subject=null,this._readSubject)}_readBlankNodeHead(t){return"]"===t.type?(this._subject=null,this._readBlankNodeTail(t)):(this._predicate=null,this._readPredicate(t))}_readBlankNodeTail(t){if("]"!==t.type)return this._readBlankNodePunctuation(t);null!==this._subject&&this._emit(this._subject,this._predicate,this._object,this._graph);var e=null===this._predicate;return this._restoreContext(),null===this._object?e?this._readPredicateOrNamedGraph:this._readPredicateAfterBlank:this._getContextEndReader()}_readPredicateAfterBlank(t){switch(t.type){case".":case"}":return this._subject=null,this._readPunctuation(t);default:return this._readPredicate(t)}}_readListItem(t){var e=null,r=null,n=this._subject,i=this._contextStack,o=i[i.length-1],s=this._readListItem;switch(t.type){case"[":this._saveContext("blank",this._graph,r=this._blank(),this.RDF_FIRST,this._subject=e=this._blank()),s=this._readBlankNodeHead;break;case"(":this._saveContext("list",this._graph,r=this._blank(),this.RDF_FIRST,this.RDF_NIL),this._subject=null;break;case")":if(this._restoreContext(),0!==i.length&&"list"===i[i.length-1].type&&this._emit(this._subject,this._predicate,this._object,this._graph),null===this._predicate){if(s=this._readPredicate,this._subject===this.RDF_NIL)return s}else if(s=this._getContextEndReader(),this._object===this.RDF_NIL)return s;r=this.RDF_NIL;break;case"literal":0===t.prefix.length?(this._literalValue=t.value,s=this._readListItemDataTypeOrLang):(e=this._literal(t.value,this._namedNode(t.prefix)),s=this._getContextEndReader());break;default:if(void 0===(e=this._readEntity(t)))return}if(null===r&&(this._subject=r=this._blank()),null===n?null===o.predicate?o.subject=r:o.object=r:this._emit(n,this.RDF_REST,r,this._graph),null!==e){if(this._n3Mode&&("IRI"===t.type||"prefixed"===t.type))return this._saveContext("item",this._graph,r,this.RDF_FIRST,e),this._subject=e,this._predicate=null,this._getPathReader(this._readListItem);this._emit(r,this.RDF_FIRST,e,this._graph)}return s}_readDataTypeOrLang(t){return this._completeLiteral(t,!1)}_readListItemDataTypeOrLang(t){return this._completeLiteral(t,!0)}_completeLiteral(t,e){switch(t.type){case"type":case"typeIRI":var r=this._readEntity(t);if(void 0===r)return;this._object=this._literal(this._literalValue,r),t=null;break;case"langcode":this._object=this._literal(this._literalValue,t.value),t=null;break;default:this._object=this._literal(this._literalValue)}return e&&this._emit(this._subject,this.RDF_FIRST,this._object,this._graph),null===t?this._getContextEndReader():(this._readCallback=this._getContextEndReader(),this._readCallback(t))}_readFormulaTail(t){return"}"!==t.type?this._readPunctuation(t):(null!==this._subject&&this._emit(this._subject,this._predicate,this._object,this._graph),this._restoreContext(),null===this._object?this._readPredicate:this._getContextEndReader())}_readPunctuation(t){var e,r=this._subject,n=this._graph,i=this._inversePredicate;switch(t.type){case"}":if(null===this._graph)return this._error("Unexpected graph closing",t);if(this._n3Mode)return this._readFormulaTail(t);this._graph=null;case".":this._subject=null,e=this._contextStack.length?this._readSubject:this._readInTopContext,i&&(this._inversePredicate=!1);break;case";":e=this._readPredicate;break;case",":e=this._readObject;break;default:if(this._supportsQuads&&null===this._graph&&void 0!==(n=this._readEntity(t))){e=this._readQuadPunctuation;break}return this._error('Expected punctuation to follow "'+this._object.id+'"',t)}if(null!==r){var o=this._predicate,s=this._object;i?this._emit(s,o,r,n):this._emit(r,o,s,n)}return e}_readBlankNodePunctuation(t){var e;switch(t.type){case";":e=this._readPredicate;break;case",":e=this._readObject;break;default:return this._error('Expected punctuation to follow "'+this._object.id+'"',t)}return this._emit(this._subject,this._predicate,this._object,this._graph),e}_readQuadPunctuation(t){return"."!==t.type?this._error("Expected dot to follow quad",t):this._readInTopContext}_readPrefix(t){return"prefix"!==t.type?this._error("Expected prefix to follow @prefix",t):(this._prefix=t.value,this._readPrefixIRI)}_readPrefixIRI(t){if("IRI"!==t.type)return this._error('Expected IRI to follow prefix "'+this._prefix+':"',t);var e=this._readEntity(t);return this._prefixes[this._prefix]=e.value,this._prefixCallback(this._prefix,e),this._readDeclarationPunctuation}_readBaseIRI(t){var e="IRI"===t.type&&this._resolveIRI(t.value);return e?(this._setBase(e),this._readDeclarationPunctuation):this._error("Expected valid IRI to follow base declaration",t)}_readNamedGraphLabel(t){switch(t.type){case"IRI":case"blank":case"prefixed":return this._readSubject(t),this._readGraph;case"[":return this._readNamedGraphBlankLabel;default:return this._error("Invalid graph label",t)}}_readNamedGraphBlankLabel(t){return"]"!==t.type?this._error("Invalid graph label",t):(this._subject=this._blank(),this._readGraph)}_readDeclarationPunctuation(t){return this._sparqlStyle?(this._sparqlStyle=!1,this._readInTopContext(t)):"."!==t.type?this._error("Expected declaration to end with a dot",t):this._readInTopContext}_readQuantifierList(t){var e;switch(t.type){case"IRI":case"prefixed":if(void 0!==(e=this._readEntity(t,!0)))break;default:return this._error("Unexpected "+t.type,t)}return this._explicitQuantifiers?(null===this._subject?this._emit(this._graph||this.DEFAULTGRAPH,this._predicate,this._subject=this._blank(),this.QUANTIFIERS_GRAPH):this._emit(this._subject,this.RDF_REST,this._subject=this._blank(),this.QUANTIFIERS_GRAPH),this._emit(this._subject,this.RDF_FIRST,e,this.QUANTIFIERS_GRAPH)):this._quantified[e.id]=this._quantifier("b"+w++),this._readQuantifierPunctuation}_readQuantifierPunctuation(t){return","===t.type?this._readQuantifierList:(this._explicitQuantifiers&&(this._emit(this._subject,this.RDF_REST,this.RDF_NIL,this.QUANTIFIERS_GRAPH),this._subject=null),this._readCallback=this._getContextEndReader(),this._readCallback(t))}_getPathReader(t){return this._afterPath=t,this._readPath}_readPath(t){switch(t.type){case"!":return this._readForwardPath;case"^":return this._readBackwardPath;default:var e=this._contextStack,r=e.length&&e[e.length-1];if(r&&"item"===r.type){var n=this._subject;this._restoreContext(),this._emit(this._subject,this.RDF_FIRST,n,this._graph)}return this._afterPath(t)}}_readForwardPath(t){var e,r,n=this._blank();if(void 0!==(r=this._readEntity(t)))return null===this._predicate?(e=this._subject,this._subject=n):(e=this._object,this._object=n),this._emit(e,r,n,this._graph),this._readPath}_readBackwardPath(t){var e,r,n=this._blank();if(void 0!==(e=this._readEntity(t)))return null===this._predicate?(r=this._subject,this._subject=n):(r=this._object,this._object=n),this._emit(n,e,r,this._graph),this._readPath}_getContextEndReader(){var t=this._contextStack;if(!t.length)return this._readPunctuation;switch(t[t.length-1].type){case"blank":return this._readBlankNodeTail;case"list":return this._readListItem;case"formula":return this._readFormulaTail}}_emit(t,e,r,n){this._callback(null,this._quad(t,e,r,n||this.DEFAULTGRAPH))}_error(t,e){var r=new Error(t+" on line "+e.line+".");r.context={token:e,line:e.line,previousToken:this._lexer.previousToken},this._callback(r),this._callback=E}_resolveIRI(t){return/^[a-z][a-z0-9+.-]*:/i.test(t)?t:this._resolveRelativeIRI(t)}_resolveRelativeIRI(t){if(!t.length)return this._base;switch(t[0]){case"#":return this._base+t;case"?":return this._base.replace(/(?:\?.*)?$/,t);case"/":return("/"===t[1]?this._baseScheme:this._baseRoot)+this._removeDotSegments(t);default:return/^[^/:]*:/.test(t)?null:this._removeDotSegments(this._basePath+t)}}_removeDotSegments(t){if(!/(^|\/)\.\.?($|[/#?])/.test(t))return t;for(var e="",r=t.length,n=-1,i=-1,o=0,s="/";n<r;){switch(s){case":":if(i<0&&"/"===t[++n]&&"/"===t[++n])for(;(i=n+1)<r&&"/"!==t[i];)n=i;break;case"?":case"#":n=r;break;case"/":if("."===t[n+1])switch(s=t[++n+1]){case"/":e+=t.substring(o,n-1),o=n+1;break;case void 0:case"?":case"#":return e+t.substring(o,n)+t.substr(n+1);case".":if(void 0===(s=t[++n+1])||"/"===s||"?"===s||"#"===s){if((o=(e+=t.substring(o,n-2)).lastIndexOf("/"))>=i&&(e=e.substr(0,o)),"/"!==s)return e+"/"+t.substr(n+1);o=n+1}}}s=t[++n]}return e+t.substring(o)}parse(t,e,r){var n=this;if(this._readCallback=this._readInTopContext,this._sparqlStyle=!1,this._prefixes=Object.create(null),this._prefixes._=this._blankNodePrefix?this._blankNodePrefix.substr(2):"b"+v+++"_",this._prefixCallback=r||E,this._inversePredicate=!1,this._quantified=Object.create(null),!e){var i,o=[];if(this._callback=function(t,e){t?i=t:e&&o.push(e)},this._lexer.tokenize(t).every((function(t){return n._readCallback=n._readCallback(t)})),i)throw i;return o}this._callback=e,this._lexer.tokenize(t,(function(t,e){null!==t?(n._callback(t),n._callback=E):n._readCallback&&(n._readCallback=n._readCallback(e))}))}}function E(){}function S(t,e){var r=e.namedNode;t._namedNode=r,t._blankNode=e.blankNode,t._literal=e.literal,t._variable=e.variable,t._quad=e.quad,t.DEFAULTGRAPH=e.defaultGraph(),t.RDF_FIRST=r(i.a.rdf.first),t.RDF_REST=r(i.a.rdf.rest),t.RDF_NIL=r(i.a.rdf.nil),t.N3_FORALL=r(i.a.r.forAll),t.N3_FORSOME=r(i.a.r.forSome),t.ABBREVIATIONS={a:r(i.a.rdf.type),"=":r(i.a.owl.sameAs),">":r(i.a.log.implies)},t.QUANTIFIERS_GRAPH=r("urn:n3:quantifiers")}S(x.prototype,y);const T=y.defaultGraph(),{rdf:I,xsd:R}=i.a;var C=/["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,O=/["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,A={"\\":"\\\\",'"':'\\"',"\t":"\\t","\n":"\\n","\r":"\\r","\b":"\\b","\f":"\\f"};class P extends y.internal.Term{equals(){return!1}}class N{constructor(t,e){if(this._prefixRegex=/$0^/,t&&"function"!=typeof t.write&&(e=t,t=null),e=e||{},this._lists=e.lists,t)this._outputStream=t,this._endStream=void 0===e.end||!!e.end;else{var r="";this._outputStream={write(t,e,n){r+=t,n&&n()},end:function(t){t&&t(null,r)}},this._endStream=!0}this._subject=null,/triple|quad/i.test(e.format)?this._writeQuad=this._writeQuadLine:(this._graph=T,this._prefixIRIs=Object.create(null),e.prefixes&&this.addPrefixes(e.prefixes))}get _inDefaultGraph(){return T.equals(this._graph)}_write(t,e){this._outputStream.write(t,"utf8",e)}_writeQuad(t,e,r,n,i){try{n.equals(this._graph)||(this._write((null===this._subject?"":this._inDefaultGraph?".\n":"\n}\n")+(T.equals(n)?"":this._encodeIriOrBlank(n)+" {\n")),this._graph=n,this._subject=null),t.equals(this._subject)?e.equals(this._predicate)?this._write(", "+this._encodeObject(r),i):this._write(";\n    "+this._encodePredicate(this._predicate=e)+" "+this._encodeObject(r),i):this._write((null===this._subject?"":".\n")+this._encodeIriOrBlank(this._subject=t)+" "+this._encodePredicate(this._predicate=e)+" "+this._encodeObject(r),i)}catch(t){i&&i(t)}}_writeQuadLine(t,e,r,n,i){delete this._prefixMatch,this._write(this.quadToString(t,e,r,n),i)}quadToString(t,e,r,n){return this._encodeIriOrBlank(t)+" "+this._encodeIriOrBlank(e)+" "+this._encodeObject(r)+(n&&n.value?" "+this._encodeIriOrBlank(n)+" .\n":" .\n")}quadsToString(t){return t.map((function(t){return this.quadToString(t.subject,t.predicate,t.object,t.graph)}),this).join("")}_encodeIriOrBlank(t){if("NamedNode"!==t.termType)return this._lists&&t.value in this._lists&&(t=this.list(this._lists[t.value])),"id"in t?t.id:"_:"+t.value;var e=t.value;C.test(e)&&(e=e.replace(O,D));var r=this._prefixRegex.exec(e);return r?r[1]?this._prefixIRIs[r[1]]+r[2]:e:"<"+e+">"}_encodeLiteral(t){var e=t.value;return C.test(e)&&(e=e.replace(O,D)),t.language?'"'+e+'"@'+t.language:t.datatype.value!==R.string?'"'+e+'"^^'+this._encodeIriOrBlank(t.datatype):'"'+e+'"'}_encodePredicate(t){return t.value===I.type?"a":this._encodeIriOrBlank(t)}_encodeObject(t){return"Literal"===t.termType?this._encodeLiteral(t):this._encodeIriOrBlank(t)}_blockedWrite(){throw new Error("Cannot write because the writer has been closed.")}addQuad(t,e,r,n,i){void 0===r?this._writeQuad(t.subject,t.predicate,t.object,t.graph,e):"function"==typeof n?this._writeQuad(t,e,r,T,n):this._writeQuad(t,e,r,n||T,i)}addQuads(t){for(var e=0;e<t.length;e++)this.addQuad(t[e])}addPrefix(t,e,r){var n={};n[t]=e,this.addPrefixes(n,r)}addPrefixes(t,e){var r=this._prefixIRIs,n=!1;for(var i in t){var o=t[i];"string"!=typeof o&&(o=o.value),n=!0,null!==this._subject&&(this._write(this._inDefaultGraph?".\n":"\n}\n"),this._subject=null,this._graph=""),r[o]=i+=":",this._write("@prefix "+i+" <"+o+">.\n")}if(n){var s="",a="";for(var u in r)s+=s?"|"+u:u,a+=(a?"|":"")+r[u];s=s.replace(/[\]\/\(\)\*\+\?\.\\\$]/g,"\\$&"),this._prefixRegex=new RegExp("^(?:"+a+")[^/]*$|^("+s+")([a-zA-Z][\\-_a-zA-Z0-9]*)$")}this._write(n?"\n":"",e)}blank(t,e){var r,n,i=t;switch(void 0===t?i=[]:t.termType?i=[{predicate:t,object:e}]:"length"in t||(i=[t]),n=i.length){case 0:return new P("[]");case 1:if(!((r=i[0]).object instanceof P))return new P("[ "+this._encodePredicate(r.predicate)+" "+this._encodeObject(r.object)+" ]");default:for(var o="[",s=0;s<n;s++)(r=i[s]).predicate.equals(t)?o+=", "+this._encodeObject(r.object):(o+=(s?";\n  ":"\n  ")+this._encodePredicate(r.predicate)+" "+this._encodeObject(r.object),t=r.predicate);return new P(o+"\n]")}}list(t){for(var e=t&&t.length||0,r=new Array(e),n=0;n<e;n++)r[n]=this._encodeObject(t[n]);return new P("("+r.join(" ")+")")}end(t){null!==this._subject&&(this._write(this._inDefaultGraph?".\n":"\n}\n"),this._subject=null),this._write=this._blockedWrite;var e=t&&function(r,n){e=null,t(r,n)};if(this._endStream)try{return this._outputStream.end(e)}catch(t){}e&&e()}}function D(t){var e=A[t];return void 0===e&&(1===t.length?(e=t.charCodeAt(0).toString(16),e="\\u0000".substr(0,6-e.length)+e):(e=(1024*(t.charCodeAt(0)-55296)+t.charCodeAt(1)+9216).toString(16),e="\\U00000000".substr(0,10-e.length)+e)),e}var k=r(1);const{toId:j,fromId:L}=y.internal;class M{constructor(t,e){this._size=0,this._graphs=Object.create(null),this._id=0,this._ids=Object.create(null),this._ids["><"]=0,this._entities=Object.create(null),this._blankNodeIndex=0,e||!t||t[0]||(e=t,t=null),e=e||{},this._factory=e.factory||y,t&&this.addQuads(t)}get size(){var t=this._size;if(null!==t)return t;t=0;var e,r,n=this._graphs;for(var i in n)for(var o in e=n[i].subjects)for(var s in r=e[o])t+=Object.keys(r[s]).length;return this._size=t}_addToIndex(t,e,r,n){var i=t[e]||(t[e]={}),o=i[r]||(i[r]={}),s=n in o;return s||(o[n]=null),!s}_removeFromIndex(t,e,r,n){var i,o=t[e],s=o[r];for(i in delete s[n],s)return;for(i in delete o[r],o)return;delete t[e]}_findInIndex(t,e,r,n,i,o,s,a,u,c){var l,h,f,d=!e+!r+!n>1?Object.keys(this._ids):this._entities;for(var p in e&&((l=t,t={})[e]=l[e]),t){var _=d[p];if(h=t[p])for(var g in r&&((l=h,h={})[r]=l[r]),h){var y=d[g];if(f=h[g])for(var m=(n?n in f?[n]:[]:Object.keys(f)),b=0;b<m.length;b++){var v={subject:null,predicate:null,object:null};v[i]=L(_,this._factory),v[o]=L(y,this._factory),v[s]=L(d[m[b]],this._factory);var w=this._factory.quad(v.subject,v.predicate,v.object,L(a,this._factory));if(c)c.push(w);else if(u(w))return!0}}}return c}_loop(t,e){for(var r in t)e(r)}_loopByKey0(t,e,r){var n,i;if(n=t[e])for(i in n)r(i)}_loopByKey1(t,e,r){var n;for(n in t)t[n][e]&&r(n)}_loopBy2Keys(t,e,r,n){var i,o,s;if((i=t[e])&&(o=i[r]))for(s in o)n(s)}_countInIndex(t,e,r,n){var i,o,s,a=0;for(var u in e&&((i=t,t={})[e]=i[e]),t)if(o=t[u])for(var c in r&&((i=o,o={})[r]=i[r]),o)(s=o[c])&&(n?n in s&&a++:a+=Object.keys(s).length);return a}_getGraphs(t){if(!F(t))return this._graphs;var e={};return e[t]=this._graphs[t],e}_uniqueEntities(t){var e=Object.create(null),r=this._entities;return function(n){n in e||(e[n]=!0,t(L(r[n])))}}addQuad(t,e,r,n){e||(n=t.graph,r=t.object,e=t.predicate,t=t.subject),t=j(t),e=j(e),r=j(r),n=j(n);var i=this._graphs[n];i||(i=this._graphs[n]={subjects:{},predicates:{},objects:{}},Object.freeze(i));var o=this._ids,s=this._entities;t=o[t]||(o[s[++this._id]=t]=this._id),e=o[e]||(o[s[++this._id]=e]=this._id),r=o[r]||(o[s[++this._id]=r]=this._id);var a=this._addToIndex(i.subjects,t,e,r);return this._addToIndex(i.predicates,e,r,t),this._addToIndex(i.objects,r,t,e),this._size=null,a}addQuads(t){for(var e=0;e<t.length;e++)this.addQuad(t[e])}import(t){var e=this;return t.on("data",(function(t){e.addQuad(t)})),t}removeQuad(t,e,r,n){e||(n=t.graph,r=t.object,e=t.predicate,t=t.subject),t=j(t),e=j(e),r=j(r),n=j(n);var i,o,s,a=this._ids,u=this._graphs;if(!((t=a[t])&&(e=a[e])&&(r=a[r])&&(i=u[n])&&(o=i.subjects[t])&&(s=o[e])&&r in s))return!1;for(t in this._removeFromIndex(i.subjects,t,e,r),this._removeFromIndex(i.predicates,e,r,t),this._removeFromIndex(i.objects,r,t,e),null!==this._size&&this._size--,i.subjects)return!0;return delete u[n],!0}removeQuads(t){for(var e=0;e<t.length;e++)this.removeQuad(t[e])}remove(t){var e=this;return t.on("data",(function(t){e.removeQuad(t)})),t}removeMatches(t,e,r,n){return this.remove(this.match(t,e,r,n))}deleteGraph(t){return this.removeMatches(null,null,null,t)}getQuads(t,e,r,n){t=t&&j(t),e=e&&j(e),r=r&&j(r),n=n&&j(n);var i,o,s,a,u=[],c=this._getGraphs(n),l=this._ids;if(F(t)&&!(o=l[t])||F(e)&&!(s=l[e])||F(r)&&!(a=l[r]))return u;for(var h in c)(i=c[h])&&(o?a?this._findInIndex(i.objects,a,o,s,"object","subject","predicate",h,null,u):this._findInIndex(i.subjects,o,s,null,"subject","predicate","object",h,null,u):s?this._findInIndex(i.predicates,s,a,null,"predicate","object","subject",h,null,u):a?this._findInIndex(i.objects,a,null,null,"object","subject","predicate",h,null,u):this._findInIndex(i.subjects,null,null,null,"subject","predicate","object",h,null,u));return u}match(t,e,r,n){var i=new k.Readable({objectMode:!0});return i._read=()=>{for(var o of this.getQuads(t,e,r,n))i.push(o);i.push(null)},i}countQuads(t,e,r,n){t=t&&j(t),e=e&&j(e),r=r&&j(r),n=n&&j(n);var i,o,s,a,u=0,c=this._getGraphs(n),l=this._ids;if(F(t)&&!(o=l[t])||F(e)&&!(s=l[e])||F(r)&&!(a=l[r]))return 0;for(var h in c)(i=c[h])&&(u+=t?r?this._countInIndex(i.objects,a,o,s):this._countInIndex(i.subjects,o,s,a):e?this._countInIndex(i.predicates,s,a,o):this._countInIndex(i.objects,a,o,s));return u}forEach(t,e,r,n,i){this.some((function(e){return t(e),!1}),e,r,n,i)}every(t,e,r,n,i){var o=!1,s=!this.some((function(e){return o=!0,!t(e)}),e,r,n,i);return o&&s}some(t,e,r,n,i){e=e&&j(e),r=r&&j(r),n=n&&j(n),i=i&&j(i);var o,s,a,u,c=this._getGraphs(i),l=this._ids;if(F(e)&&!(s=l[e])||F(r)&&!(a=l[r])||F(n)&&!(u=l[n]))return!1;for(var h in c)if(o=c[h])if(s){if(u){if(this._findInIndex(o.objects,u,s,a,"object","subject","predicate",h,t,null))return!0}else if(this._findInIndex(o.subjects,s,a,null,"subject","predicate","object",h,t,null))return!0}else if(a){if(this._findInIndex(o.predicates,a,u,null,"predicate","object","subject",h,t,null))return!0}else if(u){if(this._findInIndex(o.objects,u,null,null,"object","subject","predicate",h,t,null))return!0}else if(this._findInIndex(o.subjects,null,null,null,"subject","predicate","object",h,t,null))return!0;return!1}getSubjects(t,e,r){var n=[];return this.forSubjects((function(t){n.push(t)}),t,e,r),n}forSubjects(t,e,r,n){e=e&&j(e),r=r&&j(r),n=n&&j(n);var i,o,s,a=this._ids,u=this._getGraphs(n);if(t=this._uniqueEntities(t),!(F(e)&&!(o=a[e])||F(r)&&!(s=a[r])))for(n in u)(i=u[n])&&(o?s?this._loopBy2Keys(i.predicates,o,s,t):this._loopByKey1(i.subjects,o,t):s?this._loopByKey0(i.objects,s,t):this._loop(i.subjects,t))}getPredicates(t,e,r){var n=[];return this.forPredicates((function(t){n.push(t)}),t,e,r),n}forPredicates(t,e,r,n){e=e&&j(e),r=r&&j(r),n=n&&j(n);var i,o,s,a=this._ids,u=this._getGraphs(n);if(t=this._uniqueEntities(t),!(F(e)&&!(o=a[e])||F(r)&&!(s=a[r])))for(n in u)(i=u[n])&&(o?s?this._loopBy2Keys(i.objects,s,o,t):this._loopByKey0(i.subjects,o,t):s?this._loopByKey1(i.predicates,s,t):this._loop(i.predicates,t))}getObjects(t,e,r){var n=[];return this.forObjects((function(t){n.push(t)}),t,e,r),n}forObjects(t,e,r,n){e=e&&j(e),r=r&&j(r),n=n&&j(n);var i,o,s,a=this._ids,u=this._getGraphs(n);if(t=this._uniqueEntities(t),!(F(e)&&!(o=a[e])||F(r)&&!(s=a[r])))for(n in u)(i=u[n])&&(o?s?this._loopBy2Keys(i.subjects,o,s,t):this._loopByKey1(i.objects,o,t):s?this._loopByKey0(i.predicates,s,t):this._loop(i.objects,t))}getGraphs(t,e,r){var n=[];return this.forGraphs((function(t){n.push(t)}),t,e,r),n}forGraphs(t,e,r,n){for(var i in this._graphs)this.some((function(e){return t(e.graph),!0}),e,r,n,i)}createBlankNode(t){var e,r;if(t)for(e=t="_:"+t,r=1;this._ids[e];)e=t+r++;else do{e="_:b"+this._blankNodeIndex++}while(this._ids[e]);return this._ids[e]=++this._id,this._entities[this._id]=e,this._factory.blankNode(e.substr(2))}extractLists({remove:t=!1,ignoreErrors:e=!1}={}){var r={},n=e?()=>!0:(t,e)=>{throw new Error(`${t.value} ${e}`)},o=this.getQuads(null,i.a.rdf.rest,i.a.rdf.nil,null),s=t?[...o]:[];return o.forEach(e=>{for(var o,a,u=[],c=!1,l=e.graph,h=e.subject;h&&!c;){var f,d,p=this.getQuads(null,null,h,null),_=this.getQuads(h,null,null,null),g=null,y=null,m=null;for(f=0;f<_.length&&!c;f++)(d=_[f]).graph.equals(l)?o?c=n(h,"has non-list arcs out"):d.predicate.value===i.a.rdf.first?g?c=n(h,"has multiple rdf:first arcs"):s.push(g=d):d.predicate.value===i.a.rdf.rest?y?c=n(h,"has multiple rdf:rest arcs"):s.push(y=d):p.length?c=n(h,"can't be subject and object"):(o=d,a="subject"):c=n(h,"not confined to single graph");for(f=0;f<p.length&&!c;++f)d=p[f],o?c=n(h,"can't have coreferences"):d.predicate.value===i.a.rdf.rest?m?c=n(h,"has incoming rdf:rest arcs"):m=d:(o=d,a="object");g?u.unshift(g.object):c=n(h,"has no list head"),h=m&&m.subject}c?t=!1:o&&(r[o[a].value]=u)}),t&&this.removeQuads(s),r}}function F(t){return"string"==typeof t||t instanceof String}class q extends k.Transform{constructor(t){super({decodeStrings:!0}),this._readableState.objectMode=!0;var e,r,n=this;new x(t).parse({on:function(t,n){switch(t){case"data":e=n;break;case"end":r=n}}},(function(t,e){t&&n.emit("error",t)||e&&n.push(e)}),(function(t,e){n.emit("prefix",t,e)})),this._transform=function(t,r,n){e(t),n()},this._flush=function(t){r(),t()}}import(t){var e=this;return t.on("data",(function(t){e.write(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.emit("error",t)})),this}}class B extends k.Transform{constructor(t){super({encoding:"utf8"}),this._writableState.objectMode=!0;var e=this,r=this._writer=new N({write:function(t,r,n){e.push(t),n&&n()},end:function(t){e.push(null),t&&t()}},t);this._transform=function(t,e,n){r.addQuad(t,n)},this._flush=function(t){r.end(t)}}import(t){var e=this;return t.on("data",(function(t){e.write(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.emit("error",t)})),t.on("prefix",(function(t,r){e._writer.addPrefix(t,r)})),this}}function U(t){return!!t&&"NamedNode"===t.termType}function V(t){return!!t&&"BlankNode"===t.termType}function z(t){return!!t&&"Literal"===t.termType}function G(t){return!!t&&"Variable"===t.termType}function H(t){return!!t&&"DefaultGraph"===t.termType}function W(t){return H(t.graph)}function $(t,e){return K({"":t},e)("")}function K(t,e){var r=Object.create(null);for(var n in t)i(n,t[n]);function i(t,n){if("string"==typeof n){var i=Object.create(null);r[t]=function(t){return i[t]||(i[t]=e.namedNode(n+t))}}else if(!(t in r))throw new Error("Unknown prefix: "+t);return r[t]}return e=e||y,i}r.d(e,"DataFactory",(function(){return y})),r.d(e,"Lexer",(function(){return b.a})),r.d(e,"Parser",(function(){return x})),r.d(e,"Writer",(function(){return N})),r.d(e,"Store",(function(){return M})),r.d(e,"StreamParser",(function(){return q})),r.d(e,"StreamWriter",(function(){return B})),r.d(e,"Util",(function(){return n}))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,