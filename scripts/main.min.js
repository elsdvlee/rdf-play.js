!function(e,t){for(var r in t)e[r]=t[r]}(window,function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=21)}([function(e,t,r){"use strict";var n=r(5),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=c;var o=Object.create(r(3));o.inherits=r(1);var a=r(13),s=r(10);o.inherits(c,a);for(var u=i(s.prototype),f=0;f<u.length;f++){var l=u[f];c.prototype[l]||(c.prototype[l]=s.prototype[l])}function c(e){if(!(this instanceof c))return new c(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",h)}function h(){this.allowHalfOpen||this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(c.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(c.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),c.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(9).Buffer)},function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var u,f=[],l=!1,c=-1;function h(){l&&u&&(l=!1,u.length?f=u.concat(f):c=-1,f.length&&d())}function d(){if(!l){var e=s(h);l=!0;for(var t=f.length;t;){for(u=f,f=[];++c<t;)u&&u[c].run();c=-1,t=f.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];f.push(new p(e,t)),1!==f.length||l||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";(function(t){void 0===t||!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick((function(){e.call(null,r)}));case 3:return t.nextTick((function(){e.call(null,r,n)}));case 4:return t.nextTick((function(){e.call(null,r,n,i)}));default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return t.nextTick((function(){e.apply(null,o)}))}}}:e.exports=t}).call(this,r(4))},function(e,t,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function f(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var i,o,a,s;if(f(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=l(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function p(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):y(i,i.length)}function g(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return l(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var f=u.length,l=y(u,f);for(r=0;r<f;++r)o(l[r],this,t)}return!0},s.prototype.addListener=function(e,t){return c(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return c(this,e,t,!0)},s.prototype.once=function(e,t){return f(t),this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return f(t),this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,i,o,a;if(f(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return p(this,e,!0)},s.prototype.rawListeners=function(e){return p(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):g.call(e,t)},s.prototype.listenerCount=g,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){(t=e.exports=r(13)).Stream=t,t.Readable=t,t.Writable=r(10),t.Duplex=r(0),t.Transform=r(18),t.PassThrough=r(38)},function(e,t,r){var n=r(9),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(29),i=r(30),o=r(14);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return c(this,e)}return f(this,e,t,r)}function f(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=h(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=s(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=s(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):h(e,t);if("Buffer"===t.type&&o(t.data))return h(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function c(e,t){if(l(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function h(e,t){var r=t.length<0?0:0|d(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return D(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Y(e).length;default:if(n)return D(e).length;t=(""+t).toLowerCase(),n=!0}}function g(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return j(this,t,r);case"utf8":case"utf-8":return R(this,t,r);case"ascii":return k(this,t,r);case"latin1":case"binary":return L(this,t,r);case"base64":return E(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function b(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,i){var o,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function f(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var l=-1;for(o=r;o<s;o++)if(f(e,o)===f(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*a}else-1!==l&&(o-=o-l),l=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var c=!0,h=0;h<u;h++)if(f(e,o+h)!==f(t,h)){c=!1;break}if(c)return o}return-1}function w(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function m(e,t,r,n){return W(D(t,e.length-r),e,r,n)}function _(e,t,r,n){return W(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function S(e,t,r,n){return _(e,t,r,n)}function T(e,t,r,n){return W(Y(t),e,r,n)}function x(e,t,r,n){return W(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function E(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function R(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,u,f=e[i],l=null,c=f>239?4:f>223?3:f>191?2:1;if(i+c<=r)switch(c){case 1:f<128&&(l=f);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&f)<<6|63&o)>127&&(l=u);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(u=(15&f)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&f)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,c=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=c}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return f(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return c(null,e)},u.allocUnsafeSlow=function(e){return c(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?R(this,0,e):g.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),f=this.slice(n,i),l=e.slice(t,r),c=0;c<s;++c)if(f[c]!==l[c]){o=f[c],a=l[c];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return m(this,e,t,r);case"ascii":return _(this,e,t,r);case"latin1":case"binary":return S(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function L(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function j(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=q(e[o]);return i}function A(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function O(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function M(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function C(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function P(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function B(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function I(e,t,r,n,o){return o||B(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function N(e,t,r,n,o){return o||B(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||O(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||O(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||O(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||O(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||O(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||O(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||O(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||O(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||O(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||O(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||O(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||O(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||O(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||O(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||O(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||O(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||O(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||O(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||M(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||M(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):P(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):P(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);M(this,e,t,r,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);M(this,e,t,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):P(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):P(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return I(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return I(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=u.isBuffer(e)?e:D(new u(e,n).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function q(e){return e<16?"0"+e.toString(16):e.toString(16)}function D(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function Y(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function W(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(2))},function(e,t,r){"use strict";(function(t,n,i){var o=r(5);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=v;var s,u=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;v.WritableState=b;var f=Object.create(r(3));f.inherits=r(1);var l={deprecate:r(36)},c=r(15),h=r(8).Buffer,d=i.Uint8Array||function(){};var p,g=r(16);function y(){}function b(e,t){s=s||r(0),e=e||{};var n=t instanceof s;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,f=e.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(f||0===f)?f:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var c=!1===e.decodeStrings;this.decodeStrings=!c,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(o.nextTick(i,n),o.nextTick(x,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),x(e,t))}(e,r,n,t,i);else{var a=S(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||_(e,r),n?u(m,e,r,a,i):m(e,r,a,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function v(e){if(s=s||r(0),!(p.call(v,this)||this instanceof s))return new v(e);this._writableState=new b(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),c.call(this)}function w(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function m(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),x(e,t)}function _(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var s=0,u=!0;r;)i[s]=r,r.isBuf||(u=!1),r=r.next,s+=1;i.allBuffers=u,w(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;r;){var f=r.chunk,l=r.encoding,c=r.callback;if(w(e,t,!1,t.objectMode?1:f.length,f,l,c),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function S(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function T(e,t){e._final((function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),x(e,t)}))}function x(e,t){var r=S(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(T,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}f.inherits(v,c),b.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(b.prototype,"buffer",{get:l.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===v&&(e&&e._writableState instanceof b)}})):p=function(e){return e instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(e,t,r){var n,i=this._writableState,a=!1,s=!i.objectMode&&(n=e,h.isBuffer(n)||n instanceof d);return s&&!h.isBuffer(e)&&(e=function(e){return h.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=y),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var i=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(n,a),i=!1),i}(this,i,e,r))&&(i.pendingcb++,a=function(e,t,r,n,i,o){if(!r){var a=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=h.from(t,r));return t}(t,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=t.objectMode?1:n.length;t.length+=s;var u=t.length<t.highWaterMark;u||(t.needDrain=!0);if(t.writing||t.corked){var f=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},f?f.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else w(e,t,!1,s,n,i,o);return u}(this,i,s,e,t,r)),a},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||_(this,e))},v.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,x(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),v.prototype.destroy=g.destroy,v.prototype._undestroy=g.undestroy,v.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(4),r(34).setImmediate,r(2))},function(e,t){function r(){this.value=""}r.prototype.equals=function(e){return!!e&&e.termType===this.termType},r.prototype.termType="DefaultGraph",e.exports=r},function(e,t){function r(e){this.value=e}r.prototype.equals=function(e){return!!e&&e.termType===this.termType&&e.value===this.value},r.prototype.termType="NamedNode",e.exports=r},function(e,t,r){"use strict";(function(t,n){var i=r(5);e.exports=w;var o,a=r(14);w.ReadableState=v;r(6).EventEmitter;var s=function(e,t){return e.listeners(t).length},u=r(15),f=r(8).Buffer,l=t.Uint8Array||function(){};var c=Object.create(r(3));c.inherits=r(1);var h=r(31),d=void 0;d=h&&h.debuglog?h.debuglog("stream"):function(){};var p,g=r(32),y=r(16);c.inherits(w,u);var b=["error","close","destroy","pause","resume"];function v(e,t){e=e||{};var n=t instanceof(o=o||r(0));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(17).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function w(e){if(o=o||r(0),!(this instanceof w))return new w(e);this._readableState=new v(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),u.call(this)}function m(e,t,r,n,i){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,T(e)}(e,a)):(i||(o=function(e,t){var r;n=t,f.isBuffer(n)||n instanceof l||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===f.prototype||(t=function(e){return f.from(e)}(t)),n?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):_(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!r?(t=a.decoder.write(t),a.objectMode||0!==t.length?_(e,a,t,!1):E(e,a)):_(e,a,t,!1))):n||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function _(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&T(e)),E(e,t)}Object.defineProperty(w.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),w.prototype.destroy=y.destroy,w.prototype._undestroy=y.undestroy,w.prototype._destroy=function(e,t){this.push(null),t(e)},w.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=f.from(e,t),t=""),r=!0),m(this,e,t,!1,r)},w.prototype.unshift=function(e){return m(this,e,null,!0,!1)},w.prototype.isPaused=function(){return!1===this._readableState.flowing},w.prototype.setEncoding=function(e){return p||(p=r(17).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function T(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(d("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(x,e):x(e))}function x(e){d("emit readable"),e.emit("readable"),j(e)}function E(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(R,e,t))}function R(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(d("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function k(e){d("readable nexttick read 0"),e.read(0)}function L(e,t){t.reading||(d("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),j(e),t.flowing&&!t.reading&&e.read(0)}function j(e){var t=e._readableState;for(d("flow",t.flowing);t.flowing&&null!==e.read(););}function A(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0===(e-=a)){a===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=f.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,a),0===(e-=a)){a===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function O(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(M,t,e))}function M(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function C(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}w.prototype.read=function(e){d("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return d("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?O(this):T(this),null;if(0===(e=S(e,t))&&t.ended)return 0===t.length&&O(this),null;var n,i=t.needReadable;return d("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&d("length less than watermark",i=!0),t.ended||t.reading?d("reading or ended",i=!1):i&&(d("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=S(r,t))),null===(n=e>0?A(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&O(this)),null!==n&&this.emit("data",n),n},w.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},w.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,d("pipe count=%d opts=%j",o.pipesCount,t);var u=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?l:w;function f(t,n){d("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,d("cleanup"),e.removeListener("close",b),e.removeListener("finish",v),e.removeListener("drain",c),e.removeListener("error",y),e.removeListener("unpipe",f),r.removeListener("end",l),r.removeListener("end",w),r.removeListener("data",g),h=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||c())}function l(){d("onend"),e.end()}o.endEmitted?i.nextTick(u):r.once("end",u),e.on("unpipe",f);var c=function(e){return function(){var t=e._readableState;d("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,j(e))}}(r);e.on("drain",c);var h=!1;var p=!1;function g(t){d("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==C(o.pipes,e))&&!h&&(d("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){d("onerror",t),w(),e.removeListener("error",y),0===s(e,"error")&&e.emit("error",t)}function b(){e.removeListener("finish",v),w()}function v(){d("onfinish"),e.removeListener("close",b),w()}function w(){d("unpipe"),r.unpipe(e)}return r.on("data",g),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",b),e.once("finish",v),e.emit("pipe",r),o.flowing||(d("pipe resume"),r.resume()),e},w.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=C(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},w.prototype.on=function(e,t){var r=u.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&T(this):i.nextTick(k,this))}return r},w.prototype.addListener=w.prototype.on,w.prototype.resume=function(){var e=this._readableState;return e.flowing||(d("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(L,e,t))}(this,e)),this},w.prototype.pause=function(){return d("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(d("pause"),this._readableState.flowing=!1,this.emit("pause")),this},w.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(d("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(d("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<b.length;o++)e.on(b[o],this.emit.bind(this,b[o]));return this._read=function(t){d("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(w.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),w._fromList=A}).call(this,r(2),r(4))},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){e.exports=r(6).EventEmitter},function(e,t,r){"use strict";var n=r(5);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";var n=r(37).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=f,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=l,this.end=c,t=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function f(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function l(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function c(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function h(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=a(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";e.exports=a;var n=r(0),i=Object.create(r(3));function o(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);n.call(this,e),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(t,r){u(e,t,r)})):u(this,null,null)}function u(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(1),i.inherits(a,n),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,(function(e){t(e),r.emit("close")}))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(22);t.getLiteralLanguage=n.getLiteralLanguage,t.getLiteralType=n.getLiteralType,t.getLiteralValue=n.getLiteralValue,t.quadToStringQuad=n.quadToStringQuad,t.stringQuadToQuad=n.stringQuadToQuad,t.stringToTerm=n.stringToTerm,t.termToString=n.termToString},function(e,t,r){e.exports=i;var n=r(6).EventEmitter;function i(){n.call(this)}r(1)(i,n),i.Readable=r(7),i.Writable=r(39),i.Duplex=r(40),i.Transform=r(41),i.PassThrough=r(42),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",u));var a=!1;function s(){a||(a=!0,e.end())}function u(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function f(e){if(l(),0===n.listenerCount(this,"error"))throw e}function l(){r.removeListener("data",i),e.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",u),r.removeListener("error",f),e.removeListener("error",f),r.removeListener("end",l),r.removeListener("close",l),e.removeListener("close",l)}return r.on("error",f),e.on("error",f),r.on("end",l),r.on("close",l),e.on("close",l),e.emit("pipe",r),e}},function(e,t,r){r(46),r(43),r(44),e.exports=r(45)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(23);function i(e){if(!e)return null;switch(e.termType){case"NamedNode":return e.value;case"BlankNode":return"_:"+e.value;case"Literal":const t=e;return'"'+t.value+'"'+(t.datatype&&"http://www.w3.org/2001/XMLSchema#string"!==t.datatype.value&&"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"!==t.datatype.value?"^^"+t.datatype.value:"")+(t.language?"@"+t.language:"");case"Variable":return"?"+e.value;case"DefaultGraph":return e.value}}function o(e){const t=/^"([^]*)"/.exec(e);if(!t)throw new Error(e+" is not a literal");return t[1]}function a(e){const t=/^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(e);if(!t)throw new Error(e+" is not a literal");return t[1]||(t[2]?"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString":"http://www.w3.org/2001/XMLSchema#string")}function s(e){const t=/^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(e);if(!t)throw new Error(e+" is not a literal");return t[1]?t[1].toLowerCase():""}function u(e,t){if(t=t||n,!e||!e.length)return t.defaultGraph();switch(e[0]){case"_":return t.blankNode(e.substr(2));case"?":return t.variable(e.substr(1));case'"':const r=s(e),n=t.namedNode(a(e));return t.literal(o(e),r||n);default:return t.namedNode(e)}}t.termToString=i,t.getLiteralValue=o,t.getLiteralType=a,t.getLiteralLanguage=s,t.stringToTerm=u,t.quadToStringQuad=function(e){return{subject:i(e.subject),predicate:i(e.predicate),object:i(e.object),graph:i(e.graph)}},t.stringQuadToQuad=function(e,t){return(t=t||n).quad(u(e.subject,t),u(e.predicate,t),u(e.object,t),u(e.graph,t))}},function(e,t,r){var n=r(24);e.exports=n},function(e,t,r){var n=r(25),i=r(11),o=r(26),a=r(12),s=r(27),u=r(28);function f(){}f.namedNode=function(e){return new a(e)},f.blankNode=function(e){return new n(e)},f.literal=function(e,t){return"string"==typeof t?-1===t.indexOf(":")?new o(e,t):new o(e,null,f.namedNode(t)):new o(e,null,t)},f.defaultGraph=function(){return f.defaultGraphInstance},f.variable=function(e){return new u(e)},f.triple=function(e,t,r){return f.quad(e,t,r)},f.quad=function(e,t,r,n){return new s(e,t,r,n||f.defaultGraphInstance)},f.defaultGraphInstance=new i,e.exports=f},function(e,t){function r(e){this.value=e||"b"+ ++r.nextId}r.prototype.equals=function(e){return!!e&&e.termType===this.termType&&e.value===this.value},r.prototype.termType="BlankNode",r.nextId=0,e.exports=r},function(e,t,r){var n=r(12);function i(e,t,r){this.value=e,this.datatype=i.stringDatatype,this.language="",t?(this.language=t,this.datatype=i.langStringDatatype):r&&(this.datatype=r)}i.prototype.equals=function(e){return!!e&&e.termType===this.termType&&e.value===this.value&&e.language===this.language&&e.datatype.equals(this.datatype)},i.prototype.termType="Literal",i.langStringDatatype=new n("http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"),i.stringDatatype=new n("http://www.w3.org/2001/XMLSchema#string"),e.exports=i},function(e,t,r){var n=r(11);function i(e,t,r,i){this.subject=e,this.predicate=t,this.object=r,this.graph=i||new n}i.prototype.equals=function(e){return!!e&&e.subject.equals(this.subject)&&e.predicate.equals(this.predicate)&&e.object.equals(this.object)&&e.graph.equals(this.graph)},e.exports=i},function(e,t){function r(e){this.value=e}r.prototype.equals=function(e){return!!e&&e.termType===this.termType&&e.value===this.value},r.prototype.termType="Variable",e.exports=r},function(e,t,r){"use strict";t.byteLength=function(e){var t=f(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=f(e),a=n[0],s=n[1],u=new o(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),l=0,c=s>0?a-4:a;for(r=0;r<c;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===s&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,u[l++]=255&t);1===s&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(l(e,a,a+16383>s?s:a+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function f(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var i,o,a=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,f=u>>1,l=-7,c=r?i-1:0,h=r?-1:1,d=e[t+c];for(c+=h,o=d&(1<<-l)-1,d>>=-l,l+=s;l>0;o=256*o+e[t+c],c+=h,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=n;l>0;a=256*a+e[t+c],c+=h,l-=8);if(0===o)o=1-f;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),o-=f}return(d?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,u,f=8*o-i-1,l=(1<<f)-1,c=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+c>=1?h/u:h*Math.pow(2,1-c))*u>=2&&(a++,u/=2),a+c>=l?(s=0,a=l):a+c>=1?(s=(t*u-1)*Math.pow(2,i),a+=c):(s=t*Math.pow(2,c-1)*Math.pow(2,i),a=0));i>=8;e[r+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,f+=i;f>0;e[r+d]=255&a,d+=p,a/=256,f-=8);e[r+d-p]|=128*g}},function(e,t){},function(e,t,r){"use strict";var n=r(8).Buffer,i=r(33);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,i,o=n.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,r=o,i=s,t.copy(r,i),s+=a.data.length,a=a.next;return o},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(35),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(2))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,o,a,s,u=1,f={},l=!1,c=e.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(e);h=h&&h.setTimeout?h:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){o.port2.postMessage(e)}):c&&"onreadystatechange"in c.createElement("script")?(i=c.documentElement,n=function(e){var t=c.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),n=function(t){e.postMessage(a+t,"*")}),h.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return f[u]=i,n(u),u++},h.clearImmediate=d}function d(e){delete f[e]}function p(e){if(l)setTimeout(p,0,e);else{var t=f[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(void 0,r)}}(t)}finally{d(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(2),r(4))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(2))},function(e,t,r){var n=r(9),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";e.exports=o;var n=r(18),i=Object.create(r(3));function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}i.inherits=r(1),i.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(10)},function(e,t,r){e.exports=r(0)},function(e,t,r){e.exports=r(7).Transform},function(e,t,r){e.exports=r(7).PassThrough},function(e,t,r){"use strict";r.r(t),t.default=r.p+"index.html"},function(e,t,r){"use strict";r.r(t),t.default=r.p+"styles/main.css"},function(e,t,r){"use strict";r.r(t),t.default=r.p+"images/settings.svg"},function(e,t,r){"use strict";r.r(t);var n=r(20),i="http://www.w3.org/1999/02/22-rdf-syntax-ns#",o="http://www.w3.org/2001/XMLSchema#",a="http://www.w3.org/2000/10/swap/",s={xsd:{decimal:o+"decimal",boolean:o+"boolean",double:o+"double",integer:o+"integer",string:o+"string"},rdf:{type:i+"type",nil:i+"nil",first:i+"first",rest:i+"rest",langString:i+"langString"},owl:{sameAs:"http://www.w3.org/2002/07/owl#sameAs"},r:{forSome:a+"reify#forSome",forAll:a+"reify#forAll"},log:{implies:a+"log#implies"}};const{rdf:u,xsd:f}=s;var l,c,h=0;class d{constructor(e){this.id=e}get value(){return this.id}equals(e){return e instanceof d?this.id===e.id:!!e&&this.termType===e.termType&&this.value===e.value}toJSON(){return{termType:this.termType,value:this.value}}}class p extends d{get termType(){return"NamedNode"}}class g extends d{get termType(){return"Literal"}get value(){return this.id.substring(1,this.id.lastIndexOf('"'))}get language(){var e=this.id,t=e.lastIndexOf('"')+1;return t<e.length&&"@"===e[t++]?e.substr(t).toLowerCase():""}get datatype(){return new p(this.datatypeString)}get datatypeString(){var e,t=this.id,r=t.lastIndexOf('"')+1;return r<t.length&&"^"===(e=t[r])?t.substr(r+2):"@"!==e?f.string:u.langString}equals(e){return e instanceof g?this.id===e.id:!!e&&!!e.datatype&&this.termType===e.termType&&this.value===e.value&&this.language===e.language&&this.datatype.value===e.datatype.value}toJSON(){return{termType:this.termType,value:this.value,language:this.language,datatype:{termType:"NamedNode",value:this.datatypeString}}}}class y extends d{constructor(e){super("_:"+e)}get termType(){return"BlankNode"}get value(){return this.id.substr(2)}}class b extends d{constructor(e){super("?"+e)}get termType(){return"Variable"}get value(){return this.id.substr(1)}}class v extends d{constructor(){return super(""),c||this}get termType(){return"DefaultGraph"}equals(e){return this===e||!!e&&this.termType===e.termType}}c=new v;class w{constructor(e,t,r,n){this.subject=e,this.predicate=t,this.object=r,this.graph=n||c}toJSON(){return{subject:this.subject.toJSON(),predicate:this.predicate.toJSON(),object:this.object.toJSON(),graph:this.graph.toJSON()}}equals(e){return!!e&&this.subject.equals(e.subject)&&this.predicate.equals(e.predicate)&&this.object.equals(e.object)&&this.graph.equals(e.graph)}}var m=l={namedNode:function(e){return new p(e)},blankNode:function(e){e||(e="n3-"+h++);return new y(e)},variable:function(e){return new b(e)},literal:function(e,t){if("string"==typeof t)return new g('"'+e+'"@'+t.toLowerCase());let r=t?t.value:"";""===r&&("boolean"==typeof e?r=f.boolean:"number"==typeof e&&(Number.isFinite(e)?r=Number.isInteger(e)?f.integer:f.double:(r=f.double,Number.isNaN(e)||(e=e>0?"INF":"-INF"))));return""===r||r===f.string?new g('"'+e+'"'):new g('"'+e+'"^^'+r)},defaultGraph:function(){return c},quad:_,triple:_,internal:{Term:d,NamedNode:p,BlankNode:y,Variable:b,Literal:g,DefaultGraph:v,Quad:w,Triple:w,fromId:function(e,t){if(t=t||l,!e)return t.defaultGraph();switch(e[0]){case"_":return t.blankNode(e.substr(2));case"?":return t.variable(e.substr(1));case'"':if(t===l)return new g(e);if('"'===e[e.length-1])return t.literal(e.substr(1,e.length-2));var r=e.lastIndexOf('"',e.length-1);return t.literal(e.substr(1,r-1),"@"===e[r+1]?e.substr(r+2):t.namedNode(e.substr(r+3)));default:return t.namedNode(e)}},toId:function(e){if("string"==typeof e)return e;if(e instanceof d)return e.id;if(!e)return c.id;switch(e.termType){case"NamedNode":return e.value;case"BlankNode":return"_:"+e.value;case"Variable":return"?"+e.value;case"DefaultGraph":return"";case"Literal":return'"'+e.value+'"'+(e.language?"@"+e.language:e.datatype&&e.datatype.value!==f.string?"^^"+e.datatype.value:"");default:throw new Error("Unexpected termType: "+e.termType)}}}};function _(e,t,r,n){return new w(e,t,r,n)}const S=m.defaultGraph(),{rdf:T,xsd:x}=s;var E=/["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,R=/["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,k={"\\":"\\\\",'"':'\\"',"\t":"\\t","\n":"\\n","\r":"\\r","\b":"\\b","\f":"\\f"};class L extends m.internal.Term{equals(){return!1}}class j{constructor(e,t){if(this._prefixRegex=/$0^/,e&&"function"!=typeof e.write&&(t=e,e=null),t=t||{},this._lists=t.lists,e)this._outputStream=e,this._endStream=void 0===t.end||!!t.end;else{var r="";this._outputStream={write(e,t,n){r+=e,n&&n()},end:function(e){e&&e(null,r)}},this._endStream=!0}this._subject=null,/triple|quad/i.test(t.format)?this._writeQuad=this._writeQuadLine:(this._graph=S,this._prefixIRIs=Object.create(null),t.prefixes&&this.addPrefixes(t.prefixes))}get _inDefaultGraph(){return S.equals(this._graph)}_write(e,t){this._outputStream.write(e,"utf8",t)}_writeQuad(e,t,r,n,i){try{n.equals(this._graph)||(this._write((null===this._subject?"":this._inDefaultGraph?".\n":"\n}\n")+(S.equals(n)?"":this._encodeIriOrBlank(n)+" {\n")),this._graph=n,this._subject=null),e.equals(this._subject)?t.equals(this._predicate)?this._write(", "+this._encodeObject(r),i):this._write(";\n    "+this._encodePredicate(this._predicate=t)+" "+this._encodeObject(r),i):this._write((null===this._subject?"":".\n")+this._encodeIriOrBlank(this._subject=e)+" "+this._encodePredicate(this._predicate=t)+" "+this._encodeObject(r),i)}catch(e){i&&i(e)}}_writeQuadLine(e,t,r,n,i){delete this._prefixMatch,this._write(this.quadToString(e,t,r,n),i)}quadToString(e,t,r,n){return this._encodeIriOrBlank(e)+" "+this._encodeIriOrBlank(t)+" "+this._encodeObject(r)+(n&&n.value?" "+this._encodeIriOrBlank(n)+" .\n":" .\n")}quadsToString(e){return e.map((function(e){return this.quadToString(e.subject,e.predicate,e.object,e.graph)}),this).join("")}_encodeIriOrBlank(e){if("NamedNode"!==e.termType)return this._lists&&e.value in this._lists&&(e=this.list(this._lists[e.value])),"id"in e?e.id:"_:"+e.value;var t=e.value;E.test(t)&&(t=t.replace(R,A));var r=this._prefixRegex.exec(t);return r?r[1]?this._prefixIRIs[r[1]]+r[2]:t:"<"+t+">"}_encodeLiteral(e){var t=e.value;return E.test(t)&&(t=t.replace(R,A)),e.language?'"'+t+'"@'+e.language:e.datatype.value!==x.string?'"'+t+'"^^'+this._encodeIriOrBlank(e.datatype):'"'+t+'"'}_encodePredicate(e){return e.value===T.type?"a":this._encodeIriOrBlank(e)}_encodeObject(e){return"Literal"===e.termType?this._encodeLiteral(e):this._encodeIriOrBlank(e)}_blockedWrite(){throw new Error("Cannot write because the writer has been closed.")}addQuad(e,t,r,n,i){void 0===r?this._writeQuad(e.subject,e.predicate,e.object,e.graph,t):"function"==typeof n?this._writeQuad(e,t,r,S,n):this._writeQuad(e,t,r,n||S,i)}addQuads(e){for(var t=0;t<e.length;t++)this.addQuad(e[t])}addPrefix(e,t,r){var n={};n[e]=t,this.addPrefixes(n,r)}addPrefixes(e,t){var r=this._prefixIRIs,n=!1;for(var i in e){var o=e[i];"string"!=typeof o&&(o=o.value),n=!0,null!==this._subject&&(this._write(this._inDefaultGraph?".\n":"\n}\n"),this._subject=null,this._graph=""),r[o]=i+=":",this._write("@prefix "+i+" <"+o+">.\n")}if(n){var a="",s="";for(var u in r)a+=a?"|"+u:u,s+=(s?"|":"")+r[u];a=a.replace(/[\]\/\(\)\*\+\?\.\\\$]/g,"\\$&"),this._prefixRegex=new RegExp("^(?:"+s+")[^/]*$|^("+a+")([a-zA-Z][\\-_a-zA-Z0-9]*)$")}this._write(n?"\n":"",t)}blank(e,t){var r,n,i=e;switch(void 0===e?i=[]:e.termType?i=[{predicate:e,object:t}]:"length"in e||(i=[e]),n=i.length){case 0:return new L("[]");case 1:if(!((r=i[0]).object instanceof L))return new L("[ "+this._encodePredicate(r.predicate)+" "+this._encodeObject(r.object)+" ]");default:for(var o="[",a=0;a<n;a++)(r=i[a]).predicate.equals(e)?o+=", "+this._encodeObject(r.object):(o+=(a?";\n  ":"\n  ")+this._encodePredicate(r.predicate)+" "+this._encodeObject(r.object),e=r.predicate);return new L(o+"\n]")}}list(e){for(var t=e&&e.length||0,r=new Array(t),n=0;n<t;n++)r[n]=this._encodeObject(e[n]);return new L("("+r.join(" ")+")")}end(e){null!==this._subject&&(this._write(this._inDefaultGraph?".\n":"\n}\n"),this._subject=null),this._write=this._blockedWrite;var t=e&&function(r,n){t=null,e(r,n)};if(this._endStream)try{return this._outputStream.end(t)}catch(e){}t&&t()}}function A(e){var t=k[e];return void 0===t&&(1===e.length?(t=e.charCodeAt(0).toString(16),t="\\u0000".substr(0,6-t.length)+t):(t=(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)+9216).toString(16),t="\\U00000000".substr(0,10-t.length)+t)),t}class O extends n.Transform{constructor(e){super({encoding:"utf8"}),this._writableState.objectMode=!0;var t=this,r=this._writer=new j({write:function(e,r,n){t.push(e),n&&n()},end:function(e){t.push(null),e&&e()}},e);this._transform=function(e,t,n){r.addQuad(e,n)},this._flush=function(e){r.end(e)}}import(e){var t=this;return e.on("data",(function(e){t.write(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.emit("error",e)})),e.on("prefix",(function(e,r){t._writer.addPrefix(e,r)})),this}}var M,C=r(19);!function(){for(var e=null,t=location.hash.substr(1).split("&").reduce((function(e,t){var r=t.match(/^([^=]+)=(.*)/);return r&&(e[decodeURIComponent(r[1])]=decodeURIComponent(r[2])),e}),{}),r=document.querySelectorAll(".query"),n=function(n){var i=r.item(n),o=document.querySelector(".http-proxy");i.addEventListener("submit",(function(t){M="";var r=document.querySelector(".output"),n=document.querySelector(".output-counter"),a=document.querySelector(".output-error");a.style.display="none",r.style.display="block",e&&e.terminate();var s=o.value;return e=function(e,t,r,n,i){var o=new Worker("scripts/worker.min.js");return o.onmessage=function(e){var t=e.data;switch(t.type){case"quad":return r(Object(C.stringQuadToQuad)(t.quad));case"err":return n(t.error);case"counter":return i(t.counter,t.done)}},o.onerror=n,o.postMessage({url:e,proxy:t}),o}(i.querySelector(".field-url").value,s,function(){var e=document.querySelector(".output table.serialized");e.querySelectorAll(".row-result").forEach((function(e){return e.parentNode.removeChild(e)}));var t=new O({format:"trig"}),r=0,n=null;return t.on("data",(function(t){M+=t;for(var i=!0,o=0,a=t.split(/\n/g);o<a.length;o++){var s=a[o],u=n;if(!u||!i){var f=e.insertRow(r++);f.classList.add("row-result"),u=f.insertCell(0)}i=!1,u.innerHTML+=s.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;").replace(/ /g,"&nbsp;"),n=u}})),function(e){t.write(e)}}(),(function(e){a.style.display="block",a.innerHTML=e,0===e.indexOf("Error requesting")&&(a.innerHTML+="<br /><em>This website may not have CORS enabled, try enabling a proxy in the settings (button next to input field).</em>")}),(function(e,t){n.innerHTML=e+(t?"":"...")})),t.preventDefault(),!1}),!0),document.querySelector(".clipboard").addEventListener("click",(function(){var e,t;return e=M,(t=document.createElement("textarea")).value=e,t.setAttribute("readonly",""),t.style={position:"absolute",left:"-9999px"},document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),event.preventDefault(),!1}));var a=document.querySelector(".details");document.querySelector(".details-toggle").addEventListener("click",(function(){"block"===a.style.display?a.style.display="none":a.style.display="block"})),document.querySelector(".proxy-default").addEventListener("click",(function(){o.value="https://proxy.linkeddatafragments.org/",u(),event.preventDefault()}));var s=i.querySelector(".field-url");t.url&&(s.value=t.url),t.proxy&&(o.value=t.proxy);var u=function(){var e=[];s.value&&e.push("url="+encodeURIComponent(s.value)),o.value&&e.push("proxy="+encodeURIComponent(o.value)),history.replaceState(null,null,location.href.replace(/(?:#.*)?$/,e.length?"#"+e.join("&"):""))};s.addEventListener("input",u),o.addEventListener("input",u)},i=0;i<r.length;i++)n(i)}()}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZGZqcy9kYXRhLW1vZGVsL2xpYi9kZWZhdWx0LWdyYXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmRmanMvZGF0YS1tb2RlbC9saWIvbmFtZWQtbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JkZi1zdHJpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZGYtc3RyaW5nL2xpYi9UZXJtVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZGZqcy9kYXRhLW1vZGVsL2xpYi9kYXRhLWZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZGZqcy9kYXRhLW1vZGVsL2xpYi9ibGFuay1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmRmanMvZGF0YS1tb2RlbC9saWIvbGl0ZXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHJkZmpzL2RhdGEtbW9kZWwvbGliL3F1YWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZGZqcy9kYXRhLW1vZGVsL2xpYi92YXJpYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9kdXBsZXgtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy8uL2xpYi9pbmRleC5odG1sIiwid2VicGFjazovLy8uL2xpYi9tYWluLmNzcyIsIndlYnBhY2s6Ly8vLi9saWIvc2V0dGluZ3Muc3ZnIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uMy9zcmMvSVJJcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbjMvc3JjL04zRGF0YUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL24zL3NyYy9OM1dyaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbjMvc3JjL04zU3RyZWFtV3JpdGVyLmpzIiwid2VicGFjazovLy8uL2xpYi9tYWluLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicG5hIiwib2JqZWN0S2V5cyIsImtleXMiLCJvYmoiLCJwdXNoIiwiRHVwbGV4IiwidXRpbCIsImluaGVyaXRzIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsInYiLCJsZW5ndGgiLCJtZXRob2QiLCJvcHRpb25zIiwidGhpcyIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm5leHRUaWNrIiwib25FbmROVCIsInNlbGYiLCJlbmQiLCJoaWdoV2F0ZXJNYXJrIiwidW5kZWZpbmVkIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJzZXQiLCJfZGVzdHJveSIsImVyciIsImNiIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbnN0cnVjdG9yIiwiY29uZmlndXJhYmxlIiwiVGVtcEN0b3IiLCJnIiwiRnVuY3Rpb24iLCJlIiwid2luZG93Iiwib2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJhcmciLCJBcnJheSIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsInJlIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0Vycm9yIiwiRXJyb3IiLCJpc0Z1bmN0aW9uIiwiaXNQcmltaXRpdmUiLCJpc0J1ZmZlciIsIkJ1ZmZlciIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJpbmRleE9mIiwiZm4iLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJUeXBlRXJyb3IiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwidGFyZ2V0IiwicmVjZWl2ZXIiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk51bWJlcklzTmFOIiwiTnVtYmVyIiwiaXNOYU4iLCJFdmVudEVtaXR0ZXIiLCJpbml0IiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJ0eXBlIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJTdHJpbmciLCJlbWl0dGVyIiwiY291bnQiLCJjb25zb2xlIiwid2FybiIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJzdGF0ZSIsIndyYXBwZWQiLCJfbGlzdGVuZXJzIiwidW53cmFwIiwiZXZsaXN0ZW5lciIsImFyciIsInJldCIsInVud3JhcExpc3RlbmVycyIsImFycmF5Q2xvbmUiLCJsaXN0ZW5lckNvdW50IiwiY29weSIsIlJhbmdlRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwibWVzc2FnZSIsImNvbnRleHQiLCJoYW5kbGVyIiwibGlzdCIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0IiwiaW5kZXgiLCJwb3AiLCJzcGxpY2VPbmUiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiUGFzc1Rocm91Z2giLCJidWZmZXIiLCJjb3B5UHJvcHMiLCJzcmMiLCJkc3QiLCJTYWZlQnVmZmVyIiwiZW5jb2RpbmdPck9mZnNldCIsImZyb20iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiYWxsb2NVbnNhZmVTbG93Iiwic2l6ZSIsImZpbGwiLCJlbmNvZGluZyIsImJ1ZiIsIlNsb3dCdWZmZXIiLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwiQXJyYXlCdWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJjaGVja2VkIiwidmFsIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJNYXRoIiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJmcm9tQ2hhckNvZGUiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJJTlNQRUNUX01BWF9CWVRFUyIsImdsb2JhbCIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwibWF0Y2giLCJqb2luIiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsImZsb29yIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJ0cmltIiwicmVwbGFjZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsIkNvcmtlZFJlcXVlc3QiLCJfdGhpcyIsIm5leHQiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJjYWxsYmFjayIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsInNldEltbWVkaWF0ZSIsIldyaXRhYmxlU3RhdGUiLCJpbnRlcm5hbFV0aWwiLCJkZXByZWNhdGUiLCJPdXJVaW50OEFycmF5IiwicmVhbEhhc0luc3RhbmNlIiwiZGVzdHJveUltcGwiLCJub3AiLCJzdHJlYW0iLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJod20iLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmaW5hbENhbGxlZCIsIm5lZWREcmFpbiIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRlc3Ryb3kiLCJmaW5hbCIsIl9maW5hbCIsImRvV3JpdGUiLCJjaHVuayIsIm9ud3JpdGVEcmFpbiIsImhvbGRlciIsImFsbEJ1ZmZlcnMiLCJpc0J1ZiIsImNhbGxGaW5hbCIsIm5lZWQiLCJwcmVmaW5pc2giLCJnZXRCdWZmZXIiLCJjdXJyZW50IiwiXyIsImhhc0luc3RhbmNlIiwicGlwZSIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWQiLCJ2YWxpZENodW5rIiwibmV3Q2h1bmsiLCJkZWNvZGVDaHVuayIsImxhc3QiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsInNldERlZmF1bHRFbmNvZGluZyIsImVuZFdyaXRhYmxlIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsIkRlZmF1bHRHcmFwaCIsIm90aGVyIiwidGVybVR5cGUiLCJOYW1lZE5vZGUiLCJpcmkiLCJSZWFkYWJsZVN0YXRlIiwiRUVsaXN0ZW5lckNvdW50IiwiZGVidWdVdGlsIiwiZGVidWciLCJkZWJ1Z2xvZyIsIlN0cmluZ0RlY29kZXIiLCJCdWZmZXJMaXN0Iiwia1Byb3h5RXZlbnRzIiwicmVhZGFibGVPYmplY3RNb2RlIiwicmVhZGFibGVId20iLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsImRlY29kZXIiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwic2tpcENodW5rQ2hlY2siLCJlbWl0UmVhZGFibGUiLCJvbkVvZkNodW5rIiwiY2h1bmtJbnZhbGlkIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImVuYyIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNsZWFyIiwiaGFzU3RyaW5ncyIsIm5iIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwiZGVzdCIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25jbG9zZSIsIm9uZmluaXNoIiwib25kcmFpbiIsIm9uZXJyb3IiLCJvbmRhdGEiLCJjbGVhbmVkVXAiLCJwaXBlT25EcmFpbiIsImluY3JlYXNlZEF3YWl0RHJhaW4iLCJwYXVzZSIsImV2ZW50IiwicmVzdW1lIiwiZGVzdHMiLCJzcGxpY2UiLCJldiIsIndyYXAiLCJwYXVzZWQiLCJfZnJvbUxpc3QiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidGV4dCIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJ0cyIsIl90cmFuc2Zvcm1TdGF0ZSIsInRyYW5zZm9ybWluZyIsIndyaXRlY2h1bmsiLCJycyIsIm5lZWRUcmFuc2Zvcm0iLCJ3cml0ZWVuY29kaW5nIiwidHJhbnNmb3JtIiwiX3RyYW5zZm9ybSIsImZsdXNoIiwiX2ZsdXNoIiwiZG9uZSIsIl90aGlzMiIsImVycjIiLCJUZXJtVXRpbF8xIiwiZ2V0TGl0ZXJhbExhbmd1YWdlIiwiZ2V0TGl0ZXJhbFR5cGUiLCJnZXRMaXRlcmFsVmFsdWUiLCJxdWFkVG9TdHJpbmdRdWFkIiwic3RyaW5nUXVhZFRvUXVhZCIsInN0cmluZ1RvVGVybSIsInRlcm1Ub1N0cmluZyIsIkVFIiwic291cmNlIiwiX2lzU3RkaW8iLCJkaWRPbkVuZCIsImNsZWFudXAiLCJEYXRhRmFjdG9yeSIsInRlcm0iLCJsaXRlcmFsVmFsdWUiLCJkYXRhdHlwZSIsImxhbmd1YWdlIiwiZXhlYyIsImRhdGFGYWN0b3J5IiwiZGVmYXVsdEdyYXBoIiwiYmxhbmtOb2RlIiwidmFyaWFibGUiLCJuYW1lZE5vZGUiLCJsaXRlcmFsIiwicSIsInN1YmplY3QiLCJwcmVkaWNhdGUiLCJncmFwaCIsInN0cmluZ1F1YWQiLCJxdWFkIiwiQmxhbmtOb2RlIiwiTGl0ZXJhbCIsIlF1YWQiLCJWYXJpYWJsZSIsImxhbmd1YWdlT3JEYXRhdHlwZSIsImRlZmF1bHRHcmFwaEluc3RhbmNlIiwidHJpcGxlIiwiaWQiLCJuZXh0SWQiLCJzdHJpbmdEYXRhdHlwZSIsImxhbmdTdHJpbmdEYXRhdHlwZSIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsIm51bSIsIm91dHB1dCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJsb2ciLCJMTjIiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiY3VzdG9tIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNjb3BlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiZG9jdW1lbnQiLCJhdHRhY2hUbyIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImNyZWF0ZUVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwicmFuZG9tIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwidGFzayIsImNvbmZpZyIsImxvY2FsU3RvcmFnZSIsIm1zZyIsInRyYWNlIiwiUkRGIiwiWFNEIiwiU1dBUCIsInhzZCIsImRlY2ltYWwiLCJib29sZWFuIiwiZG91YmxlIiwiaW50ZWdlciIsInJkZiIsIm5pbCIsImZpcnN0IiwicmVzdCIsImxhbmdTdHJpbmciLCJvd2wiLCJzYW1lQXMiLCJmb3JTb21lIiwiZm9yQWxsIiwiaW1wbGllcyIsIkRFRkFVTFRHUkFQSCIsIl9ibGFua05vZGVDb3VudGVyIiwiVGVybSIsInN1YnN0cmluZyIsImF0UG9zIiwiZGF0YXR5cGVTdHJpbmciLCJjaCIsImR0UG9zIiwic3VwZXIiLCJsYW5ndWFnZU9yRGF0YVR5cGUiLCJpc0ludGVnZXIiLCJpbnRlcm5hbCIsIlRyaXBsZSIsImZyb21JZCIsImZhY3RvcnkiLCJlbmRQb3MiLCJ0b0lkIiwiTjNEYXRhRmFjdG9yeSIsImVzY2FwZUFsbCIsImVzY2FwZWRDaGFyYWN0ZXJzIiwiTjNXcml0ZXIiLCJvdXRwdXRTdHJlYW0iLCJfcHJlZml4UmVnZXgiLCJfbGlzdHMiLCJsaXN0cyIsIl9vdXRwdXRTdHJlYW0iLCJfZW5kU3RyZWFtIiwiX3N1YmplY3QiLCJ0ZXN0IiwiZm9ybWF0IiwiX3dyaXRlUXVhZCIsIl93cml0ZVF1YWRMaW5lIiwiX2dyYXBoIiwiX3ByZWZpeElSSXMiLCJwcmVmaXhlcyIsImFkZFByZWZpeGVzIiwiX2luRGVmYXVsdEdyYXBoIiwiX2VuY29kZUlyaU9yQmxhbmsiLCJfcHJlZGljYXRlIiwiX2VuY29kZU9iamVjdCIsIl9lbmNvZGVQcmVkaWNhdGUiLCJfcHJlZml4TWF0Y2giLCJxdWFkVG9TdHJpbmciLCJxdWFkcyIsIm1hcCIsImVudGl0eSIsImNoYXJhY3RlclJlcGxhY2VyIiwicHJlZml4TWF0Y2giLCJfZW5jb2RlTGl0ZXJhbCIsImFkZFF1YWQiLCJwcmVmaXgiLCJwcmVmaXhJUklzIiwiaGFzUHJlZml4ZXMiLCJJUklsaXN0IiwicHJlZml4TGlzdCIsInByZWZpeElSSSIsIlJlZ0V4cCIsImNoaWxkIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsImVsZW1lbnRzIiwiX2Jsb2NrZWRXcml0ZSIsInNpbmdsZURvbmUiLCJyZXN1bHQiLCJjaGFyYWN0ZXIiLCJ3cml0ZXIiLCJfd3JpdGVyIiwiYWRkUHJlZml4IiwibGFzdFJkZiIsImxhc3RXb3JrZXIiLCJ1aVN0YXRlIiwibG9jYXRpb24iLCJoYXNoIiwic3BsaXQiLCJyZWR1Y2UiLCJhY2MiLCJrZXl2YWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImZvcm1zIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJodHRwUHJveHlFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIm91dHB1dEVsZW1lbnQiLCJjb3VudGVyRWxlbWVudCIsImVycm9yRWxlbWVudCIsInN0eWxlIiwiZGlzcGxheSIsInRlcm1pbmF0ZSIsInByb3h5IiwidXJsIiwib25RdWFkIiwib25FcnJvciIsIm9uQ291bnRlclVwZGF0ZSIsIndvcmtlciIsIldvcmtlciIsImNvdW50ZXIiLCJpbnZva2UiLCJjb250YWluZXIiLCJmb3JFYWNoIiwicm93IiwicGFyZW50Tm9kZSIsImxhc3RFbGVtZW50IiwibGluZSIsImVsZW1lbnQiLCJpbnNlcnRSb3ciLCJjbGFzc0xpc3QiLCJhZGQiLCJpbnNlcnRDZWxsIiwiaW5uZXJIVE1MIiwiY3JlYXRlVHJpZ1ByaW50ZXIiLCJwcmV2ZW50RGVmYXVsdCIsImVsIiwic2V0QXR0cmlidXRlIiwibGVmdCIsImJvZHkiLCJzZWxlY3QiLCJleGVjQ29tbWFuZCIsImRldGFpbHMiLCJpbnB1dENoYW5nZUxpc3RlbmVyIiwiZmllbGRVcmwiLCJxdWVyeVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJocmVmIl0sIm1hcHBpbmdzIjoiNERBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVN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QixFQUFzQixXQUMxQixJQUFNRSxFQUF3QixHQUMxQkQsRUFBU3IzQixPQUNYczNCLEVBQVluMkIsS0FBSyxPQUFTbzJCLG1CQUFtQkYsRUFBU3IzQixRQUVwRDgwQixFQUFpQjkwQixPQUNuQnMzQixFQUFZbjJCLEtBQUssU0FBV28yQixtQkFBbUJ6QyxFQUFpQjkwQixRQUVsRXczQixRQUFRQyxhQUFhLEtBQU0sS0FBTXJELFNBQVNzRCxLQUFLM2UsUUFBUSxZQUNyRHVlLEVBQVk1MUIsT0FBUyxJQUFNNDFCLEVBQVk5aUIsS0FBSyxLQUFPLE1BRXZENmlCLEVBQVNqSixpQkFBaUIsUUFBU2dKLEdBQ25DdEMsRUFBaUIxRyxpQkFBaUIsUUFBU2dKLElBckZwQ3I0QixFQUFJLEVBQUdBLEVBQUk0MUIsRUFBTWp6QixPQUFRM0MsSSxFQUF6QkEsR0F5RlhvSyIsImZpbGUiOiJzY3JpcHRzL21haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIxKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gYXZvaWQgc2NvcGUgY3JlZXAsIHRoZSBrZXlzIGFycmF5IGNhbiB0aGVuIGJlIGNvbGxlY3RlZFxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcbiAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xuICB9XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcG5hLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgdGhpcy5lbmQoKTtcblxuICBwbmEubmV4dFRpY2soY2IsIGVycik7XG59OyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAhcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiZnVuY3Rpb24gRGVmYXVsdEdyYXBoICgpIHtcbiAgdGhpcy52YWx1ZSA9ICcnXG59XG5cbkRlZmF1bHRHcmFwaC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiAhIW90aGVyICYmIG90aGVyLnRlcm1UeXBlID09PSB0aGlzLnRlcm1UeXBlXG59XG5cbkRlZmF1bHRHcmFwaC5wcm90b3R5cGUudGVybVR5cGUgPSAnRGVmYXVsdEdyYXBoJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRHcmFwaFxuIiwiZnVuY3Rpb24gTmFtZWROb2RlIChpcmkpIHtcbiAgdGhpcy52YWx1ZSA9IGlyaVxufVxuXG5OYW1lZE5vZGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gISFvdGhlciAmJiBvdGhlci50ZXJtVHlwZSA9PT0gdGhpcy50ZXJtVHlwZSAmJiBvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZVxufVxuXG5OYW1lZE5vZGUucHJvdG90eXBlLnRlcm1UeXBlID0gJ05hbWVkTm9kZSdcblxubW9kdWxlLmV4cG9ydHMgPSBOYW1lZE5vZGVcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCd3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTtcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59O1xuXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IFRlcm1VdGlsXzEgPSByZXF1aXJlKFwiLi9saWIvVGVybVV0aWxcIik7XG5leHBvcnRzLmdldExpdGVyYWxMYW5ndWFnZSA9IFRlcm1VdGlsXzEuZ2V0TGl0ZXJhbExhbmd1YWdlO1xuZXhwb3J0cy5nZXRMaXRlcmFsVHlwZSA9IFRlcm1VdGlsXzEuZ2V0TGl0ZXJhbFR5cGU7XG5leHBvcnRzLmdldExpdGVyYWxWYWx1ZSA9IFRlcm1VdGlsXzEuZ2V0TGl0ZXJhbFZhbHVlO1xuZXhwb3J0cy5xdWFkVG9TdHJpbmdRdWFkID0gVGVybVV0aWxfMS5xdWFkVG9TdHJpbmdRdWFkO1xuZXhwb3J0cy5zdHJpbmdRdWFkVG9RdWFkID0gVGVybVV0aWxfMS5zdHJpbmdRdWFkVG9RdWFkO1xuZXhwb3J0cy5zdHJpbmdUb1Rlcm0gPSBUZXJtVXRpbF8xLnN0cmluZ1RvVGVybTtcbmV4cG9ydHMudGVybVRvU3RyaW5nID0gVGVybVV0aWxfMS50ZXJtVG9TdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgRGF0YUZhY3RvcnkgPSByZXF1aXJlKFwiQHJkZmpzL2RhdGEtbW9kZWxcIik7XG4vKipcbiAqIFV0aWxpdHkgbWV0aG9kcyBmb3IgY29udmVydGluZyBiZXR3ZWVuIHN0cmluZy1iYXNlZCBSREYgcmVwcmVzZW50YXRpb25zIGFuZCBSREZKUyBvYmplY3RzLlxuICpcbiAqIFJERiBUZXJtcyBhcmUgcmVwcmVzZW50ZWQgYXMgZm9sbG93czpcbiAqICogQmxhbmsgbm9kZXM6ICdfOm15QmxhbmtOb2RlJ1xuICogKiBWYXJpYWJsZXM6ICAgJz9teVZhcmlhYmxlJ1xuICogKiBMaXRlcmFsczogICAgJ1wibXlTdHJpbmdcIicsICdcIm15TGFuZ3VhZ2VTdHJpbmdcIkBlbi11cycsICdcIjNcIl5eeHNkOm51bWJlcidcbiAqICogVVJJczogICAgICAgICdodHRwOi8vZXhhbXBsZS5vcmcnXG4gKlxuICogUXVhZHMvdHJpcGxlcyBhcmUgcmVwcmVzZW50ZWQgYXMgaGFzaGVzIHdpdGggJ3N1YmplY3QnLCAncHJlZGljYXRlJywgJ29iamVjdCcgYW5kICdncmFwaCcgKG9wdGlvbmFsKVxuICogYXMga2V5cywgYW5kIHN0cmluZy1iYXNlZCBSREYgdGVybXMgYXMgdmFsdWVzLlxuICovXG4vKipcbiAqIENvbnZlcnQgYW4gUkRGSlMgdGVybSB0byBhIHN0cmluZy1iYXNlZCByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7UkRGLlRlcm19IHRlcm0gQW4gUkRGSlMgdGVybS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBzdHJpbmctYmFzZWQgdGVybSByZXByZXNlbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gdGVybVRvU3RyaW5nKHRlcm0pIHtcbiAgICBpZiAoIXRlcm0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXRjaCAodGVybS50ZXJtVHlwZSkge1xuICAgICAgICBjYXNlICdOYW1lZE5vZGUnOiByZXR1cm4gdGVybS52YWx1ZTtcbiAgICAgICAgY2FzZSAnQmxhbmtOb2RlJzogcmV0dXJuICdfOicgKyB0ZXJtLnZhbHVlO1xuICAgICAgICBjYXNlICdMaXRlcmFsJzpcbiAgICAgICAgICAgIGNvbnN0IGxpdGVyYWxWYWx1ZSA9IHRlcm07XG4gICAgICAgICAgICByZXR1cm4gJ1wiJyArIGxpdGVyYWxWYWx1ZS52YWx1ZSArICdcIicgK1xuICAgICAgICAgICAgICAgIChsaXRlcmFsVmFsdWUuZGF0YXR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbFZhbHVlLmRhdGF0eXBlLnZhbHVlICE9PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBsaXRlcmFsVmFsdWUuZGF0YXR5cGUudmFsdWUgIT09ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGFuZ1N0cmluZycgP1xuICAgICAgICAgICAgICAgICAgICAnXl4nICsgbGl0ZXJhbFZhbHVlLmRhdGF0eXBlLnZhbHVlIDogJycpICtcbiAgICAgICAgICAgICAgICAobGl0ZXJhbFZhbHVlLmxhbmd1YWdlID8gJ0AnICsgbGl0ZXJhbFZhbHVlLmxhbmd1YWdlIDogJycpO1xuICAgICAgICBjYXNlICdWYXJpYWJsZSc6IHJldHVybiAnPycgKyB0ZXJtLnZhbHVlO1xuICAgICAgICBjYXNlICdEZWZhdWx0R3JhcGgnOiByZXR1cm4gdGVybS52YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLnRlcm1Ub1N0cmluZyA9IHRlcm1Ub1N0cmluZztcbi8qKlxuICogR2V0IHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBsaXRlcmFsLlxuICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWxWYWx1ZSBBbiBSREYgbGl0ZXJhbCBlbmNsb3NlZCBieSAnXCInLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbGl0ZXJhbCB2YWx1ZSBpbnNpZGUgdGhlICdcIicuXG4gKi9cbmZ1bmN0aW9uIGdldExpdGVyYWxWYWx1ZShsaXRlcmFsVmFsdWUpIHtcbiAgICBjb25zdCBtYXRjaCA9IC9eXCIoW15dKilcIi8uZXhlYyhsaXRlcmFsVmFsdWUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGxpdGVyYWxWYWx1ZSArICcgaXMgbm90IGEgbGl0ZXJhbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hbMV07XG59XG5leHBvcnRzLmdldExpdGVyYWxWYWx1ZSA9IGdldExpdGVyYWxWYWx1ZTtcbi8qKlxuICogR2V0IHRoZSBkYXRhdHlwZSBvZiB0aGUgZ2l2ZW4gbGl0ZXJhbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsaXRlcmFsVmFsdWUgQW4gUkRGIGxpdGVyYWwuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkYXRhdHlwZSBvZiB0aGUgbGl0ZXJhbC5cbiAqL1xuZnVuY3Rpb24gZ2V0TGl0ZXJhbFR5cGUobGl0ZXJhbFZhbHVlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSAvXlwiW15dKlwiKD86XFxeXFxeKFteXCJdKyl8KEApW15AXCJdKyk/JC8uZXhlYyhsaXRlcmFsVmFsdWUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGxpdGVyYWxWYWx1ZSArICcgaXMgbm90IGEgbGl0ZXJhbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hbMV0gfHwgKG1hdGNoWzJdXG4gICAgICAgID8gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNsYW5nU3RyaW5nJyA6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNzdHJpbmcnKTtcbn1cbmV4cG9ydHMuZ2V0TGl0ZXJhbFR5cGUgPSBnZXRMaXRlcmFsVHlwZTtcbi8qKlxuICogR2V0IHRoZSBsYW5ndWFnZSBvZiB0aGUgZ2l2ZW4gbGl0ZXJhbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsaXRlcmFsVmFsdWUgQW4gUkRGIGxpdGVyYWwuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBsYW5ndWFnZSBvZiB0aGUgbGl0ZXJhbC5cbiAqL1xuZnVuY3Rpb24gZ2V0TGl0ZXJhbExhbmd1YWdlKGxpdGVyYWxWYWx1ZSkge1xuICAgIGNvbnN0IG1hdGNoID0gL15cIlteXSpcIig/OkAoW15AXCJdKyl8XFxeXFxeW15cIl0rKT8kLy5leGVjKGxpdGVyYWxWYWx1ZSk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobGl0ZXJhbFZhbHVlICsgJyBpcyBub3QgYSBsaXRlcmFsJyk7XG4gICAgfVxuICAgIHJldHVybiBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJztcbn1cbmV4cG9ydHMuZ2V0TGl0ZXJhbExhbmd1YWdlID0gZ2V0TGl0ZXJhbExhbmd1YWdlO1xuLyoqXG4gKiBUcmFuc2Zvcm0gYSBzdHJpbmctYmFzZWQgUkRGIHRlcm0gdG8gYW4gUkRGSlMgdGVybS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBBIHN0cmluZy1iYXNlZCBSREYtdGVybS5cbiAqIEBwYXJhbSB7UkRGLkRhdGFGYWN0b3J5fSBkYXRhRmFjdG9yeSBBbiBvcHRpb25hbCBkYXRhZmFjdG9yeSB0byBjcmVhdGUgdGVybXMgd2l0aC5cbiAqIEByZXR1cm4ge1JERi5UZXJtfSBBbiBSREYtSlMgdGVybS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9UZXJtKHZhbHVlLCBkYXRhRmFjdG9yeSkge1xuICAgIGRhdGFGYWN0b3J5ID0gZGF0YUZhY3RvcnkgfHwgRGF0YUZhY3Rvcnk7XG4gICAgaWYgKCF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBkYXRhRmFjdG9yeS5kZWZhdWx0R3JhcGgoKTtcbiAgICB9XG4gICAgc3dpdGNoICh2YWx1ZVswXSkge1xuICAgICAgICBjYXNlICdfJzogcmV0dXJuIGRhdGFGYWN0b3J5LmJsYW5rTm9kZSh2YWx1ZS5zdWJzdHIoMikpO1xuICAgICAgICBjYXNlICc/JzogcmV0dXJuIGRhdGFGYWN0b3J5LnZhcmlhYmxlKHZhbHVlLnN1YnN0cigxKSk7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0TGl0ZXJhbExhbmd1YWdlKHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBkYXRhRmFjdG9yeS5uYW1lZE5vZGUoZ2V0TGl0ZXJhbFR5cGUodmFsdWUpKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhRmFjdG9yeS5saXRlcmFsKGdldExpdGVyYWxWYWx1ZSh2YWx1ZSksIGxhbmd1YWdlIHx8IHR5cGUpO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gZGF0YUZhY3RvcnkubmFtZWROb2RlKHZhbHVlKTtcbiAgICB9XG59XG5leHBvcnRzLnN0cmluZ1RvVGVybSA9IHN0cmluZ1RvVGVybTtcbi8qKlxuICogQ29udmVydCBhbiBSREZKUyBxdWFkIHRvIGEgc3RyaW5nLWJhc2VkIHF1YWQgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0ge1F1YWR9IHEgQW4gUkRGSlMgcXVhZC5cbiAqIEByZXR1cm4ge0lTdHJpbmdRdWFkfSBBIGhhc2ggd2l0aCBzdHJpbmctYmFzZWQgcXVhZCB0ZXJtcy5cbiAqIEB0ZW1wbGF0ZSBRIFRoZSB0eXBlIG9mIHF1YWQsIGRlZmF1bHRzIHRvIFJERi5RdWFkLlxuICovXG5mdW5jdGlvbiBxdWFkVG9TdHJpbmdRdWFkKHEpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJqZWN0OiB0ZXJtVG9TdHJpbmcocS5zdWJqZWN0KSxcbiAgICAgICAgcHJlZGljYXRlOiB0ZXJtVG9TdHJpbmcocS5wcmVkaWNhdGUpLFxuICAgICAgICBvYmplY3Q6IHRlcm1Ub1N0cmluZyhxLm9iamVjdCksXG4gICAgICAgIGdyYXBoOiB0ZXJtVG9TdHJpbmcocS5ncmFwaCksXG4gICAgfTtcbiAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xufVxuZXhwb3J0cy5xdWFkVG9TdHJpbmdRdWFkID0gcXVhZFRvU3RyaW5nUXVhZDtcbi8qKlxuICogQ29udmVydCBhIHN0cmluZy1iYXNlZCBxdWFkIHJlcHJlc2VudGF0aW9uIHRvIGFuIFJERkpTIHF1YWQuXG4gKiBAcGFyYW0ge0lTdHJpbmdRdWFkfSBzdHJpbmdRdWFkIEEgaGFzaCB3aXRoIHN0cmluZy1iYXNlZCBxdWFkIHRlcm1zLlxuICogQHBhcmFtIHtSREYuRGF0YUZhY3Rvcnl9IGRhdGFGYWN0b3J5IEFuIG9wdGlvbmFsIGRhdGFmYWN0b3J5IHRvIGNyZWF0ZSB0ZXJtcyB3aXRoLlxuICogQHJldHVybiB7UX0gQW4gUkRGSlMgcXVhZC5cbiAqIEB0ZW1wbGF0ZSBRIFRoZSB0eXBlIG9mIHF1YWQsIGRlZmF1bHRzIHRvIFJERi5RdWFkLlxuICovXG5mdW5jdGlvbiBzdHJpbmdRdWFkVG9RdWFkKHN0cmluZ1F1YWQsIGRhdGFGYWN0b3J5KSB7XG4gICAgZGF0YUZhY3RvcnkgPSBkYXRhRmFjdG9yeSB8fCBEYXRhRmFjdG9yeTtcbiAgICByZXR1cm4gZGF0YUZhY3RvcnkucXVhZChzdHJpbmdUb1Rlcm0oc3RyaW5nUXVhZC5zdWJqZWN0LCBkYXRhRmFjdG9yeSksIHN0cmluZ1RvVGVybShzdHJpbmdRdWFkLnByZWRpY2F0ZSwgZGF0YUZhY3RvcnkpLCBzdHJpbmdUb1Rlcm0oc3RyaW5nUXVhZC5vYmplY3QsIGRhdGFGYWN0b3J5KSwgc3RyaW5nVG9UZXJtKHN0cmluZ1F1YWQuZ3JhcGgsIGRhdGFGYWN0b3J5KSk7XG59XG5leHBvcnRzLnN0cmluZ1F1YWRUb1F1YWQgPSBzdHJpbmdRdWFkVG9RdWFkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGVybVV0aWwuanMubWFwIiwidmFyIERhdGFGYWN0b3J5ID0gcmVxdWlyZSgnLi9saWIvZGF0YS1mYWN0b3J5JylcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhRmFjdG9yeVxuIiwidmFyIEJsYW5rTm9kZSA9IHJlcXVpcmUoJy4vYmxhbmstbm9kZScpXG52YXIgRGVmYXVsdEdyYXBoID0gcmVxdWlyZSgnLi9kZWZhdWx0LWdyYXBoJylcbnZhciBMaXRlcmFsID0gcmVxdWlyZSgnLi9saXRlcmFsJylcbnZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKVxudmFyIFF1YWQgPSByZXF1aXJlKCcuL3F1YWQnKVxudmFyIFZhcmlhYmxlID0gcmVxdWlyZSgnLi92YXJpYWJsZScpXG5cbmZ1bmN0aW9uIERhdGFGYWN0b3J5ICgpIHt9XG5cbkRhdGFGYWN0b3J5Lm5hbWVkTm9kZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gbmV3IE5hbWVkTm9kZSh2YWx1ZSlcbn1cblxuRGF0YUZhY3RvcnkuYmxhbmtOb2RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgQmxhbmtOb2RlKHZhbHVlKVxufVxuXG5EYXRhRmFjdG9yeS5saXRlcmFsID0gZnVuY3Rpb24gKHZhbHVlLCBsYW5ndWFnZU9yRGF0YXR5cGUpIHtcbiAgaWYgKHR5cGVvZiBsYW5ndWFnZU9yRGF0YXR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGxhbmd1YWdlT3JEYXRhdHlwZS5pbmRleE9mKCc6JykgPT09IC0xKSB7XG4gICAgICByZXR1cm4gbmV3IExpdGVyYWwodmFsdWUsIGxhbmd1YWdlT3JEYXRhdHlwZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IExpdGVyYWwodmFsdWUsIG51bGwsIERhdGFGYWN0b3J5Lm5hbWVkTm9kZShsYW5ndWFnZU9yRGF0YXR5cGUpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBMaXRlcmFsKHZhbHVlLCBudWxsLCBsYW5ndWFnZU9yRGF0YXR5cGUpXG59XG5cbkRhdGFGYWN0b3J5LmRlZmF1bHRHcmFwaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIERhdGFGYWN0b3J5LmRlZmF1bHRHcmFwaEluc3RhbmNlXG59XG5cbkRhdGFGYWN0b3J5LnZhcmlhYmxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgVmFyaWFibGUodmFsdWUpXG59XG5cbkRhdGFGYWN0b3J5LnRyaXBsZSA9IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCkge1xuICByZXR1cm4gRGF0YUZhY3RvcnkucXVhZChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdClcbn1cblxuRGF0YUZhY3RvcnkucXVhZCA9IGZ1bmN0aW9uIChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpIHtcbiAgcmV0dXJuIG5ldyBRdWFkKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCB8fCBEYXRhRmFjdG9yeS5kZWZhdWx0R3JhcGhJbnN0YW5jZSlcbn1cblxuRGF0YUZhY3RvcnkuZGVmYXVsdEdyYXBoSW5zdGFuY2UgPSBuZXcgRGVmYXVsdEdyYXBoKClcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhRmFjdG9yeVxuIiwiZnVuY3Rpb24gQmxhbmtOb2RlIChpZCkge1xuICB0aGlzLnZhbHVlID0gaWQgfHwgKCdiJyArICgrK0JsYW5rTm9kZS5uZXh0SWQpKVxufVxuXG5CbGFua05vZGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gISFvdGhlciAmJiBvdGhlci50ZXJtVHlwZSA9PT0gdGhpcy50ZXJtVHlwZSAmJiBvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZVxufVxuXG5CbGFua05vZGUucHJvdG90eXBlLnRlcm1UeXBlID0gJ0JsYW5rTm9kZSdcblxuQmxhbmtOb2RlLm5leHRJZCA9IDBcblxubW9kdWxlLmV4cG9ydHMgPSBCbGFua05vZGVcbiIsInZhciBOYW1lZE5vZGUgPSByZXF1aXJlKCcuL25hbWVkLW5vZGUnKVxuXG5mdW5jdGlvbiBMaXRlcmFsICh2YWx1ZSwgbGFuZ3VhZ2UsIGRhdGF0eXBlKSB7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZVxuICB0aGlzLmRhdGF0eXBlID0gTGl0ZXJhbC5zdHJpbmdEYXRhdHlwZVxuICB0aGlzLmxhbmd1YWdlID0gJydcblxuICBpZiAobGFuZ3VhZ2UpIHtcbiAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VcbiAgICB0aGlzLmRhdGF0eXBlID0gTGl0ZXJhbC5sYW5nU3RyaW5nRGF0YXR5cGVcbiAgfSBlbHNlIGlmIChkYXRhdHlwZSkge1xuICAgIHRoaXMuZGF0YXR5cGUgPSBkYXRhdHlwZVxuICB9XG59XG5cbkxpdGVyYWwucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xuICByZXR1cm4gISFvdGhlciAmJiBvdGhlci50ZXJtVHlwZSA9PT0gdGhpcy50ZXJtVHlwZSAmJiBvdGhlci52YWx1ZSA9PT0gdGhpcy52YWx1ZSAmJlxuICAgIG90aGVyLmxhbmd1YWdlID09PSB0aGlzLmxhbmd1YWdlICYmIG90aGVyLmRhdGF0eXBlLmVxdWFscyh0aGlzLmRhdGF0eXBlKVxufVxuXG5MaXRlcmFsLnByb3RvdHlwZS50ZXJtVHlwZSA9ICdMaXRlcmFsJ1xuTGl0ZXJhbC5sYW5nU3RyaW5nRGF0YXR5cGUgPSBuZXcgTmFtZWROb2RlKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjbGFuZ1N0cmluZycpXG5MaXRlcmFsLnN0cmluZ0RhdGF0eXBlID0gbmV3IE5hbWVkTm9kZSgnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjc3RyaW5nJylcblxubW9kdWxlLmV4cG9ydHMgPSBMaXRlcmFsXG4iLCJ2YXIgRGVmYXVsdEdyYXBoID0gcmVxdWlyZSgnLi9kZWZhdWx0LWdyYXBoJylcblxuZnVuY3Rpb24gUXVhZCAoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3RcbiAgdGhpcy5wcmVkaWNhdGUgPSBwcmVkaWNhdGVcbiAgdGhpcy5vYmplY3QgPSBvYmplY3RcblxuICBpZiAoZ3JhcGgpIHtcbiAgICB0aGlzLmdyYXBoID0gZ3JhcGhcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdyYXBoID0gbmV3IERlZmF1bHRHcmFwaCgpXG4gIH1cbn1cblxuUXVhZC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiAhIW90aGVyICYmIG90aGVyLnN1YmplY3QuZXF1YWxzKHRoaXMuc3ViamVjdCkgJiYgb3RoZXIucHJlZGljYXRlLmVxdWFscyh0aGlzLnByZWRpY2F0ZSkgJiZcbiAgICBvdGhlci5vYmplY3QuZXF1YWxzKHRoaXMub2JqZWN0KSAmJiBvdGhlci5ncmFwaC5lcXVhbHModGhpcy5ncmFwaClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWFkXG4iLCJmdW5jdGlvbiBWYXJpYWJsZSAobmFtZSkge1xuICB0aGlzLnZhbHVlID0gbmFtZVxufVxuXG5WYXJpYWJsZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiAhIW90aGVyICYmIG90aGVyLnRlcm1UeXBlID09PSB0aGlzLnRlcm1UeXBlICYmIG90aGVyLnZhbHVlID09PSB0aGlzLnZhbHVlXG59XG5cblZhcmlhYmxlLnByb3RvdHlwZS50ZXJtVHlwZSA9ICdWYXJpYWJsZSdcblxubW9kdWxlLmV4cG9ydHMgPSBWYXJpYWJsZVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyLnByb3RvdHlwZSlcblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbmRleC5odG1sXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInN0eWxlcy9tYWluLmNzc1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvc2V0dGluZ3Muc3ZnXCI7IiwidmFyIFJERiAgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIycsXG4gICAgWFNEICA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSMnLFxuICAgIFNXQVAgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC8xMC9zd2FwLyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgeHNkOiB7XG4gICAgZGVjaW1hbDogWFNEICsgJ2RlY2ltYWwnLFxuICAgIGJvb2xlYW46IFhTRCArICdib29sZWFuJyxcbiAgICBkb3VibGU6ICBYU0QgKyAnZG91YmxlJyxcbiAgICBpbnRlZ2VyOiBYU0QgKyAnaW50ZWdlcicsXG4gICAgc3RyaW5nOiAgWFNEICsgJ3N0cmluZycsXG4gIH0sXG4gIHJkZjoge1xuICAgIHR5cGU6ICAgICAgIFJERiArICd0eXBlJyxcbiAgICBuaWw6ICAgICAgICBSREYgKyAnbmlsJyxcbiAgICBmaXJzdDogICAgICBSREYgKyAnZmlyc3QnLFxuICAgIHJlc3Q6ICAgICAgIFJERiArICdyZXN0JyxcbiAgICBsYW5nU3RyaW5nOiBSREYgKyAnbGFuZ1N0cmluZycsXG4gIH0sXG4gIG93bDoge1xuICAgIHNhbWVBczogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDIvMDcvb3dsI3NhbWVBcycsXG4gIH0sXG4gIHI6IHtcbiAgICBmb3JTb21lOiBTV0FQICsgJ3JlaWZ5I2ZvclNvbWUnLFxuICAgIGZvckFsbDogIFNXQVAgKyAncmVpZnkjZm9yQWxsJyxcbiAgfSxcbiAgbG9nOiB7XG4gICAgaW1wbGllczogU1dBUCArICdsb2cjaW1wbGllcycsXG4gIH0sXG59O1xuIiwiLy8gTjMuanMgaW1wbGVtZW50YXRpb25zIG9mIHRoZSBSREYvSlMgY29yZSBkYXRhIHR5cGVzXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JkZmpzL3JlcHJlc2VudGF0aW9uLXRhc2stZm9yY2UvYmxvYi9tYXN0ZXIvaW50ZXJmYWNlLXNwZWMubWRcblxuaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSAnLi9JUklzJztcbmNvbnN0IHsgcmRmLCB4c2QgfSA9IG5hbWVzcGFjZXM7XG5cbnZhciBEYXRhRmFjdG9yeSwgREVGQVVMVEdSQVBIO1xuXG52YXIgX2JsYW5rTm9kZUNvdW50ZXIgPSAwO1xuXG4vLyAjIyBUZXJtIGNvbnN0cnVjdG9yXG5jbGFzcyBUZXJtIHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cblxuICAvLyAjIyMgVGhlIHZhbHVlIG9mIHRoaXMgdGVybVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQ7XG4gIH1cblxuICAvLyAjIyMgUmV0dXJucyB3aGV0aGVyIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMgdGhlIHNhbWUgdGVybSBhcyB0aGUgb3RoZXJcbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgLy8gSWYgYm90aCB0ZXJtcyB3ZXJlIGNyZWF0ZWQgYnkgdGhpcyBsaWJyYXJ5LFxuICAgIC8vIGVxdWFsaXR5IGNhbiBiZSBjb21wdXRlZCB0aHJvdWdoIGlkc1xuICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFRlcm0pXG4gICAgICByZXR1cm4gdGhpcy5pZCA9PT0gb3RoZXIuaWQ7XG4gICAgLy8gT3RoZXJ3aXNlLCBjb21wYXJlIHRlcm0gdHlwZSBhbmQgdmFsdWVcbiAgICByZXR1cm4gISFvdGhlciAmJiB0aGlzLnRlcm1UeXBlID09PSBvdGhlci50ZXJtVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgICAgPT09IG90aGVyLnZhbHVlO1xuICB9XG5cbiAgLy8gIyMjIFJldHVybnMgYSBwbGFpbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0ZXJtXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVybVR5cGU6IHRoaXMudGVybVR5cGUsXG4gICAgICB2YWx1ZTogICAgdGhpcy52YWx1ZSxcbiAgICB9O1xuICB9XG59XG5cblxuLy8gIyMgTmFtZWROb2RlIGNvbnN0cnVjdG9yXG5jbGFzcyBOYW1lZE5vZGUgZXh0ZW5kcyBUZXJtIHtcbiAgLy8gIyMjIFRoZSB0ZXJtIHR5cGUgb2YgdGhpcyB0ZXJtXG4gIGdldCB0ZXJtVHlwZSgpIHtcbiAgICByZXR1cm4gJ05hbWVkTm9kZSc7XG4gIH1cbn1cblxuLy8gIyMgTGl0ZXJhbCBjb25zdHJ1Y3RvclxuY2xhc3MgTGl0ZXJhbCBleHRlbmRzIFRlcm0ge1xuICAvLyAjIyMgVGhlIHRlcm0gdHlwZSBvZiB0aGlzIHRlcm1cbiAgZ2V0IHRlcm1UeXBlKCkge1xuICAgIHJldHVybiAnTGl0ZXJhbCc7XG4gIH1cblxuICAvLyAjIyMgVGhlIHRleHQgdmFsdWUgb2YgdGhpcyBsaXRlcmFsXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pZC5zdWJzdHJpbmcoMSwgdGhpcy5pZC5sYXN0SW5kZXhPZignXCInKSk7XG4gIH1cblxuICAvLyAjIyMgVGhlIGxhbmd1YWdlIG9mIHRoaXMgbGl0ZXJhbFxuICBnZXQgbGFuZ3VhZ2UoKSB7XG4gICAgLy8gRmluZCB0aGUgbGFzdCBxdW90YXRpb24gbWFyayAoZS5nLiwgJ1wiYWJjXCJAZW4tdXMnKVxuICAgIHZhciBpZCA9IHRoaXMuaWQsIGF0UG9zID0gaWQubGFzdEluZGV4T2YoJ1wiJykgKyAxO1xuICAgIC8vIElmIFwiQFwiIGl0IGZvbGxvd3MsIHJldHVybiB0aGUgcmVtYWluaW5nIHN1YnN0cmluZzsgZW1wdHkgb3RoZXJ3aXNlXG4gICAgcmV0dXJuIGF0UG9zIDwgaWQubGVuZ3RoICYmIGlkW2F0UG9zKytdID09PSAnQCcgPyBpZC5zdWJzdHIoYXRQb3MpLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgfVxuXG4gIC8vICMjIyBUaGUgZGF0YXR5cGUgSVJJIG9mIHRoaXMgbGl0ZXJhbFxuICBnZXQgZGF0YXR5cGUoKSB7XG4gICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUodGhpcy5kYXRhdHlwZVN0cmluZyk7XG4gIH1cblxuICAvLyAjIyMgVGhlIGRhdGF0eXBlIHN0cmluZyBvZiB0aGlzIGxpdGVyYWxcbiAgZ2V0IGRhdGF0eXBlU3RyaW5nKCkge1xuICAgIC8vIEZpbmQgdGhlIGxhc3QgcXVvdGF0aW9uIG1hcmsgKGUuZy4sICdcImFiY1wiXl5odHRwOi8vZXgub3JnL3R5cGVzI3QnKVxuICAgIHZhciBpZCA9IHRoaXMuaWQsIGR0UG9zID0gaWQubGFzdEluZGV4T2YoJ1wiJykgKyAxLCBjaDtcbiAgICAvLyBJZiBcIl5cIiBpdCBmb2xsb3dzLCByZXR1cm4gdGhlIHJlbWFpbmluZyBzdWJzdHJpbmdcbiAgICByZXR1cm4gZHRQb3MgPCBpZC5sZW5ndGggJiYgKGNoID0gaWRbZHRQb3NdKSA9PT0gJ14nID8gaWQuc3Vic3RyKGR0UG9zICsgMikgOlxuICAgICAgICAgICAvLyBJZiBcIkBcIiBmb2xsb3dzLCByZXR1cm4gcmRmOmxhbmdTdHJpbmc7IHhzZDpzdHJpbmcgb3RoZXJ3aXNlXG4gICAgICAgICAgIChjaCAhPT0gJ0AnID8geHNkLnN0cmluZyA6IHJkZi5sYW5nU3RyaW5nKTtcbiAgfVxuXG4gIC8vICMjIyBSZXR1cm5zIHdoZXRoZXIgdGhpcyBvYmplY3QgcmVwcmVzZW50cyB0aGUgc2FtZSB0ZXJtIGFzIHRoZSBvdGhlclxuICBlcXVhbHMob3RoZXIpIHtcbiAgICAvLyBJZiBib3RoIGxpdGVyYWxzIHdlcmUgY3JlYXRlZCBieSB0aGlzIGxpYnJhcnksXG4gICAgLy8gZXF1YWxpdHkgY2FuIGJlIGNvbXB1dGVkIHRocm91Z2ggaWRzXG4gICAgaWYgKG90aGVyIGluc3RhbmNlb2YgTGl0ZXJhbClcbiAgICAgIHJldHVybiB0aGlzLmlkID09PSBvdGhlci5pZDtcbiAgICAvLyBPdGhlcndpc2UsIGNvbXBhcmUgdGVybSB0eXBlLCB2YWx1ZSwgbGFuZ3VhZ2UsIGFuZCBkYXRhdHlwZVxuICAgIHJldHVybiAhIW90aGVyICYmICEhb3RoZXIuZGF0YXR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlcm1UeXBlID09PSBvdGhlci50ZXJtVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgICAgPT09IG90aGVyLnZhbHVlICAgICYmXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZSA9PT0gb3RoZXIubGFuZ3VhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGF0eXBlLnZhbHVlID09PSBvdGhlci5kYXRhdHlwZS52YWx1ZTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVybVR5cGU6IHRoaXMudGVybVR5cGUsXG4gICAgICB2YWx1ZTogICAgdGhpcy52YWx1ZSxcbiAgICAgIGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgZGF0YXR5cGU6IHsgdGVybVR5cGU6ICdOYW1lZE5vZGUnLCB2YWx1ZTogdGhpcy5kYXRhdHlwZVN0cmluZyB9LFxuICAgIH07XG4gIH1cbn1cblxuLy8gIyMgQmxhbmtOb2RlIGNvbnN0cnVjdG9yXG5jbGFzcyBCbGFua05vZGUgZXh0ZW5kcyBUZXJtIHtcbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKCdfOicgKyBuYW1lKTtcbiAgfVxuXG4gIC8vICMjIyBUaGUgdGVybSB0eXBlIG9mIHRoaXMgdGVybVxuICBnZXQgdGVybVR5cGUoKSB7XG4gICAgcmV0dXJuICdCbGFua05vZGUnO1xuICB9XG5cbiAgLy8gIyMjIFRoZSBuYW1lIG9mIHRoaXMgYmxhbmsgbm9kZVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQuc3Vic3RyKDIpO1xuICB9XG59XG5cbmNsYXNzIFZhcmlhYmxlIGV4dGVuZHMgVGVybSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICBzdXBlcignPycgKyBuYW1lKTtcbiAgfVxuXG4gIC8vICMjIyBUaGUgdGVybSB0eXBlIG9mIHRoaXMgdGVybVxuICBnZXQgdGVybVR5cGUoKSB7XG4gICAgcmV0dXJuICdWYXJpYWJsZSc7XG4gIH1cblxuICAvLyAjIyMgVGhlIG5hbWUgb2YgdGhpcyB2YXJpYWJsZVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaWQuc3Vic3RyKDEpO1xuICB9XG59XG5cbi8vICMjIERlZmF1bHRHcmFwaCBjb25zdHJ1Y3RvclxuY2xhc3MgRGVmYXVsdEdyYXBoIGV4dGVuZHMgVGVybSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCcnKTtcbiAgICByZXR1cm4gREVGQVVMVEdSQVBIIHx8IHRoaXM7XG4gIH1cblxuICAvLyAjIyMgVGhlIHRlcm0gdHlwZSBvZiB0aGlzIHRlcm1cbiAgZ2V0IHRlcm1UeXBlKCkge1xuICAgIHJldHVybiAnRGVmYXVsdEdyYXBoJztcbiAgfVxuXG4gIC8vICMjIyBSZXR1cm5zIHdoZXRoZXIgdGhpcyBvYmplY3QgcmVwcmVzZW50cyB0aGUgc2FtZSB0ZXJtIGFzIHRoZSBvdGhlclxuICBlcXVhbHMob3RoZXIpIHtcbiAgICAvLyBJZiBib3RoIHRlcm1zIHdlcmUgY3JlYXRlZCBieSB0aGlzIGxpYnJhcnksXG4gICAgLy8gZXF1YWxpdHkgY2FuIGJlIGNvbXB1dGVkIHRocm91Z2ggc3RyaWN0IGVxdWFsaXR5O1xuICAgIC8vIG90aGVyd2lzZSwgY29tcGFyZSB0ZXJtIHR5cGVzLlxuICAgIHJldHVybiAodGhpcyA9PT0gb3RoZXIpIHx8ICghIW90aGVyICYmICh0aGlzLnRlcm1UeXBlID09PSBvdGhlci50ZXJtVHlwZSkpO1xuICB9XG59XG5cbi8vICMjIERlZmF1bHRHcmFwaCBzaW5nbGV0b25cbkRFRkFVTFRHUkFQSCA9IG5ldyBEZWZhdWx0R3JhcGgoKTtcblxuXG4vLyAjIyMgQ29uc3RydWN0cyBhIHRlcm0gZnJvbSB0aGUgZ2l2ZW4gaW50ZXJuYWwgc3RyaW5nIElEXG5mdW5jdGlvbiBmcm9tSWQoaWQsIGZhY3RvcnkpIHtcbiAgZmFjdG9yeSA9IGZhY3RvcnkgfHwgRGF0YUZhY3Rvcnk7XG5cbiAgLy8gRmFsc3kgdmFsdWUgb3IgZW1wdHkgc3RyaW5nIGluZGljYXRlIHRoZSBkZWZhdWx0IGdyYXBoXG4gIGlmICghaWQpXG4gICAgcmV0dXJuIGZhY3RvcnkuZGVmYXVsdEdyYXBoKCk7XG5cbiAgLy8gSWRlbnRpZnkgdGhlIHRlcm0gdHlwZSBiYXNlZCBvbiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gIHN3aXRjaCAoaWRbMF0pIHtcbiAgY2FzZSAnXyc6IHJldHVybiBmYWN0b3J5LmJsYW5rTm9kZShpZC5zdWJzdHIoMikpO1xuICBjYXNlICc/JzogcmV0dXJuIGZhY3RvcnkudmFyaWFibGUoaWQuc3Vic3RyKDEpKTtcbiAgY2FzZSAnXCInOlxuICAgIC8vIFNob3J0Y3V0IGZvciBpbnRlcm5hbCBsaXRlcmFsc1xuICAgIGlmIChmYWN0b3J5ID09PSBEYXRhRmFjdG9yeSlcbiAgICAgIHJldHVybiBuZXcgTGl0ZXJhbChpZCk7XG4gICAgLy8gTGl0ZXJhbCB3aXRob3V0IGRhdGF0eXBlIG9yIGxhbmd1YWdlXG4gICAgaWYgKGlkW2lkLmxlbmd0aCAtIDFdID09PSAnXCInKVxuICAgICAgcmV0dXJuIGZhY3RvcnkubGl0ZXJhbChpZC5zdWJzdHIoMSwgaWQubGVuZ3RoIC0gMikpO1xuICAgIC8vIExpdGVyYWwgd2l0aCBkYXRhdHlwZSBvciBsYW5ndWFnZVxuICAgIHZhciBlbmRQb3MgPSBpZC5sYXN0SW5kZXhPZignXCInLCBpZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gZmFjdG9yeS5saXRlcmFsKGlkLnN1YnN0cigxLCBlbmRQb3MgLSAxKSxcbiAgICAgICAgICAgIGlkW2VuZFBvcyArIDFdID09PSAnQCcgPyBpZC5zdWJzdHIoZW5kUG9zICsgMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWN0b3J5Lm5hbWVkTm9kZShpZC5zdWJzdHIoZW5kUG9zICsgMykpKTtcbiAgZGVmYXVsdDogIHJldHVybiBmYWN0b3J5Lm5hbWVkTm9kZShpZCk7XG4gIH1cbn1cblxuLy8gIyMjIENvbnN0cnVjdHMgYW4gaW50ZXJuYWwgc3RyaW5nIElEIGZyb20gdGhlIGdpdmVuIHRlcm0gb3IgSUQgc3RyaW5nXG5mdW5jdGlvbiB0b0lkKHRlcm0pIHtcbiAgaWYgKHR5cGVvZiB0ZXJtID09PSAnc3RyaW5nJylcbiAgICByZXR1cm4gdGVybTtcbiAgaWYgKHRlcm0gaW5zdGFuY2VvZiBUZXJtKVxuICAgIHJldHVybiB0ZXJtLmlkO1xuICBpZiAoIXRlcm0pXG4gICAgcmV0dXJuIERFRkFVTFRHUkFQSC5pZDtcblxuICAvLyBUZXJtIGluc3RhbnRpYXRlZCB3aXRoIGFub3RoZXIgbGlicmFyeVxuICBzd2l0Y2ggKHRlcm0udGVybVR5cGUpIHtcbiAgY2FzZSAnTmFtZWROb2RlJzogICAgcmV0dXJuIHRlcm0udmFsdWU7XG4gIGNhc2UgJ0JsYW5rTm9kZSc6ICAgIHJldHVybiAnXzonICsgdGVybS52YWx1ZTtcbiAgY2FzZSAnVmFyaWFibGUnOiAgICAgcmV0dXJuICc/JyArIHRlcm0udmFsdWU7XG4gIGNhc2UgJ0RlZmF1bHRHcmFwaCc6IHJldHVybiAnJztcbiAgY2FzZSAnTGl0ZXJhbCc6ICAgICAgcmV0dXJuICdcIicgKyB0ZXJtLnZhbHVlICsgJ1wiJyArXG4gICAgKHRlcm0ubGFuZ3VhZ2UgPyAnQCcgKyB0ZXJtLmxhbmd1YWdlIDpcbiAgICAgICh0ZXJtLmRhdGF0eXBlICYmIHRlcm0uZGF0YXR5cGUudmFsdWUgIT09IHhzZC5zdHJpbmcgPyAnXl4nICsgdGVybS5kYXRhdHlwZS52YWx1ZSA6ICcnKSk7XG4gIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCB0ZXJtVHlwZTogJyArIHRlcm0udGVybVR5cGUpO1xuICB9XG59XG5cblxuLy8gIyMgUXVhZCBjb25zdHJ1Y3RvclxuY2xhc3MgUXVhZCB7XG4gIGNvbnN0cnVjdG9yKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIHRoaXMuc3ViamVjdCAgID0gc3ViamVjdDtcbiAgICB0aGlzLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICB0aGlzLm9iamVjdCAgICA9IG9iamVjdDtcbiAgICB0aGlzLmdyYXBoICAgICA9IGdyYXBoIHx8IERFRkFVTFRHUkFQSDtcbiAgfVxuXG4gIC8vICMjIyBSZXR1cm5zIGEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcXVhZFxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1YmplY3Q6ICAgdGhpcy5zdWJqZWN0LnRvSlNPTigpLFxuICAgICAgcHJlZGljYXRlOiB0aGlzLnByZWRpY2F0ZS50b0pTT04oKSxcbiAgICAgIG9iamVjdDogICAgdGhpcy5vYmplY3QudG9KU09OKCksXG4gICAgICBncmFwaDogICAgIHRoaXMuZ3JhcGgudG9KU09OKCksXG4gICAgfTtcbiAgfVxuXG4gIC8vICMjIyBSZXR1cm5zIHdoZXRoZXIgdGhpcyBvYmplY3QgcmVwcmVzZW50cyB0aGUgc2FtZSBxdWFkIGFzIHRoZSBvdGhlclxuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gISFvdGhlciAmJiB0aGlzLnN1YmplY3QuZXF1YWxzKG90aGVyLnN1YmplY3QpICAgICAmJlxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJlZGljYXRlLmVxdWFscyhvdGhlci5wcmVkaWNhdGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuZXF1YWxzKG90aGVyLm9iamVjdCkgICAgICAgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYXBoLmVxdWFscyhvdGhlci5ncmFwaCk7XG4gIH1cbn1cblxuXG4vLyAjIyBEYXRhRmFjdG9yeSBzaW5nbGV0b25cbkRhdGFGYWN0b3J5ID0ge1xuICAvLyAjIyMgUHVibGljIGZhY3RvcnkgZnVuY3Rpb25zXG4gIG5hbWVkTm9kZSxcbiAgYmxhbmtOb2RlLFxuICB2YXJpYWJsZSxcbiAgbGl0ZXJhbCxcbiAgZGVmYXVsdEdyYXBoLFxuICBxdWFkLFxuICB0cmlwbGU6IHF1YWQsXG5cbiAgLy8gIyMjIEludGVybmFsIGRhdGF0eXBlIGNvbnN0cnVjdG9yc1xuICBpbnRlcm5hbDoge1xuICAgIFRlcm0sXG4gICAgTmFtZWROb2RlLFxuICAgIEJsYW5rTm9kZSxcbiAgICBWYXJpYWJsZSxcbiAgICBMaXRlcmFsLFxuICAgIERlZmF1bHRHcmFwaCxcbiAgICBRdWFkLFxuICAgIFRyaXBsZTogUXVhZCxcbiAgICBmcm9tSWQsXG4gICAgdG9JZCxcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBEYXRhRmFjdG9yeTtcblxuLy8gIyMjIENyZWF0ZXMgYW4gSVJJXG5mdW5jdGlvbiBuYW1lZE5vZGUoaXJpKSB7XG4gIHJldHVybiBuZXcgTmFtZWROb2RlKGlyaSk7XG59XG5cbi8vICMjIyBDcmVhdGVzIGEgYmxhbmsgbm9kZVxuZnVuY3Rpb24gYmxhbmtOb2RlKG5hbWUpIHtcbiAgaWYgKCFuYW1lKVxuICAgIG5hbWUgPSAnbjMtJyArIF9ibGFua05vZGVDb3VudGVyKys7XG4gIHJldHVybiBuZXcgQmxhbmtOb2RlKG5hbWUpO1xufVxuXG4vLyAjIyMgQ3JlYXRlcyBhIGxpdGVyYWxcbmZ1bmN0aW9uIGxpdGVyYWwodmFsdWUsIGxhbmd1YWdlT3JEYXRhVHlwZSkge1xuICAvLyBDcmVhdGUgYSBsYW5ndWFnZS10YWdnZWQgc3RyaW5nXG4gIGlmICh0eXBlb2YgbGFuZ3VhZ2VPckRhdGFUeXBlID09PSAnc3RyaW5nJylcbiAgICByZXR1cm4gbmV3IExpdGVyYWwoJ1wiJyArIHZhbHVlICsgJ1wiQCcgKyBsYW5ndWFnZU9yRGF0YVR5cGUudG9Mb3dlckNhc2UoKSk7XG5cbiAgLy8gQXV0b21hdGljYWxseSBkZXRlcm1pbmUgZGF0YXR5cGUgZm9yIGJvb2xlYW5zIGFuZCBudW1iZXJzXG4gIGxldCBkYXRhdHlwZSA9IGxhbmd1YWdlT3JEYXRhVHlwZSA/IGxhbmd1YWdlT3JEYXRhVHlwZS52YWx1ZSA6ICcnO1xuICBpZiAoZGF0YXR5cGUgPT09ICcnKSB7XG4gICAgLy8gQ29udmVydCBhIGJvb2xlYW5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpXG4gICAgICBkYXRhdHlwZSA9IHhzZC5ib29sZWFuO1xuICAgIC8vIENvbnZlcnQgYW4gaW50ZWdlciBvciBkb3VibGVcbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKHZhbHVlKSlcbiAgICAgICAgZGF0YXR5cGUgPSBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSA/IHhzZC5pbnRlZ2VyIDogeHNkLmRvdWJsZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBkYXRhdHlwZSA9IHhzZC5kb3VibGU7XG4gICAgICAgIGlmICghTnVtYmVyLmlzTmFOKHZhbHVlKSlcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlID4gMCA/ICdJTkYnIDogJy1JTkYnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENyZWF0ZSBhIGRhdGF0eXBlZCBsaXRlcmFsXG4gIHJldHVybiAoZGF0YXR5cGUgPT09ICcnIHx8IGRhdGF0eXBlID09PSB4c2Quc3RyaW5nKSA/XG4gICAgbmV3IExpdGVyYWwoJ1wiJyArIHZhbHVlICsgJ1wiJykgOlxuICAgIG5ldyBMaXRlcmFsKCdcIicgKyB2YWx1ZSArICdcIl5eJyArIGRhdGF0eXBlKTtcbn1cblxuLy8gIyMjIENyZWF0ZXMgYSB2YXJpYWJsZVxuZnVuY3Rpb24gdmFyaWFibGUobmFtZSkge1xuICByZXR1cm4gbmV3IFZhcmlhYmxlKG5hbWUpO1xufVxuXG4vLyAjIyMgUmV0dXJucyB0aGUgZGVmYXVsdCBncmFwaFxuZnVuY3Rpb24gZGVmYXVsdEdyYXBoKCkge1xuICByZXR1cm4gREVGQVVMVEdSQVBIO1xufVxuXG4vLyAjIyMgQ3JlYXRlcyBhIHF1YWRcbmZ1bmN0aW9uIHF1YWQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSB7XG4gIHJldHVybiBuZXcgUXVhZChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgpO1xufVxuIiwiLy8gKipOM1dyaXRlcioqIHdyaXRlcyBOMyBkb2N1bWVudHMuXG5pbXBvcnQgbmFtZXNwYWNlcyBmcm9tICcuL0lSSXMnO1xuaW1wb3J0IE4zRGF0YUZhY3RvcnkgZnJvbSAnLi9OM0RhdGFGYWN0b3J5JztcblxuY29uc3QgREVGQVVMVEdSQVBIID0gTjNEYXRhRmFjdG9yeS5kZWZhdWx0R3JhcGgoKTtcblxuY29uc3QgeyByZGYsIHhzZCB9ID0gbmFtZXNwYWNlcztcblxuLy8gQ2hhcmFjdGVycyBpbiBsaXRlcmFscyB0aGF0IHJlcXVpcmUgZXNjYXBpbmdcbnZhciBlc2NhcGUgICAgPSAvW1wiXFxcXFxcdFxcblxcclxcYlxcZlxcdTAwMDAtXFx1MDAxOVxcdWQ4MDAtXFx1ZGJmZl0vLFxuICAgIGVzY2FwZUFsbCA9IC9bXCJcXFxcXFx0XFxuXFxyXFxiXFxmXFx1MDAwMC1cXHUwMDE5XXxbXFx1ZDgwMC1cXHVkYmZmXVtcXHVkYzAwLVxcdWRmZmZdL2csXG4gICAgZXNjYXBlZENoYXJhY3RlcnMgPSB7XG4gICAgICAnXFxcXCc6ICdcXFxcXFxcXCcsICdcIic6ICdcXFxcXCInLCAnXFx0JzogJ1xcXFx0JyxcbiAgICAgICdcXG4nOiAnXFxcXG4nLCAnXFxyJzogJ1xcXFxyJywgJ1xcYic6ICdcXFxcYicsICdcXGYnOiAnXFxcXGYnLFxuICAgIH07XG5cbi8vICMjIFBsYWNlaG9sZGVyIGNsYXNzIHRvIHJlcHJlc2VudCBhbHJlYWR5IHByZXR0eS1wcmludGVkIHRlcm1zXG5jbGFzcyBTZXJpYWxpemVkVGVybSBleHRlbmRzIE4zRGF0YUZhY3RvcnkuaW50ZXJuYWwuVGVybSB7XG4gIC8vIFByZXR0eS1wcmludGVkIG5vZGVzIGFyZSBub3QgZXF1YWwgdG8gYW55IG90aGVyIG5vZGVcbiAgLy8gKGUuZy4sIFtdIGRvZXMgbm90IGVxdWFsIFtdKVxuICBlcXVhbHMoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vICMjIENvbnN0cnVjdG9yXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOM1dyaXRlciB7XG4gIGNvbnN0cnVjdG9yKG91dHB1dFN0cmVhbSwgb3B0aW9ucykge1xuICAgIC8vICMjIyBgX3ByZWZpeFJlZ2V4YCBtYXRjaGVzIGEgcHJlZml4ZWQgbmFtZSBvciBJUkkgdGhhdCBiZWdpbnMgd2l0aCBvbmUgb2YgdGhlIGFkZGVkIHByZWZpeGVzXG4gICAgdGhpcy5fcHJlZml4UmVnZXggPSAvJDBeLztcblxuICAgIC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGEgc3RyZWFtXG4gICAgaWYgKG91dHB1dFN0cmVhbSAmJiB0eXBlb2Ygb3V0cHV0U3RyZWFtLndyaXRlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgb3B0aW9ucyA9IG91dHB1dFN0cmVhbSwgb3V0cHV0U3RyZWFtID0gbnVsbDtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLl9saXN0cyA9IG9wdGlvbnMubGlzdHM7XG5cbiAgICAvLyBJZiBubyBvdXRwdXQgc3RyZWFtIGdpdmVuLCBzZW5kIHRoZSBvdXRwdXQgYXMgc3RyaW5nIHRocm91Z2ggdGhlIGVuZCBjYWxsYmFja1xuICAgIGlmICghb3V0cHV0U3RyZWFtKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICB0aGlzLl9vdXRwdXRTdHJlYW0gPSB7XG4gICAgICAgIHdyaXRlKGNodW5rLCBlbmNvZGluZywgZG9uZSkgeyBvdXRwdXQgKz0gY2h1bms7IGRvbmUgJiYgZG9uZSgpOyB9LFxuICAgICAgICBlbmQ6ICAgZnVuY3Rpb24gKGRvbmUpIHsgZG9uZSAmJiBkb25lKG51bGwsIG91dHB1dCk7IH0sXG4gICAgICB9O1xuICAgICAgdGhpcy5fZW5kU3RyZWFtID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9vdXRwdXRTdHJlYW0gPSBvdXRwdXRTdHJlYW07XG4gICAgICB0aGlzLl9lbmRTdHJlYW0gPSBvcHRpb25zLmVuZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0aW9ucy5lbmQ7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSB3cml0ZXIsIGRlcGVuZGluZyBvbiB0aGUgZm9ybWF0XG4gICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgaWYgKCEoL3RyaXBsZXxxdWFkL2kpLnRlc3Qob3B0aW9ucy5mb3JtYXQpKSB7XG4gICAgICB0aGlzLl9ncmFwaCA9IERFRkFVTFRHUkFQSDtcbiAgICAgIHRoaXMuX3ByZWZpeElSSXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgb3B0aW9ucy5wcmVmaXhlcyAmJiB0aGlzLmFkZFByZWZpeGVzKG9wdGlvbnMucHJlZml4ZXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX3dyaXRlUXVhZCA9IHRoaXMuX3dyaXRlUXVhZExpbmU7XG4gICAgfVxuICB9XG5cbiAgLy8gIyMgUHJpdmF0ZSBtZXRob2RzXG5cbiAgLy8gIyMjIFdoZXRoZXIgdGhlIGN1cnJlbnQgZ3JhcGggaXMgdGhlIGRlZmF1bHQgZ3JhcGhcbiAgZ2V0IF9pbkRlZmF1bHRHcmFwaCgpIHtcbiAgICByZXR1cm4gREVGQVVMVEdSQVBILmVxdWFscyh0aGlzLl9ncmFwaCk7XG4gIH1cblxuICAvLyAjIyMgYF93cml0ZWAgd3JpdGVzIHRoZSBhcmd1bWVudCB0byB0aGUgb3V0cHV0IHN0cmVhbVxuICBfd3JpdGUoc3RyaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX291dHB1dFN0cmVhbS53cml0ZShzdHJpbmcsICd1dGY4JywgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gIyMjIGBfd3JpdGVRdWFkYCB3cml0ZXMgdGhlIHF1YWQgdG8gdGhlIG91dHB1dCBzdHJlYW1cbiAgX3dyaXRlUXVhZChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGgsIGRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgLy8gV3JpdGUgdGhlIGdyYXBoJ3MgbGFiZWwgaWYgaXQgaGFzIGNoYW5nZWRcbiAgICAgIGlmICghZ3JhcGguZXF1YWxzKHRoaXMuX2dyYXBoKSkge1xuICAgICAgICAvLyBDbG9zZSB0aGUgcHJldmlvdXMgZ3JhcGggYW5kIHN0YXJ0IHRoZSBuZXcgb25lXG4gICAgICAgIHRoaXMuX3dyaXRlKCh0aGlzLl9zdWJqZWN0ID09PSBudWxsID8gJycgOiAodGhpcy5faW5EZWZhdWx0R3JhcGggPyAnLlxcbicgOiAnXFxufVxcbicpKSArXG4gICAgICAgICAgICAgICAgICAgIChERUZBVUxUR1JBUEguZXF1YWxzKGdyYXBoKSA/ICcnIDogdGhpcy5fZW5jb2RlSXJpT3JCbGFuayhncmFwaCkgKyAnIHtcXG4nKSk7XG4gICAgICAgIHRoaXMuX2dyYXBoID0gZ3JhcGg7XG4gICAgICAgIHRoaXMuX3N1YmplY3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVwZWF0IHRoZSBzdWJqZWN0IGlmIGl0J3MgdGhlIHNhbWVcbiAgICAgIGlmIChzdWJqZWN0LmVxdWFscyh0aGlzLl9zdWJqZWN0KSkge1xuICAgICAgICAvLyBEb24ndCByZXBlYXQgdGhlIHByZWRpY2F0ZSBpZiBpdCdzIHRoZSBzYW1lXG4gICAgICAgIGlmIChwcmVkaWNhdGUuZXF1YWxzKHRoaXMuX3ByZWRpY2F0ZSkpXG4gICAgICAgICAgdGhpcy5fd3JpdGUoJywgJyArIHRoaXMuX2VuY29kZU9iamVjdChvYmplY3QpLCBkb25lKTtcbiAgICAgICAgLy8gU2FtZSBzdWJqZWN0LCBkaWZmZXJlbnQgcHJlZGljYXRlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzLl93cml0ZSgnO1xcbiAgICAnICtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVQcmVkaWNhdGUodGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlT2JqZWN0KG9iamVjdCksIGRvbmUpO1xuICAgICAgfVxuICAgICAgLy8gRGlmZmVyZW50IHN1YmplY3Q7IHdyaXRlIHRoZSB3aG9sZSBxdWFkXG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuX3dyaXRlKCh0aGlzLl9zdWJqZWN0ID09PSBudWxsID8gJycgOiAnLlxcbicpICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlSXJpT3JCbGFuayh0aGlzLl9zdWJqZWN0ID0gc3ViamVjdCkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVQcmVkaWNhdGUodGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZU9iamVjdChvYmplY3QpLCBkb25lKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGRvbmUgJiYgZG9uZShlcnJvcik7IH1cbiAgfVxuXG4gIC8vICMjIyBgX3dyaXRlUXVhZExpbmVgIHdyaXRlcyB0aGUgcXVhZCB0byB0aGUgb3V0cHV0IHN0cmVhbSBhcyBhIHNpbmdsZSBsaW5lXG4gIF93cml0ZVF1YWRMaW5lKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCwgZG9uZSkge1xuICAgIC8vIFdyaXRlIHRoZSBxdWFkIHdpdGhvdXQgcHJlZml4ZXNcbiAgICBkZWxldGUgdGhpcy5fcHJlZml4TWF0Y2g7XG4gICAgdGhpcy5fd3JpdGUodGhpcy5xdWFkVG9TdHJpbmcoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoKSwgZG9uZSk7XG4gIH1cblxuICAvLyAjIyMgYHF1YWRUb1N0cmluZ2Agc2VyaWFsaXplcyBhIHF1YWQgYXMgYSBzdHJpbmdcbiAgcXVhZFRvU3RyaW5nKHN1YmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0LCBncmFwaCkge1xuICAgIHJldHVybiAgdGhpcy5fZW5jb2RlSXJpT3JCbGFuayhzdWJqZWN0KSAgICsgJyAnICtcbiAgICAgICAgICAgIHRoaXMuX2VuY29kZUlyaU9yQmxhbmsocHJlZGljYXRlKSArICcgJyArXG4gICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3Qob2JqZWN0KSArXG4gICAgICAgICAgICAoZ3JhcGggJiYgZ3JhcGgudmFsdWUgPyAnICcgKyB0aGlzLl9lbmNvZGVJcmlPckJsYW5rKGdyYXBoKSArICcgLlxcbicgOiAnIC5cXG4nKTtcbiAgfVxuXG4gIC8vICMjIyBgcXVhZHNUb1N0cmluZ2Agc2VyaWFsaXplcyBhbiBhcnJheSBvZiBxdWFkcyBhcyBhIHN0cmluZ1xuICBxdWFkc1RvU3RyaW5nKHF1YWRzKSB7XG4gICAgcmV0dXJuIHF1YWRzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHRoaXMucXVhZFRvU3RyaW5nKHQuc3ViamVjdCwgdC5wcmVkaWNhdGUsIHQub2JqZWN0LCB0LmdyYXBoKTtcbiAgICB9LCB0aGlzKS5qb2luKCcnKTtcbiAgfVxuXG4gIC8vICMjIyBgX2VuY29kZUlyaU9yQmxhbmtgIHJlcHJlc2VudHMgYW4gSVJJIG9yIGJsYW5rIG5vZGVcbiAgX2VuY29kZUlyaU9yQmxhbmsoZW50aXR5KSB7XG4gICAgLy8gQSBibGFuayBub2RlIG9yIGxpc3QgaXMgcmVwcmVzZW50ZWQgYXMtaXNcbiAgICBpZiAoZW50aXR5LnRlcm1UeXBlICE9PSAnTmFtZWROb2RlJykge1xuICAgICAgLy8gSWYgaXQgaXMgYSBsaXN0IGhlYWQsIHByZXR0eS1wcmludCBpdFxuICAgICAgaWYgKHRoaXMuX2xpc3RzICYmIChlbnRpdHkudmFsdWUgaW4gdGhpcy5fbGlzdHMpKVxuICAgICAgICBlbnRpdHkgPSB0aGlzLmxpc3QodGhpcy5fbGlzdHNbZW50aXR5LnZhbHVlXSk7XG4gICAgICByZXR1cm4gJ2lkJyBpbiBlbnRpdHkgPyBlbnRpdHkuaWQgOiAnXzonICsgZW50aXR5LnZhbHVlO1xuICAgIH1cbiAgICAvLyBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgdmFyIGlyaSA9IGVudGl0eS52YWx1ZTtcbiAgICBpZiAoZXNjYXBlLnRlc3QoaXJpKSlcbiAgICAgIGlyaSA9IGlyaS5yZXBsYWNlKGVzY2FwZUFsbCwgY2hhcmFjdGVyUmVwbGFjZXIpO1xuICAgIC8vIFRyeSB0byByZXByZXNlbnQgdGhlIElSSSBhcyBwcmVmaXhlZCBuYW1lXG4gICAgdmFyIHByZWZpeE1hdGNoID0gdGhpcy5fcHJlZml4UmVnZXguZXhlYyhpcmkpO1xuICAgIHJldHVybiAhcHJlZml4TWF0Y2ggPyAnPCcgKyBpcmkgKyAnPicgOlxuICAgICAgICAgICAoIXByZWZpeE1hdGNoWzFdID8gaXJpIDogdGhpcy5fcHJlZml4SVJJc1twcmVmaXhNYXRjaFsxXV0gKyBwcmVmaXhNYXRjaFsyXSk7XG4gIH1cblxuICAvLyAjIyMgYF9lbmNvZGVMaXRlcmFsYCByZXByZXNlbnRzIGEgbGl0ZXJhbFxuICBfZW5jb2RlTGl0ZXJhbChsaXRlcmFsKSB7XG4gICAgLy8gRXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVyc1xuICAgIHZhciB2YWx1ZSA9IGxpdGVyYWwudmFsdWU7XG4gICAgaWYgKGVzY2FwZS50ZXN0KHZhbHVlKSlcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShlc2NhcGVBbGwsIGNoYXJhY3RlclJlcGxhY2VyKTtcbiAgICAvLyBXcml0ZSB0aGUgbGl0ZXJhbCwgcG9zc2libHkgd2l0aCB0eXBlIG9yIGxhbmd1YWdlXG4gICAgaWYgKGxpdGVyYWwubGFuZ3VhZ2UpXG4gICAgICByZXR1cm4gJ1wiJyArIHZhbHVlICsgJ1wiQCcgKyBsaXRlcmFsLmxhbmd1YWdlO1xuICAgIGVsc2UgaWYgKGxpdGVyYWwuZGF0YXR5cGUudmFsdWUgIT09IHhzZC5zdHJpbmcpXG4gICAgICByZXR1cm4gJ1wiJyArIHZhbHVlICsgJ1wiXl4nICsgdGhpcy5fZW5jb2RlSXJpT3JCbGFuayhsaXRlcmFsLmRhdGF0eXBlKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gJ1wiJyArIHZhbHVlICsgJ1wiJztcbiAgfVxuXG4gIC8vICMjIyBgX2VuY29kZVByZWRpY2F0ZWAgcmVwcmVzZW50cyBhIHByZWRpY2F0ZVxuICBfZW5jb2RlUHJlZGljYXRlKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBwcmVkaWNhdGUudmFsdWUgPT09IHJkZi50eXBlID8gJ2EnIDogdGhpcy5fZW5jb2RlSXJpT3JCbGFuayhwcmVkaWNhdGUpO1xuICB9XG5cbiAgLy8gIyMjIGBfZW5jb2RlT2JqZWN0YCByZXByZXNlbnRzIGFuIG9iamVjdFxuICBfZW5jb2RlT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QudGVybVR5cGUgPT09ICdMaXRlcmFsJyA/IHRoaXMuX2VuY29kZUxpdGVyYWwob2JqZWN0KSA6IHRoaXMuX2VuY29kZUlyaU9yQmxhbmsob2JqZWN0KTtcbiAgfVxuXG4gIC8vICMjIyBgX2Jsb2NrZWRXcml0ZWAgcmVwbGFjZXMgYF93cml0ZWAgYWZ0ZXIgdGhlIHdyaXRlciBoYXMgYmVlbiBjbG9zZWRcbiAgX2Jsb2NrZWRXcml0ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB3cml0ZSBiZWNhdXNlIHRoZSB3cml0ZXIgaGFzIGJlZW4gY2xvc2VkLicpO1xuICB9XG5cbiAgLy8gIyMjIGBhZGRRdWFkYCBhZGRzIHRoZSBxdWFkIHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGFkZFF1YWQoc3ViamVjdCwgcHJlZGljYXRlLCBvYmplY3QsIGdyYXBoLCBkb25lKSB7XG4gICAgLy8gVGhlIHF1YWQgd2FzIGdpdmVuIGFzIGFuIG9iamVjdCwgc28gc2hpZnQgcGFyYW1ldGVyc1xuICAgIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZClcbiAgICAgIHRoaXMuX3dyaXRlUXVhZChzdWJqZWN0LnN1YmplY3QsIHN1YmplY3QucHJlZGljYXRlLCBzdWJqZWN0Lm9iamVjdCwgc3ViamVjdC5ncmFwaCwgcHJlZGljYXRlKTtcbiAgICAvLyBUaGUgb3B0aW9uYWwgYGdyYXBoYCBwYXJhbWV0ZXIgd2FzIG5vdCBwcm92aWRlZFxuICAgIGVsc2UgaWYgKHR5cGVvZiBncmFwaCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRoaXMuX3dyaXRlUXVhZChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgREVGQVVMVEdSQVBILCBncmFwaCk7XG4gICAgLy8gVGhlIGBncmFwaGAgcGFyYW1ldGVyIHdhcyBwcm92aWRlZFxuICAgIGVsc2VcbiAgICAgIHRoaXMuX3dyaXRlUXVhZChzdWJqZWN0LCBwcmVkaWNhdGUsIG9iamVjdCwgZ3JhcGggfHwgREVGQVVMVEdSQVBILCBkb25lKTtcbiAgfVxuXG4gIC8vICMjIyBgYWRkUXVhZHNgIGFkZHMgdGhlIHF1YWRzIHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGFkZFF1YWRzKHF1YWRzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWFkcy5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMuYWRkUXVhZChxdWFkc1tpXSk7XG4gIH1cblxuICAvLyAjIyMgYGFkZFByZWZpeGAgYWRkcyB0aGUgcHJlZml4IHRvIHRoZSBvdXRwdXQgc3RyZWFtXG4gIGFkZFByZWZpeChwcmVmaXgsIGlyaSwgZG9uZSkge1xuICAgIHZhciBwcmVmaXhlcyA9IHt9O1xuICAgIHByZWZpeGVzW3ByZWZpeF0gPSBpcmk7XG4gICAgdGhpcy5hZGRQcmVmaXhlcyhwcmVmaXhlcywgZG9uZSk7XG4gIH1cblxuICAvLyAjIyMgYGFkZFByZWZpeGVzYCBhZGRzIHRoZSBwcmVmaXhlcyB0byB0aGUgb3V0cHV0IHN0cmVhbVxuICBhZGRQcmVmaXhlcyhwcmVmaXhlcywgZG9uZSkge1xuICAgIHZhciBwcmVmaXhJUklzID0gdGhpcy5fcHJlZml4SVJJcywgaGFzUHJlZml4ZXMgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBwcmVmaXggaW4gcHJlZml4ZXMpIHtcbiAgICAgIHZhciBpcmkgPSBwcmVmaXhlc1twcmVmaXhdO1xuICAgICAgaWYgKHR5cGVvZiBpcmkgIT09ICdzdHJpbmcnKVxuICAgICAgICBpcmkgPSBpcmkudmFsdWU7XG4gICAgICBoYXNQcmVmaXhlcyA9IHRydWU7XG4gICAgICAvLyBGaW5pc2ggYSBwb3NzaWJsZSBwZW5kaW5nIHF1YWRcbiAgICAgIGlmICh0aGlzLl9zdWJqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3dyaXRlKHRoaXMuX2luRGVmYXVsdEdyYXBoID8gJy5cXG4nIDogJ1xcbn1cXG4nKTtcbiAgICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGwsIHRoaXMuX2dyYXBoID0gJyc7XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgd3JpdGUgdGhlIHByZWZpeFxuICAgICAgcHJlZml4SVJJc1tpcmldID0gKHByZWZpeCArPSAnOicpO1xuICAgICAgdGhpcy5fd3JpdGUoJ0BwcmVmaXggJyArIHByZWZpeCArICcgPCcgKyBpcmkgKyAnPi5cXG4nKTtcbiAgICB9XG4gICAgLy8gUmVjcmVhdGUgdGhlIHByZWZpeCBtYXRjaGVyXG4gICAgaWYgKGhhc1ByZWZpeGVzKSB7XG4gICAgICB2YXIgSVJJbGlzdCA9ICcnLCBwcmVmaXhMaXN0ID0gJyc7XG4gICAgICBmb3IgKHZhciBwcmVmaXhJUkkgaW4gcHJlZml4SVJJcykge1xuICAgICAgICBJUklsaXN0ICs9IElSSWxpc3QgPyAnfCcgKyBwcmVmaXhJUkkgOiBwcmVmaXhJUkk7XG4gICAgICAgIHByZWZpeExpc3QgKz0gKHByZWZpeExpc3QgPyAnfCcgOiAnJykgKyBwcmVmaXhJUklzW3ByZWZpeElSSV07XG4gICAgICB9XG4gICAgICBJUklsaXN0ID0gSVJJbGlzdC5yZXBsYWNlKC9bXFxdXFwvXFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcJF0vZywgJ1xcXFwkJicpO1xuICAgICAgdGhpcy5fcHJlZml4UmVnZXggPSBuZXcgUmVnRXhwKCdeKD86JyArIHByZWZpeExpc3QgKyAnKVteXFwvXSokfCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdeKCcgKyBJUklsaXN0ICsgJykoW2EtekEtWl1bXFxcXC1fYS16QS1aMC05XSopJCcpO1xuICAgIH1cbiAgICAvLyBFbmQgYSBwcmVmaXggYmxvY2sgd2l0aCBhIG5ld2xpbmVcbiAgICB0aGlzLl93cml0ZShoYXNQcmVmaXhlcyA/ICdcXG4nIDogJycsIGRvbmUpO1xuICB9XG5cbiAgLy8gIyMjIGBibGFua2AgY3JlYXRlcyBhIGJsYW5rIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gY29udGVudFxuICBibGFuayhwcmVkaWNhdGUsIG9iamVjdCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHByZWRpY2F0ZSwgY2hpbGQsIGxlbmd0aDtcbiAgICAvLyBFbXB0eSBibGFuayBub2RlXG4gICAgaWYgKHByZWRpY2F0ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgY2hpbGRyZW4gPSBbXTtcbiAgICAvLyBCbGFuayBub2RlIHBhc3NlZCBhcyBibGFuayhUZXJtKFwicHJlZGljYXRlXCIpLCBUZXJtKFwib2JqZWN0XCIpKVxuICAgIGVsc2UgaWYgKHByZWRpY2F0ZS50ZXJtVHlwZSlcbiAgICAgIGNoaWxkcmVuID0gW3sgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogb2JqZWN0IH1dO1xuICAgIC8vIEJsYW5rIG5vZGUgcGFzc2VkIGFzIGJsYW5rKHsgcHJlZGljYXRlOiBwcmVkaWNhdGUsIG9iamVjdDogb2JqZWN0IH0pXG4gICAgZWxzZSBpZiAoISgnbGVuZ3RoJyBpbiBwcmVkaWNhdGUpKVxuICAgICAgY2hpbGRyZW4gPSBbcHJlZGljYXRlXTtcblxuICAgIHN3aXRjaCAobGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgLy8gR2VuZXJhdGUgYW4gZW1wdHkgYmxhbmsgbm9kZVxuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBuZXcgU2VyaWFsaXplZFRlcm0oJ1tdJyk7XG4gICAgLy8gR2VuZXJhdGUgYSBub24tbmVzdGVkIG9uZS10cmlwbGUgYmxhbmsgbm9kZVxuICAgIGNhc2UgMTpcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgICBpZiAoIShjaGlsZC5vYmplY3QgaW5zdGFuY2VvZiBTZXJpYWxpemVkVGVybSkpXG4gICAgICAgIHJldHVybiBuZXcgU2VyaWFsaXplZFRlcm0oJ1sgJyArIHRoaXMuX2VuY29kZVByZWRpY2F0ZShjaGlsZC5wcmVkaWNhdGUpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmNvZGVPYmplY3QoY2hpbGQub2JqZWN0KSArICcgXScpO1xuICAgIC8vIEdlbmVyYXRlIGEgbXVsdGktdHJpcGxlIG9yIG5lc3RlZCBibGFuayBub2RlXG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBjb250ZW50cyA9ICdbJztcbiAgICAgIC8vIFdyaXRlIGFsbCB0cmlwbGVzIGluIG9yZGVyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIC8vIFdyaXRlIG9ubHkgdGhlIG9iamVjdCBpcyB0aGUgcHJlZGljYXRlIGlzIHRoZSBzYW1lIGFzIHRoZSBwcmV2aW91c1xuICAgICAgICBpZiAoY2hpbGQucHJlZGljYXRlLmVxdWFscyhwcmVkaWNhdGUpKVxuICAgICAgICAgIGNvbnRlbnRzICs9ICcsICcgKyB0aGlzLl9lbmNvZGVPYmplY3QoY2hpbGQub2JqZWN0KTtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3cml0ZSB0aGUgcHJlZGljYXRlIGFuZCB0aGUgb2JqZWN0XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRlbnRzICs9IChpID8gJztcXG4gICcgOiAnXFxuICAnKSArXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5jb2RlUHJlZGljYXRlKGNoaWxkLnByZWRpY2F0ZSkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuY29kZU9iamVjdChjaGlsZC5vYmplY3QpO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGNoaWxkLnByZWRpY2F0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBTZXJpYWxpemVkVGVybShjb250ZW50cyArICdcXG5dJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gIyMjIGBsaXN0YCBjcmVhdGVzIGEgbGlzdCBub2RlIHdpdGggdGhlIGdpdmVuIGNvbnRlbnRcbiAgbGlzdChlbGVtZW50cykge1xuICAgIHZhciBsZW5ndGggPSBlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGggfHwgMCwgY29udGVudHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgY29udGVudHNbaV0gPSB0aGlzLl9lbmNvZGVPYmplY3QoZWxlbWVudHNbaV0pO1xuICAgIHJldHVybiBuZXcgU2VyaWFsaXplZFRlcm0oJygnICsgY29udGVudHMuam9pbignICcpICsgJyknKTtcbiAgfVxuXG4gIC8vICMjIyBgZW5kYCBzaWduYWxzIHRoZSBlbmQgb2YgdGhlIG91dHB1dCBzdHJlYW1cbiAgZW5kKGRvbmUpIHtcbiAgICAvLyBGaW5pc2ggYSBwb3NzaWJsZSBwZW5kaW5nIHF1YWRcbiAgICBpZiAodGhpcy5fc3ViamVjdCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fd3JpdGUodGhpcy5faW5EZWZhdWx0R3JhcGggPyAnLlxcbicgOiAnXFxufVxcbicpO1xuICAgICAgdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgfVxuICAgIC8vIERpc2FsbG93IGZ1cnRoZXIgd3JpdGluZ1xuICAgIHRoaXMuX3dyaXRlID0gdGhpcy5fYmxvY2tlZFdyaXRlO1xuXG4gICAgLy8gVHJ5IHRvIGVuZCB0aGUgdW5kZXJseWluZyBzdHJlYW0sIGVuc3VyaW5nIGRvbmUgaXMgY2FsbGVkIGV4YWN0bHkgb25lIHRpbWVcbiAgICB2YXIgc2luZ2xlRG9uZSA9IGRvbmUgJiYgZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHsgc2luZ2xlRG9uZSA9IG51bGwsIGRvbmUoZXJyb3IsIHJlc3VsdCk7IH07XG4gICAgaWYgKHRoaXMuX2VuZFN0cmVhbSkge1xuICAgICAgdHJ5IHsgcmV0dXJuIHRoaXMuX291dHB1dFN0cmVhbS5lbmQoc2luZ2xlRG9uZSk7IH1cbiAgICAgIGNhdGNoIChlcnJvcikgeyAvKiBlcnJvciBjbG9zaW5nIHN0cmVhbSAqLyB9XG4gICAgfVxuICAgIHNpbmdsZURvbmUgJiYgc2luZ2xlRG9uZSgpO1xuICB9XG59XG5cbi8vIFJlcGxhY2VzIGEgY2hhcmFjdGVyIGJ5IGl0cyBlc2NhcGVkIHZlcnNpb25cbmZ1bmN0aW9uIGNoYXJhY3RlclJlcGxhY2VyKGNoYXJhY3Rlcikge1xuICAvLyBSZXBsYWNlIGEgc2luZ2xlIGNoYXJhY3RlciBieSBpdHMgZXNjYXBlZCB2ZXJzaW9uXG4gIHZhciByZXN1bHQgPSBlc2NhcGVkQ2hhcmFjdGVyc1tjaGFyYWN0ZXJdO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBSZXBsYWNlIGEgc2luZ2xlIGNoYXJhY3RlciB3aXRoIGl0cyA0LWJpdCB1bmljb2RlIGVzY2FwZSBzZXF1ZW5jZVxuICAgIGlmIChjaGFyYWN0ZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXN1bHQgPSBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7XG4gICAgICByZXN1bHQgPSAnXFxcXHUwMDAwJy5zdWJzdHIoMCwgNiAtIHJlc3VsdC5sZW5ndGgpICsgcmVzdWx0O1xuICAgIH1cbiAgICAvLyBSZXBsYWNlIGEgc3Vycm9nYXRlIHBhaXIgd2l0aCBpdHMgOC1iaXQgdW5pY29kZSBlc2NhcGUgc2VxdWVuY2VcbiAgICBlbHNlIHtcbiAgICAgIHJlc3VsdCA9ICgoY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDAgK1xuICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIuY2hhckNvZGVBdCgxKSArIDB4MjQwMCkudG9TdHJpbmcoMTYpO1xuICAgICAgcmVzdWx0ID0gJ1xcXFxVMDAwMDAwMDAnLnN1YnN0cigwLCAxMCAtIHJlc3VsdC5sZW5ndGgpICsgcmVzdWx0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLy8gKipOM1N0cmVhbVdyaXRlcioqIHNlcmlhbGl6ZXMgYSBxdWFkIHN0cmVhbSBpbnRvIGEgdGV4dCBzdHJlYW0uXG5pbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IE4zV3JpdGVyIGZyb20gJy4vTjNXcml0ZXInO1xuXG4vLyAjIyBDb25zdHJ1Y3RvclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTjNTdHJlYW1Xcml0ZXIgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUub2JqZWN0TW9kZSA9IHRydWU7XG5cbiAgICAvLyBTZXQgdXAgd3JpdGVyIHdpdGggYSBkdW1teSBzdHJlYW0gb2JqZWN0XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciB3cml0ZXIgPSB0aGlzLl93cml0ZXIgPSBuZXcgTjNXcml0ZXIoe1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIChxdWFkLCBlbmNvZGluZywgY2FsbGJhY2spIHsgc2VsZi5wdXNoKHF1YWQpOyBjYWxsYmFjayAmJiBjYWxsYmFjaygpOyB9LFxuICAgICAgZW5kOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgc2VsZi5wdXNoKG51bGwpOyBjYWxsYmFjayAmJiBjYWxsYmFjaygpOyB9LFxuICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgLy8gSW1wbGVtZW50IFRyYW5zZm9ybSBtZXRob2RzIG9uIHRvcCBvZiB3cml0ZXJcbiAgICB0aGlzLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAocXVhZCwgZW5jb2RpbmcsIGRvbmUpIHsgd3JpdGVyLmFkZFF1YWQocXVhZCwgZG9uZSk7IH07XG4gICAgdGhpcy5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkgeyB3cml0ZXIuZW5kKGRvbmUpOyB9O1xuICB9XG5cbi8vICMjIyBTZXJpYWxpemVzIGEgc3RyZWFtIG9mIHF1YWRzXG4gIGltcG9ydChzdHJlYW0pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc3RyZWFtLm9uKCdkYXRhJywgICBmdW5jdGlvbiAocXVhZCkgIHsgc2VsZi53cml0ZShxdWFkKTsgfSk7XG4gICAgc3RyZWFtLm9uKCdlbmQnLCAgICBmdW5jdGlvbiAoKSAgICAgIHsgc2VsZi5lbmQoKTsgfSk7XG4gICAgc3RyZWFtLm9uKCdlcnJvcicsICBmdW5jdGlvbiAoZXJyb3IpIHsgc2VsZi5lbWl0KCdlcnJvcicsIGVycm9yKTsgfSk7XG4gICAgc3RyZWFtLm9uKCdwcmVmaXgnLCBmdW5jdGlvbiAocHJlZml4LCBpcmkpIHsgc2VsZi5fd3JpdGVyLmFkZFByZWZpeChwcmVmaXgsIGlyaSk7IH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQge1N0cmVhbVdyaXRlcn0gZnJvbSBcIm4zXCI7XG5pbXBvcnQgKiBhcyBSREYgZnJvbSBcInJkZi1qc1wiO1xuaW1wb3J0IHtzdHJpbmdRdWFkVG9RdWFkfSBmcm9tIFwicmRmLXN0cmluZ1wiO1xuXG5mdW5jdGlvbiBpbnZva2UodXJsOiBzdHJpbmcsIHByb3h5OiBzdHJpbmcsIG9uUXVhZDogKHF1YWQ6IFJERi5RdWFkKSA9PiB2b2lkLCBvbkVycm9yOiAoZXJyb3I6IHN0cmluZykgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICBvbkNvdW50ZXJVcGRhdGU6IChjb3VudGVyOiBudW1iZXIsIGRvbmU6IGJvb2xlYW4pID0+IHZvaWQpOiBXb3JrZXIge1xuICBjb25zdCB3b3JrZXIgPSBuZXcgV29ya2VyKCdzY3JpcHRzL3dvcmtlci5taW4uanMnKTtcbiAgd29ya2VyLm9ubWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcbiAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgIGNhc2UgJ3F1YWQnOiAgICByZXR1cm4gb25RdWFkKHN0cmluZ1F1YWRUb1F1YWQoZGF0YS5xdWFkKSk7XG4gICAgY2FzZSAnZXJyJzogICByZXR1cm4gb25FcnJvcihkYXRhLmVycm9yKTtcbiAgICBjYXNlICdjb3VudGVyJzogcmV0dXJuIG9uQ291bnRlclVwZGF0ZShkYXRhLmNvdW50ZXIsIGRhdGEuZG9uZSk7XG4gICAgfVxuICB9O1xuICB3b3JrZXIub25lcnJvciA9IDxhbnk+IG9uRXJyb3I7XG4gIHdvcmtlci5wb3N0TWVzc2FnZSh7IHVybCwgcHJveHkgfSk7XG4gIHJldHVybiB3b3JrZXI7XG59XG5cbmZ1bmN0aW9uIHRlcm1Ub0h0bWwodGVybTogUkRGLlRlcm0pOiBzdHJpbmcge1xuICBzd2l0Y2ggKHRlcm0udGVybVR5cGUpIHtcbiAgY2FzZSAnTmFtZWROb2RlJzpcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3Rlcm0udmFsdWV9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHt0ZXJtLnZhbHVlfTwvYT5gO1xuICBjYXNlICdCbGFua05vZGUnOlxuICAgIHJldHVybiBgXzoke3Rlcm0udmFsdWV9YDtcbiAgY2FzZSAnTGl0ZXJhbCc6XG4gICAgcmV0dXJuIHRlcm0udmFsdWUgKyBgIDxiciAvPjxlbT4oJHt0ZXJtLmRhdGF0eXBlID8gdGVybVRvSHRtbCh0ZXJtLmRhdGF0eXBlKSA6IHRlcm0ubGFuZ3VhZ2V9KTwvZW0+YDtcbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gdGVybS52YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUYWJsZVByaW50ZXIoKTogKHF1YWQ6IFJERi5RdWFkKSA9PiB2b2lkIHtcbiAgY29uc3QgdGFibGU6IEhUTUxUYWJsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3V0cHV0IHRhYmxlLnF1YWRzJyk7XG5cbiAgLy8gQ2xlYXIgb2xkIHJlc3VsdHNcbiAgdGFibGUucXVlcnlTZWxlY3RvckFsbCgnLnJvdy1yZXN1bHQnKVxuICAgIC5mb3JFYWNoKChyb3cpID0+IHJvdy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvdykpO1xuXG4gIHJldHVybiAocXVhZDogUkRGLlF1YWQpID0+IHtcbiAgICBjb25zdCByb3cgPSB0YWJsZS5pbnNlcnRSb3coMSk7XG4gICAgcm93LmNsYXNzTGlzdC5hZGQoJ3Jvdy1yZXN1bHQnKTtcbiAgICBjb25zdCBjZWxsUyA9IHJvdy5pbnNlcnRDZWxsKDApO1xuICAgIGNvbnN0IGNlbGxQID0gcm93Lmluc2VydENlbGwoMSk7XG4gICAgY29uc3QgY2VsbE8gPSByb3cuaW5zZXJ0Q2VsbCgyKTtcbiAgICBjb25zdCBjZWxsRyA9IHJvdy5pbnNlcnRDZWxsKDMpO1xuICAgIGNlbGxTLmlubmVySFRNTCA9IHRlcm1Ub0h0bWwocXVhZC5zdWJqZWN0KTtcbiAgICBjZWxsUC5pbm5lckhUTUwgPSB0ZXJtVG9IdG1sKHF1YWQucHJlZGljYXRlKTtcbiAgICBjZWxsTy5pbm5lckhUTUwgPSB0ZXJtVG9IdG1sKHF1YWQub2JqZWN0KTtcbiAgICBjZWxsRy5pbm5lckhUTUwgPSB0ZXJtVG9IdG1sKHF1YWQuZ3JhcGgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlc2NhcGVIdG1sKHVuc2FmZTogc3RyaW5nKSB7XG4gIHJldHVybiB1bnNhZmVcbiAgICAucmVwbGFjZSgvJi9nLCBcIiZhbXA7XCIpXG4gICAgLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpXG4gICAgLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXG4gICAgLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpXG4gICAgLnJlcGxhY2UoLycvZywgXCImIzAzOTtcIilcbiAgICAucmVwbGFjZSgvIC9nLCBcIiZuYnNwO1wiKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJpZ1ByaW50ZXIoKTogKHF1YWQ6IFJERi5RdWFkKSA9PiB2b2lkIHtcbiAgY29uc3QgY29udGFpbmVyOiBIVE1MVGFibGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm91dHB1dCB0YWJsZS5zZXJpYWxpemVkJyk7XG5cbiAgLy8gQ2xlYXIgb2xkIHJlc3VsdHNcbiAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yb3ctcmVzdWx0JylcbiAgICAuZm9yRWFjaCgocm93KSA9PiByb3cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3cpKTtcblxuICBjb25zdCB3cml0ZXIgPSBuZXcgU3RyZWFtV3JpdGVyKHsgZm9ybWF0OiAndHJpZycgfSk7XG4gIGxldCBpID0gMDtcbiAgbGV0IGxhc3RFbGVtZW50OiBIVE1MVGFibGVEYXRhQ2VsbEVsZW1lbnQgPSBudWxsO1xuICB3cml0ZXIub24oJ2RhdGEnLCAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgbGFzdFJkZiArPSB0ZXh0O1xuICAgIGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCgvXFxuL2cpO1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBsZXQgZWxlbWVudCA9IGxhc3RFbGVtZW50O1xuICAgICAgaWYgKCFlbGVtZW50IHx8ICFmaXJzdCkge1xuICAgICAgICBjb25zdCByb3cgPSBjb250YWluZXIuaW5zZXJ0Um93KGkrKyk7XG4gICAgICAgIHJvdy5jbGFzc0xpc3QuYWRkKCdyb3ctcmVzdWx0Jyk7XG4gICAgICAgIGVsZW1lbnQgPSByb3cuaW5zZXJ0Q2VsbCgwKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICBlbGVtZW50LmlubmVySFRNTCArPSBlc2NhcGVIdG1sKGxpbmUpO1xuICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIChxdWFkOiBSREYuUXVhZCkgPT4ge1xuICAgIHdyaXRlci53cml0ZSg8YW55PiBxdWFkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weVN0cmluZ1RvQ2xpcGJvYXJkKHN0cjogc3RyaW5nKSB7XG4gIC8vIENyZWF0ZSBuZXcgZWxlbWVudFxuICBjb25zdCBlbDogSFRNTFRleHRBcmVhRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gIC8vIFNldCB2YWx1ZSAoc3RyaW5nIHRvIGJlIGNvcGllZClcbiAgZWwudmFsdWUgPSBzdHI7XG4gIC8vIFNldCBub24tZWRpdGFibGUgdG8gYXZvaWQgZm9jdXMgYW5kIG1vdmUgb3V0c2lkZSBvZiB2aWV3XG4gIGVsLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICg8YW55PiBlbCkuc3R5bGUgPSB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBsZWZ0OiAnLTk5OTlweCcgfTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gIC8vIFNlbGVjdCB0ZXh0IGluc2lkZSBlbGVtZW50XG4gIGVsLnNlbGVjdCgpO1xuICAvLyBDb3B5IHRleHQgdG8gY2xpcGJvYXJkXG4gIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gIC8vIFJlbW92ZSB0ZW1wb3JhcnkgZWxlbWVudFxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbn1cblxubGV0IGxhc3RSZGY6IHN0cmluZztcbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGxldCBsYXN0V29ya2VyOiBXb3JrZXIgPSBudWxsO1xuXG4gIC8vIExvYWQgVVJMIHN0YXRlXG4gIGNvbnN0IHVpU3RhdGUgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cigxKS5zcGxpdCgnJicpLnJlZHVjZSgoYWNjOiBhbnksIGl0ZW0pID0+IHtcbiAgICBjb25zdCBrZXl2YWx1ZSA9IGl0ZW0ubWF0Y2goL14oW149XSspPSguKikvKTtcbiAgICBpZiAoa2V5dmFsdWUpIHtcbiAgICAgIGFjY1tkZWNvZGVVUklDb21wb25lbnQoa2V5dmFsdWVbMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXl2YWx1ZVsyXSk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICAvLyBJbml0IGZvcm0ocylcbiAgY29uc3QgZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucXVlcnknKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGZvcm0gPSBmb3Jtcy5pdGVtKGkpO1xuXG4gICAgY29uc3QgaHR0cFByb3h5RWxlbWVudDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5odHRwLXByb3h5Jyk7XG5cbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICAgICAgbGFzdFJkZiA9ICcnO1xuXG4gICAgICBjb25zdCBvdXRwdXRFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdXRwdXQnKTtcbiAgICAgIGNvbnN0IGNvdW50ZXJFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdXRwdXQtY291bnRlcicpO1xuICAgICAgY29uc3QgZXJyb3JFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdXRwdXQtZXJyb3InKTtcblxuICAgICAgLy8gSGlkZSBlcnJvclxuICAgICAgZXJyb3JFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBvdXRwdXRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAvLyBLaWxsIGFueSBvbGQgd29ya2VyXG4gICAgICBpZiAobGFzdFdvcmtlcikge1xuICAgICAgICBsYXN0V29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgbmV3IHJlc3VsdHNcbiAgICAgIGNvbnN0IHByb3h5ID0gaHR0cFByb3h5RWxlbWVudC52YWx1ZTtcbiAgICAgIGxhc3RXb3JrZXIgPSBpbnZva2UoKDxhbnk+IGZvcm0ucXVlcnlTZWxlY3RvcignLmZpZWxkLXVybCcpKS52YWx1ZSxcbiAgICAgICAgcHJveHksXG4gICAgICAgIGNyZWF0ZVRyaWdQcmludGVyKCksXG4gICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgIGVycm9yRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICBlcnJvckVsZW1lbnQuaW5uZXJIVE1MID0gZXJyb3I7XG4gICAgICAgICAgaWYgKGVycm9yLmluZGV4T2YoJ0Vycm9yIHJlcXVlc3RpbmcnKSA9PT0gMCkge1xuICAgICAgICAgICAgZXJyb3JFbGVtZW50LmlubmVySFRNTCArPSBgPGJyIC8+PGVtPlRoaXMgd2Vic2l0ZSBtYXkgbm90IGhhdmUgQ09SUyBlbmFibGVkLCB0cnkgZW5hYmxpbmcgYSBwcm94eSBpbiB0aGUgc2V0dGluZ3MgKGJ1dHRvbiBuZXh0IHRvIGlucHV0IGZpZWxkKS48L2VtPmA7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAoY291bnRlcjogbnVtYmVyLCBkb25lOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgY291bnRlckVsZW1lbnQuaW5uZXJIVE1MID0gYCR7Y291bnRlcn0ke2RvbmUgPyAnJyA6ICcuLi4nfWA7XG4gICAgICAgIH0pO1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIHRydWUpO1xuXG4gICAgLy8gQ29weSBjbGlwYm9hcmQgbGlzdGVuZXJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xpcGJvYXJkJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb3B5U3RyaW5nVG9DbGlwYm9hcmQobGFzdFJkZik7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgLy8gU2V0IHVwIGRldGFpbHMgdG9nZ2xpbmdcbiAgICBjb25zdCBkZXRhaWxzOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXRhaWxzJyk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRldGFpbHMtdG9nZ2xlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoZGV0YWlscy5zdHlsZS5kaXNwbGF5ID09PSAnYmxvY2snKSB7XG4gICAgICAgIGRldGFpbHMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRldGFpbHMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBwcm94eVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm94eS1kZWZhdWx0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBodHRwUHJveHlFbGVtZW50LnZhbHVlID0gJ2h0dHBzOi8vcHJveHkubGlua2VkZGF0YWZyYWdtZW50cy5vcmcvJztcbiAgICAgIGlucHV0Q2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAvLyBVUkwgc3RhdGVcbiAgICBjb25zdCBmaWVsZFVybDogSFRNTElucHV0RWxlbWVudCA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmZpZWxkLXVybCcpO1xuICAgIGlmICh1aVN0YXRlLnVybCkge1xuICAgICAgZmllbGRVcmwudmFsdWUgPSB1aVN0YXRlLnVybDtcbiAgICB9XG4gICAgaWYgKHVpU3RhdGUucHJveHkpIHtcbiAgICAgIGh0dHBQcm94eUVsZW1lbnQudmFsdWUgPSB1aVN0YXRlLnByb3h5O1xuICAgIH1cbiAgICBjb25zdCBpbnB1dENoYW5nZUxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnlTdHJpbmc6IHN0cmluZ1tdID0gW107XG4gICAgICBpZiAoZmllbGRVcmwudmFsdWUpIHtcbiAgICAgICAgcXVlcnlTdHJpbmcucHVzaCgndXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQoZmllbGRVcmwudmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChodHRwUHJveHlFbGVtZW50LnZhbHVlKSB7XG4gICAgICAgIHF1ZXJ5U3RyaW5nLnB1c2goJ3Byb3h5PScgKyBlbmNvZGVVUklDb21wb25lbnQoaHR0cFByb3h5RWxlbWVudC52YWx1ZSkpO1xuICAgICAgfVxuICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oPzojLiopPyQvLFxuICAgICAgICBxdWVyeVN0cmluZy5sZW5ndGggPyAnIycgKyBxdWVyeVN0cmluZy5qb2luKCcmJykgOiAnJykpO1xuICAgIH07XG4gICAgZmllbGRVcmwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBpbnB1dENoYW5nZUxpc3RlbmVyKTtcbiAgICBodHRwUHJveHlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgaW5wdXRDaGFuZ2VMaXN0ZW5lcik7XG4gIH1cbn1cblxuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==